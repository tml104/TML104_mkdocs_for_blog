{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"<p>Hi, I am TML104.</p>","tags":["home","brand new"]},{"location":"#tml104-personal-blog","title":"TML104 personal blog","text":"<p>TML104 personal blog</p> <p>\u4e2a\u4eba\u535a\u5ba2\uff0c\u5305\u542b\u4e00\u4e9b\u4e2a\u4eba\u7b14\u8bb0\u548c\u4e00\u4e9b\u6742\u8bb0</p> <p>(Power by MKDocs and mkdocs-material)</p> <p>To deploy it, install Mkdocs and use <code>git clone</code>, then use <code>mkdocs build</code> or <code>mkdocs serve</code></p>","tags":["home","brand new"]},{"location":"#_1","title":"\u5199\u6587\u7ae0","text":"<ol> <li>\u5f80docs\u7684\u6587\u4ef6\u5939\u91cc\u9762\u5199md\u6587\u4ef6\u3002\u52a1\u5fc5\u786e\u4fdd\u4e00\u4e2amd\u6587\u4ef6\u53ea\u6709\u4e00\u4e2a\u4e00\u7ea7\u6807\u9898\u3002</li> <li>\u5199\u5b8c\u4e86\u4ee5\u540e\u6539\u4e00\u4e0b<code>mkdocs.yml</code>\u4e2d\u7684nav\uff08\u9ed8\u8ba4\u7f3a\u7701\u4e5f\u53ef\u4e0d\u7528\u66f4\u6539\uff0c\u4f46\u8fd9\u4e2a\u4e1c\u897f\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\u7684\uff09</li> <li>\u672c\u5730commit\u5e76push</li> <li>\u672c\u5730\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u8fd0\u884c<code>mkdocs gh-deploy</code>\u4ee5\u90e8\u7f72\u5230\u6b64\u5206\u652f\u3002github pages\u4f5c\u7528\u4e8e\u8fd9\u4e2a\u5206\u652f\u4e0a\u3002</li> </ol>","tags":["home","brand new"]},{"location":"2024%E8%85%BE%E8%AE%AF%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%A6%E5%A0%82/%E4%BD%9C%E4%B8%9A1%20-%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91UE5%20145d3bc8971f80f88e12d993a266d2ce/","title":"\u4f5c\u4e1a1 - \u6e90\u7801\u7f16\u8bd1UE5","text":"<p>Created: November 22, 2024 1:48 AM</p>"},{"location":"2024%E8%85%BE%E8%AE%AF%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%A6%E5%A0%82/%E4%BD%9C%E4%B8%9A1%20-%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91UE5%20145d3bc8971f80f88e12d993a266d2ce/#ue5","title":"\u83b7\u53d6UE5\u6e90\u4ee3\u7801","text":"<ol> <li> <p>\u9996\u5148\uff0c\u5728Github\u4e0a\u8fdb\u884cEpic\u5e10\u53f7\u5173\u8054\u3002\u968f\u540e\u5373\u53ef\u8bbf\u95eeUE5\u7684\u4ed3\u5e93</p> <ol> <li>\u5e10\u53f7\u5173\u8054\u7684\u65b9\u6cd5\uff1ahttps://www.unrealengine.com/zh-CN/ue-on-github</li> <li>Github\u4e0a\u7684Organizations\uff1ahttps://github.com/EpicGames</li> <li>\u4ed3\u5e93\uff1ahttps://github.com/EpicGames/UnrealEngine</li> </ol> </li> <li> <p>fork\u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u4e2d\uff0c\u7136\u540e\u4f7f\u7528git clone\u5c06\u6e90\u4ee3\u7801\u62c9\u4e0b\u6765</p> </li> </ol> <p></p> <ol> <li>\u5728Windows\u4e0b\uff0c\u8fd0\u884cUnrealEngine\u6839\u76ee\u5f55\u4e0b\u7684Setup.bat\u4ee5\u4e0b\u8f7d\u4f9d\u8d56</li> </ol> <p></p> <p></p> <ol> <li> <p>\u8fd0\u884cGenerateProjectFiles.bat\u4ee5\u751f\u6210\u9879\u76ee</p> </li> <li> <p>\u6253\u5f00UE.sln\uff0c\u8bbe\u7f6eUE5\u4e3a\u542f\u52a8\u9879\u76ee\uff0c\u5e76\u5c06\u6d3b\u52a8\u89e3\u51b3\u65b9\u6848\u914d\u7f6e\u4e3aDevelopment Editor\u3002 \u7136\u540e\u751f\u6210\u9879\u76ee\u3002\u6b64\u5904\u5171\u82b1\u8d394\u5c0f\u65f6\u5b8c\u6210\u751f\u6210</p> </li> </ol> <p></p> <ol> <li>\u4e3a\u4e86\u4f7f\u7528\u6784\u5efa\u529f\u80fd\uff0c\u8fd8\u9700\u8981\u751f\u6210UnrealLightmass\u3002\u5728Program\u4e0b\u751f\u6210UnrealLightMass</li> </ol> <p></p> <ol> <li>\u5728VS\u4e2d\u8fd0\u884c\u4ee5\u542f\u52a8\u865a\u5e7b\u7f16\u8f91\u5668</li> </ol> <p></p> <ol> <li>\u65b0\u5efa\u9879\u76ee\u540e\u5c06\u542f\u52a8\u53e6\u4e00\u4e2a\u65b0\u7684Visual Studio\u754c\u9762\u3002\u5728\u6b64\u7a97\u53e3\u4e2d\u9009\u62e9\u5f00\u59cb\u6267\u884c\uff08\u4e0d\u8c03\u8bd5\uff09\uff0c\u7136\u540eUE\u7f16\u8f91\u5668\u5c31\u4f1a\u6253\u5f00\u8fd9\u4e2a\u9879\u76ee</li> </ol> <p></p> <p></p> <ol> <li>\u6b64\u5904\u5bf9\u573a\u666f\u8fdb\u884c\u7b80\u5355\u7f16\u8f91\uff0c\u4f7f\u5f97\u8fd0\u884c\u540e\u73a9\u5bb6\u53ef\u4ee5\u5728\u573a\u666f\u4e2d\u79fb\u52a8\uff1a<ol> <li>\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7403\u4f53</li> <li>\u6dfb\u52a0\u4e86\u4e00\u4e2aCharacter</li> </ol> </li> </ol> <p></p>"},{"location":"2024%E8%85%BE%E8%AE%AF%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%A6%E5%A0%82/%E4%BD%9C%E4%B8%9A1%20-%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91UE5%20145d3bc8971f80f88e12d993a266d2ce/#pc","title":"PC\u5e73\u53f0\u6253\u5305\u7a0b\u5e8f","text":"<p>\u7531\u4e8e\u6211\u6ca1\u6709Android\u624b\u673a\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u9009\u62e9\u4f7f\u7528PC\u5e73\u53f0\u6253\u5305\u3002</p> <p>\u53c2\u8003\u5185\u5bb9\uff1ahttps://dev.epicgames.com/documentation/zh-cn/unreal-engine/preparing-unreal-engine-projects-for-release?application_version=5.2</p> <ol> <li>\u4fee\u6539\u201c\u9879\u76ee\u8bbe\u7f6e-\u5730\u56fe\u548c\u6a21\u5f0f\u201d\u4e2d\u7684\u9ed8\u8ba4\u5730\u56fe\u548c\u5f00\u59cb\u5730\u56fe\u4e3a\u65b0\u4fdd\u5b58\u7684\u5730\u56fe</li> </ol> <p></p> <ol> <li>\u9009\u62e9\u5e73\u53f0\u2192\u9879\u76ee\u542f\u52a8\u7a0b\u5e8f</li> </ol> <p></p> <ol> <li>\u6dfb\u52a0\u81ea\u5b9a\u4e49\u542f\u52a8\u63cf\u8ff0\u6587\u4ef6</li> </ol> <p></p> <ol> <li>\u6309\u7167\u5982\u4e0b\u5185\u5bb9\u4fee\u6539\u63cf\u8ff0\u6587\u4ef6\uff0c\u8fd4\u56de\u540e\u201c\u542f\u52a8\u6b64\u63cf\u8ff0\u6587\u4ef6\u201d\u4ee5\u6267\u884c\u6253\u5305</li> </ol> <p></p> <p></p> <p></p> <p></p> <ol> <li>\u6253\u5f00./Saved/StagedBuilds\u4e0b\u5bf9\u5e94\u6253\u5305\u5e73\u53f0\u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u5c31\u5305\u542b\u5df2\u7ecf\u6253\u5305\u7684\u6e38\u620f\u3002</li> </ol> <p></p> <p></p>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Const/","title":"Const","text":"<p>(CPP4) (2022\u5e741\u670825\u65e5)</p>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Const/#const_1","title":"const","text":"<ul> <li>const\u9ed8\u8ba4\u4f5c\u7528\u4e8e\u5176\u5de6\u8fb9\u7684\u4e1c\u897f\uff0c\u5426\u5219\u4f5c\u7528\u4e8e\u5176\u53f3\u8fb9\u7684\u4e1c\u897f(C++\u91cc const int \u4e0e int const \u6709\u4ec0\u4e48\u533a\u522b\uff1f - \u738b\u56fd\u6f47\u7684\u56de\u7b54 - \u77e5\u4e4ehttps://www.zhihu.com/question/443195492/answer/1723886545)</li> <li>\u5141\u8bb8\u4e3a\u5e38\u91cf\u5f15\u7528\u7ed1\u5b9a\u975e\u5e38\u91cf\u5bf9\u8c61</li> <li>\u4f7f\u7528extern\u53ef\u4f7f\u5f97const\u7528\u4e8e\u5176\u4ed6\u6587\u4ef6\uff08\u4f46\u7f16\u8bd1\u5668\u53ef\u80fd\u66ff\u6362\u4e0a\u7684\u5b9e\u73b0\u4f1a\u6709\u95ee\u9898\uff09</li> <li>\u9876\u5c42const\uff1a\u6307\u9488\u672c\u8eab\u662f\u5e38\u91cf(const \u4fee\u9970\u53d8\u91cf) <code>int * const curErr = &amp;errNumb</code></li> <li>\u5e95\u5c42const\uff1a\u6240\u6307\u5bf9\u8c61\u662f\u5e38\u91cf(const \u4fee\u9970\u7c7b\u578b)</li> <li><code>const int *p2=&amp;c1;</code></li> <li><code>const int ci=42; const int &amp;r=ci;</code> \uff08\u4e24\u4e2a\u90fd\u662f\u5e95\u5c42\uff09</li> <li>\u540c\u65f6\u662f\uff1a <code>const int *const p3= p2;</code></li> <li>const T&amp; \u80fd\u591f\u627f\u8f7d\u53f3\u503c\u2014\u2014\u5b57\u9762\u91cf\u2014\u2014\u800c\u5355\u7eaf\u7684T&amp;\u53ea\u80fd\u627f\u8f7d\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u4e0d\u80fd\u5b58\u653e\u4e00\u4e2a\u5b57\u9762\u91cf (\u5728c++\u4ee3\u7801\u4e2d\u4f7f\u7528const\u5173\u952e\u5b57\u662f\u4e0d\u662f\u81ea\u627e\u9ebb\u70e6\uff1f - pansz\u7684\u56de\u7b54 - \u77e5\u4e4ehttps://www.zhihu.com/question/473730909/answer/2026149928)</li> <li>const\u7684\u4f5c\u7528\u662f\u6307\u660e\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u80fd\u7531\u6b64\u66f4\u6539\u3002\u56e0\u6b64<code>const int &amp;j=i;</code>\u53ef\u4ee5\u5f15\u7528\u5230\u4e00\u4e2a\u53d8\u91cf \uff08https://stackoverflow.com/questions/44115083/why-can-const-int-bind-to-an-int\uff09</li> <li>const \u53ef\u4ee5\u7528\u4e8e\u5f15\u7528\u5b57\u9762\u503c\uff0c\u56e0\u6b64<code>const double &amp;j=(intval);</code>\u662f\u53ef\u4ee5\u7684\u3002const\u5f15\u7528\u5c06\u4f1a\u989d\u5916\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u5e76\u7ed1\u5b9a\u4e0a\u53bb\u3002</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Const/#constexpr","title":"constexpr","text":"<p>\u7528\u4e8e\u7531\u7f16\u8bd1\u5668\u9a8c\u8bc1\u8868\u8fbe\u5f0f\u662f\u5426\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f</p> <pre><code>constexpr int mf=20;\nconstexpr int lim=mf+1;\nconstexpr int sz=size(); //size is a constexpr func\n</code></pre> <ul> <li>\u6307\u5411\u6307\u9488\u65f6\uff0c\u53ea\u5bf9\u6307\u9488\u6709\u6548</li> </ul> <p>\u53ef\u4ee5\u5b9a\u4e49\u9012\u5f52\u5730constexpr\u51fd\u6570\uff1a</p> <pre><code>constexpr int fibonacci(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2);\n}\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Tuple/","title":"Tuple","text":"<p>(CPP5) (2022\u5e741\u670825\u65e5)</p> <p>https://changkun.de/modern-cpp/zh-cn/02-usability/#2-3-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;tuple&gt;\n\nstd::tuple&lt;int, double, std::string&gt; f() {\n    return std::make_tuple(1, 2.3, \"456\");\n}\n\nint main() {\n    auto [x, y, z] = f();\n    std::cout &lt;&lt; x &lt;&lt; \", \" &lt;&lt; y &lt;&lt; \", \" &lt;&lt; z &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Tuple/#_1","title":"\u5b9a\u4e49","text":"<pre><code>std::tuple&lt;T1, T2, TN&gt; t1;            //\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684tuple\u5bf9\u8c61\uff08\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\uff09\uff0c\u5b83\u5bf9\u5e94\u7684\u5143\u7d20\u5206\u522b\u662fT1\u548cT2...Tn\u7c7b\u578b\uff0c\u91c7\u7528\u503c\u521d\u59cb\u5316\u3002\n\nstd::tuple&lt;T1, T2, TN&gt; t2(v1, v2, ... TN);    //\u521b\u5efa\u4e00\u4e2atuple\u5bf9\u8c61\uff0c\u5b83\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662fT1\u548cT2 ...Tn\u7c7b\u578b; \u8981\u83b7\u53d6\u5143\u7d20\u7684\u503c\u9700\u8981\u901a\u8fc7tuple\u7684\u6210\u5458get&lt;Ith&gt;(obj)\u8fdb\u884c\u83b7\u53d6(Ith\u662f\u6307\u83b7\u53d6\u5728tuple\u4e2d\u7684\u7b2c\u51e0\u4e2a\u5143\u7d20\uff0c\u8bf7\u770b\u540e\u9762\u5177\u4f53\u5b9e\u4f8b)\u3002\n\nstd::tuple&lt;T1&amp;&gt; t3(ref&amp;); // tuple\u7684\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u662f\u4e00\u4e2a\u5f15\u7528\n\nstd::make_tuple(v1, v2); // \u50cfpair\u4e00\u6837\u4e5f\u53ef\u4ee5\u901a\u8fc7make_tuple\u8fdb\u884c\u521b\u5efa\u4e00\u4e2atuple\u5bf9\u8c61\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Tuple/#tuple_sizevalue","title":"\u83b7\u53d6\u5143\u7d20\u4e2a\u6570: tuple_size::value","text":"<pre><code>int a=2;\nint b=5;\ntuple&lt;int&amp;,int&amp;&gt; p1{a,b};\n\ncout&lt;&lt;(std::tuple_size&lt;decltype(p1&gt;::value)&lt;&lt;endl;\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Tuple/#get","title":"\u83b7\u53d6\u5143\u7d20\u5185\u5bb9\uff1a get","text":"<pre><code>std::get&lt;0&gt;(p1);\n</code></pre> <ul> <li>tuple\u65e0\u6cd5\u8fed\u4ee3\uff1a\u7ed9\u5b9a\u7684\u7d22\u5f15\u5fc5\u987b\u662fconstexpr</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Tuple/#tuple_elementtype","title":"\u83b7\u53d6\u5143\u7d20\u7684\u7c7b\u578b\uff1a tuple_element::type","text":"<pre><code>std::tuple&lt;std::string, int&gt; tp(\"Sven\", 20);\n\n// \u5f97\u5230\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7c7b\u578b\n\nstd::tuple_element&lt;1, decltype(tp)&gt;::type ages;  // ages\u5c31\u4e3aint\u7c7b\u578b\n\nages = std::get&lt;1&gt;(tp);\n\nstd::cout &lt;&lt; \"ages: \" &lt;&lt; ages &lt;&lt; '\\n';\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Tuple/#tie","title":"\u89e3\u5305\u5143\u7d20\uff1a tie","text":"<pre><code>int c,d,e;\nstd::tie(c,d) = p1;\nstd::tie(std::ignore,e) = p1;\n\ncout&lt;&lt;c&lt;&lt;\" \"&lt;&lt;d&lt;&lt;endl;\ncout&lt;&lt;e&lt;&lt;endl;\n</code></pre> <ul> <li>\u4f7f\u7528 <code>std::ignore</code> \u5360\u4f4d</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/Tuple/#tuple_1","title":"\u8bbe\u7f6etuple\u7684\u5185\u5bb9\u5f15\u7528\u4ee5\u4fbf\u901a\u8fc7\u5176\u4ed6\u5f15\u7528\u53d8\u91cf\u66f4\u6539\u5185\u5bb9","text":"<pre><code>    std::tuple&lt;std::string, int, float&gt; tp1(\"Sven Cheng\", 77, 66.1);\n\n    std::string name;\n    int weight;\n    float f;\n\n    auto tp2 = std::make_tuple(std::ref(name), std::ref(weight), std::ref(f)) = tp1;\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E5%A3%B0%E6%98%8E%EF%BC%8C%E5%AE%9A%E4%B9%89/","title":"\u521d\u59cb\u5316\uff0c\u58f0\u660e\uff0c\u5b9a\u4e49","text":"<p>(CPP3) (2022\u5e741\u670825\u65e5)</p> <p>https://changkun.de/modern-cpp/zh-cn/02-usability/#2-3-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC</p>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E5%A3%B0%E6%98%8E%EF%BC%8C%E5%AE%9A%E4%B9%89/#_2","title":"\u5217\u8868\u521d\u59cb\u5316","text":"<p>\u4e0b\u9762\u56db\u53e5\u8bdd\u57fa\u672c\u4e00\u6837</p> <pre><code>int u={0};\nint u=0;\nint u{0};\nint u(0);\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E5%A3%B0%E6%98%8E%EF%BC%8C%E5%AE%9A%E4%B9%89/#initializer_list","title":"\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570 initializer_list","text":"<pre><code>#include &lt;initializer_list&gt;\n#include &lt;vector&gt;\nclass MagicFoo {\npublic:\n    std::vector&lt;int&gt; vec;\n    MagicFoo(std::initializer_list&lt;int&gt; list) {\n        for (std::initializer_list&lt;int&gt;::iterator it = list.begin();\n             it != list.end(); ++it)\n            vec.push_back(*it);\n    }\n};\nint main() {\n    // after C++11\n    MagicFoo magicFoo = {1, 2, 3, 4, 5};\n\n    std::cout &lt;&lt; \"magicFoo: \";\n    for (std::vector&lt;int&gt;::iterator it = magicFoo.vec.begin(); it != magicFoo.vec.end(); ++it) std::cout &lt;&lt; *it &lt;&lt; std::endl;\n}\n</code></pre> <p>\u6b64\u5916initializer_list\u8fd8\u53ef\u7528\u4e8e\u666e\u901a\u51fd\u6570\u5f62\u53c2</p> <pre><code>public:\n    void foo(std::initializer_list&lt;int&gt; list) {\n        for (std::initializer_list&lt;int&gt;::iterator it = list.begin();\n            it != list.end(); ++it) vec.push_back(*it);\n    }\n\nmagicFoo.foo({6,7,8,9});\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E5%A3%B0%E6%98%8E%EF%BC%8C%E5%AE%9A%E4%B9%89/#_3","title":"\u58f0\u660e","text":"<p>\u7528\u4e8e\u5f15\u7528\u4e0d\u540c\u6587\u4ef6\u4e2d\u7684\u53d8\u91cf\u3002\uff08\u6bd4\u5982\u7cfb\u7edf\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\uff09</p> <pre><code>extern int i;\nextern int i=1; //\u58f0\u660e\u7684\u4f5c\u7528\u88ab\u62b5\u6d88\u800c\u53d8\u6210\u5b9a\u4e49\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/%E6%9D%82%E9%A1%B9/","title":"\u6742\u9879","text":"<p>(CPP2) (2022\u5e741\u670825\u65e5)</p> <ul> <li>\u6269\u5c55\u5b57\u7b26\u96c6\u7684\u5b57\u7b26\u7c7b\u578b\uff1awchar_t, char16_t, ...</li> <li>int &gt;= short, long &gt;= int, ll &gt;= long</li> <li>\u5217\u8868\u521d\u59cb\u5316</li> <li>nullptr\uff1a\u7a7a\u6307\u9488\uff08\u5b57\u9762\u503c\uff09</li> <li>const\uff1a</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/%E8%87%AA%E5%A2%9E%E7%AC%A6%E5%8F%B7%28%2B%2B%29%E5%92%8C%E5%B7%A6%E5%8F%B3%E5%80%BC/","title":"\u81ea\u589e\u7b26\u53f7(++)\u548c\u5de6\u53f3\u503c","text":"<p>(CPP1) (2022\u5e741\u670825\u65e5)</p> <p>https://blog.csdn.net/oyhb_1992/article/details/78168458</p> <ul> <li>i++ \u662f\u53f3\u503c\uff08\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u4e0d\u80fd\u53d6\u5730\u5740\uff09\uff0c ++i\u662f\u5de6\u503c\uff08\u53ef\u4ee5\u88ab\u8d4b\u503c\uff09</li> </ul> <pre><code>(++i) += i;\n\nint *ip = &amp;(++i)\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/C%2B%2B/%E8%87%AA%E5%A2%9E%E7%AC%A6%E5%8F%B7%28%2B%2B%29%E5%92%8C%E5%B7%A6%E5%8F%B3%E5%80%BC/#_2","title":"\u81ea\u589e\u8fd0\u7b97\u7b26\u7684\u5b9e\u73b0","text":"<pre><code>// \u524d\u7f00\u5f62\u5f0f\uff1a\nint &amp;  int ::operator++()  //\u8fd9\u91cc\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5f15\u7528\u5f62\u5f0f\uff0c\u5c31\u662f\u8bf4\u51fd\u6570\u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5de6\u503c\u4f7f\u7528\n{ //\u51fd\u6570\u672c\u8eab\u65e0\u53c2\uff0c\u610f\u5473\u7740\u662f\u5728\u81ea\u8eab\u7a7a\u95f4\u5185\u589e\u52a01\u7684\n   * this   += 1;   // \u589e\u52a0\n   return   * this ;   // \u53d6\u56de\u503c\n}\n</code></pre> <pre><code>//\u540e\u7f00\u5f62\u5f0f:\nconst   int   int ::operator++( int )  //\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u975e\u5de6\u503c\u578b\u7684\uff0c\u4e0e\u524d\u7f00\u5f62\u5f0f\u7684\u5dee\u522b\u6240\u5728\u3002\n{ //\u51fd\u6570\u5e26\u53c2\uff0c\u8bf4\u660e\u6709\u53e6\u5916\u7684\u7a7a\u95f4\u5f00\u8f9f\n   int   oldValue = * this ;   // \u53d6\u56de\u503c\n   ++(* this );   // \u589e\u52a0\n   return   oldValue;   // \u8fd4\u56de\u88ab\u53d6\u56de\u7684\u503c\uff0c\u4e34\u65f6\u53d8\u91cf\n}\n</code></pre>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C1/","title":"C1","text":"<p>https://datawhalechina.github.io/easy-rl/#/chapter1/chapter1?id=_114-%e5%bc%ba%e5%8c%96%e5%ad%a6%e4%b9%a0%e7%9a%84%e5%ba%94%e7%94%a8</p>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C1/#11","title":"1.1 \u5f3a\u5316\u5b66\u4e60\u6982\u8ff0","text":"<ul> <li>\u5f3a\u5316\u5b66\u4e60</li> <li>\u667a\u80fd\u4f53\uff1aagent</li> <li>\u73af\u5883\uff1aenvironment</li> <li>\u52a8\u4f5c\uff1aaction</li> <li> <p>\u51b3\u7b56\uff1adecision</p> </li> <li> <p>\u5f3a\u5316\u5b66\u4e60\u662f\u975e\u76d1\u7763\u5b66\u4e60</p> </li> <li>\u8f93\u5165\u6837\u672c\u4e3a\u5e8f\u5217\uff0c\u4e0d\u6ee1\u8db3\u72ec\u7acb\u540c\u5206\u5e03</li> <li>\u65e0\u6807\u7b7e\uff0c\u9700\u8981\u63a2\u7d22</li> <li>\u63a2\u7d22\uff08exploration\uff09\u548c\u5229\u7528\uff08exploitation\uff09</li> <li> <p>\u65e0\u76d1\u7763\u8005\uff0c\u53ea\u6709\u5956\u52b1\u4fe1\u53f7\uff08reward signal\uff09</p> </li> <li> <p>\u7279\u5f81</p> </li> <li>\u5ef6\u8fdf\u5956\u52b1</li> <li>\u8bd5\u9519\u4e0e\u63a2\u7d22</li> <li>\u6709\u65f6\u95f4\u5173\u8054\u7684\u6570\u636e</li> <li> <p>\u667a\u80fd\u4f53\u7684\u52a8\u4f5c\u4e0e\u91c7\u96c6\u5230\u7684\u6570\u636e\u5173\u8054\uff0c\u9700\u8981\u7a33\u5b9a\u667a\u80fd\u4f53\u7684\u52a8\u4f5c</p> </li> <li> <p>\u5386\u53f2\u548c\u5e94\u7528</p> </li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C1/#12","title":"1.2 \u5e8f\u5217\u51b3\u7b56","text":"<ul> <li>\u5956\u52b1</li> <li>\u5e8f\u5217\u51b3\u7b56</li> <li>\u5386\u53f2\uff1a\u89c2\u6d4b\uff0c\u52a8\u4f5c\uff0c\u5956\u52b1\u7684\u5e8f\u5217</li> <li>\u72b6\u6001\uff1a\u5bf9\u4e16\u754c\u4fe1\u606f\u7684\u5b8c\u6574\u63cf\u8ff0</li> <li>\u89c2\u6d4b\uff1a\u5bf9\u4e16\u754c\u4fe1\u606f\u7684\u90e8\u5206\u63cf\u8ff0</li> <li>\u73af\u5883\u6709\u81ea\u5df1\u7684\u51fd\u6570\\(s_t^e=f^e(H_t)\\)\u66f4\u65b0\u72b6\u6001\uff0c\u667a\u80fd\u4f53\u4e5f\u6709\u51fd\u6570\\(s_t^a=f^a(H_t)\\)\u66f4\u65b0\u72b6\u6001</li> <li>\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\uff1a\\(o_t=s_t^e=s_t^a\\)</li> <li>\u90e8\u5206\u53ef\u89c2\u6d4b\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\uff1a\\((S,A,T,R,\\omega,O,\\gamma)\\)<ul> <li>S\uff1a\u72b6\u6001\u7a7a\u95f4\uff08\u9690\u53d8\u91cf\uff09</li> <li>A\uff1a\u52a8\u4f5c\u7a7a\u95f4</li> <li>T(s'|s,a)\uff1a\u72b6\u6001\u8f6c\u79fb\u6982\u7387</li> <li>R\uff1a\u5956\u52b1\u51fd\u6570</li> <li>\\(\\omega(o|s,a)\\) \uff1a\u89c2\u6d4b\u6982\u7387</li> </ul> </li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C1/#13","title":"1.3 \u52a8\u4f5c\u7a7a\u95f4","text":"<ul> <li>\u79bb\u6563\u52a8\u4f5c\u7a7a\u95f4</li> <li>\u8fde\u7eed\u52a8\u4f5c\u7a7a\u95f4</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C1/#14","title":"1.4 \u5f3a\u5316\u5b66\u4e60\u667a\u80fd\u4f53\u7684\u7ec4\u6210\u6210\u5206\u4e0e\u7c7b\u578b","text":"<ul> <li>\u7b56\u7565\uff1a\u667a\u80fd\u4f53\u4f1a\u7528\u7b56\u7565\u6765\u9009\u53d6\u4e0b\u4e00\u6b65\u7684\u52a8\u4f5c</li> <li>\u968f\u673a\u6027\u7b56\u7565\uff1a\\(\\pi(a|s) = p(a_t=a|s_t=s)\\)\uff0c\u91c7\u53d6\u67d0\u4e2a\u52a8\u4f5c\u662f\u968f\u673a\u7684</li> <li>\u786e\u5b9a\u6027\u7b56\u7565\uff1a\u76f4\u63a5\u53d6pi\u51fd\u6570\u4e2d\u6700\u5927\u6982\u7387\u7684\u52a8\u4f5c\u3002\\(a^{*}=\\underset{a}{\\arg \\max} \\pi(a \\mid s)\\)</li> <li>\u4ef7\u503c\u51fd\u6570\uff1a\u7528\u4ef7\u503c\u51fd\u6570\u6765\u5bf9\u5f53\u524d\u72b6\u6001\u8fdb\u884c\u8bc4\u4f30\u3002\u4ef7\u503c\u51fd\u6570\u7528\u4e8e\u8bc4\u4f30\u667a\u80fd\u4f53\u8fdb \u5165\u67d0\u4e2a\u72b6\u6001\u540e\uff0c\u53ef\u4ee5\u5bf9\u540e\u9762\u7684\u5956\u52b1\u5e26\u6765\u591a\u5927\u7684\u5f71\u54cd\u3002\u4ef7\u503c\u51fd\u6570\u503c\u8d8a\u5927\uff0c\u8bf4\u660e\u667a\u80fd\u4f53\u8fdb\u5165\u8fd9\u4e2a\u72b6\u6001\u8d8a\u6709\u5229</li> <li>\u6298\u6263\u56e0\u5b50 \\(\\gamma\\)</li> <li>V\u4ef7\u503c\u51fd\u6570\uff1a\\(V_{\\pi}(s) \\doteq \\mathbb{E}_{\\pi}\\left[G_{t} \\mid s_{t}=s\\right]=\\mathbb{E}_{\\pi}\\left[\\sum_{k=0}^{\\infty} \\gamma^{k} r_{t+k+1} \\mid s_{t}=s\\right], \\text{\u5bf9\u4e8e\u6240\u6709\u7684} s \\in S\\)\uff0c\u5728\u4f7f\u7528\u7b56\u7565pi\u65f6\u7684\u5956\u52b1</li> <li>Q\u51fd\u6570\uff1a\\(Q_{\\pi}(s, a) \\doteq \\mathbb{E}_{\\pi}\\left[G_{t} \\mid s_{t}=s, a_{t}=a\\right]=\\mathbb{E}_{\\pi}\\left[\\sum_{k=0}^{\\infty} \\gamma^{k} r_{t+k+1} \\mid s_{t}=s, a_{t}=a\\right]\\)\uff0c\u672a\u6765\u53ef\u4ee5\u83b7\u5f97\u5956\u52b1\u7684\u671f\u671b\u53d6\u51b3\u4e8e\u5f53\u524d\u7684\u72b6\u6001\u548c\u5f53\u524d\u7684\u52a8\u4f5c</li> <li>\u6a21\u578b\uff1a\u6a21\u578b\u8868\u793a\u667a\u80fd\u4f53\u5bf9\u73af\u5883\u7684\u72b6\u6001\u8fdb\u884c\u7406\u89e3\uff0c\u5b83\u51b3\u5b9a\u4e86\u73af\u5883\u4e2d\u4e16\u754c\u7684\u8fd0\u884c\u65b9\u5f0f</li> <li>\u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff1a\\(p_{s s^{\\prime}}^{a}=p\\left(s_{t+1}=s^{\\prime} \\mid s_{t}=s, a_{t}=a\\right)\\)</li> <li>\u5956\u52b1\u51fd\u6570\uff1a\\(R(s,a)=\\mathbb{E}\\left[r_{t+1} \\mid s_{t}=s, a_{t}=a\\right]\\)</li> <li> <p>\u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b\uff1a\u7b56\u7565\u3001\u4ef7\u503c\u51fd\u6570\u3001\u6a21\u578b</p> </li> <li> <p>\u57fa\u4e8e\u7b56\u7565\u7684\u5f3a\u5316\u5b66\u4e60\uff1a\u6700\u5927\u5316\u5956\u52b1</p> </li> <li>\u7b56\u7565\u68af\u5ea6\uff08Policy Gradient\uff0cPG\uff09</li> <li>\u57fa\u4e8e\u4ef7\u503c\u7684\u5f3a\u5316\u5b66\u4e60\uff1a\u5b66\u4e60\u6bcf\u4e2a\u72b6\u6001\u4ef7\u503c\u7684\u4e0d\u540c\u4ee5\u53d6\u5f97\u6700\u4f73\u7b56\u7565</li> <li>\u4ec5\u79bb\u6563\u73af\u5883\u4e0b\u6709\u597d\u6548\u679c</li> <li>Q\u5b66\u4e60\uff08Q-learning\uff09\u3001 Sarsa</li> <li> <p>\u6f14\u5458\u8bc4\u8bba\u5458\u667a\u80fd\u4f53\uff1a\u4e8c\u8005\u7684\u7ed3\u5408</p> </li> <li> <p>\u6709\u6a21\u578b\u5f3a\u5316\u5b66\u4e60\uff1a\u5b66\u4e60\u72b6\u6001\u7684\u8f6c\u79fb\u6765\u91c7\u53d6\u52a8\u4f5c</p> </li> <li>\u9700\u8981\u5bf9\u771f\u5b9e\u73af\u5883\u8fdb\u884c\u5efa\u6a21</li> <li>\u9002\u7528\u4e8e\u6570\u636e\u532e\u4e4f\u7684\u573a\u666f</li> <li>\u53ef\u4ee5\u5728\u865a\u62df\u4e16\u754c\u4e2d\u9884\u6d4b\u51fa\u5c06\u8981\u53d1\u751f\u7684\u4e8b\uff0c\u5e76\u91c7\u53d6\u5bf9\u81ea\u5df1\u6700\u6709\u5229\u7684\u7b56\u7565</li> <li>\u514d\u6a21\u578b\u5f3a\u5316\u5b66\u4e60\uff1a\u5b66\u4e60\u4ef7\u503c\u51fd\u6570\u548c\u7b56\u7565\u51fd\u6570\u8fdb\u884c\u51b3\u7b56\uff08\u800c\u4e0d\u662f\u4f30\u8ba1\u73af\u5883\u72b6\u6001\uff09</li> <li>\u6570\u636e\u9a71\u52a8</li> <li> <p>\u667a\u80fd\u4f53\u53ea\u80fd\u4e00\u6b65\u4e00\u6b65\u5730\u91c7\u53d6\u7b56\u7565\uff0c\u7b49\u5f85\u771f\u5b9e\u73af\u5883\u7684\u53cd\u9988</p> </li> <li> <p>\u5b66\u4e60</p> </li> <li>\u89c4\u5212\uff1a\u73af\u5883\u662f\u5df2\u77e5\u7684\uff0c\u667a\u80fd\u4f53\u88ab\u544a\u77e5\u4e86\u6574\u4e2a\u73af\u5883\u7684\u8fd0\u4f5c\u89c4\u5219\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u667a\u80fd\u4f53\u80fd\u591f\u8ba1\u7b97\u51fa\u4e00\u4e2a\u5b8c\u7f8e\u7684\u6a21\u578b\uff0c\u5e76\u4e14\u5728\u4e0d\u9700\u8981\u4e0e\u73af\u5883\u8fdb\u884c\u4efb\u4f55\u4ea4\u4e92\u7684\u65f6\u5019\u8fdb\u884c\u8ba1\u7b97</li> <li>\u4e00\u4e2a\u5e38\u7528\u7684\u5f3a\u5316\u5b66\u4e60\u95ee\u9898\u89e3\u51b3\u601d\u8def\u662f\uff0c\u5148\u5b66\u4e60\u73af\u5883\u5982\u4f55\u5de5\u4f5c\uff0c\u4e5f\u5c31\u662f\u4e86\u89e3\u73af\u5883\u5de5\u4f5c\u7684\u65b9\u5f0f\uff0c\u5373\u5b66\u4e60\u5f97\u5230\u4e00\u4e2a\u6a21\u578b\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e2a\u6a21\u578b\u8fdb\u884c\u89c4\u5212\u3002</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C1/#16","title":"1.6 \u63a2\u7d22\u548c\u5229\u7528","text":"<ul> <li>\u63a2\u7d22-\u5229\u7528\u7a98\u5883</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C2/","title":"C2","text":"<p>https://datawhalechina.github.io/easy-rl/#/chapter2/chapter2</p>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C2/#21","title":"2.1 \u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b","text":"<ul> <li>\u9a6c\u5c14\u53ef\u592b\u6027\u8d28\uff1a\u968f\u673a\u8fc7\u7a0b\u5728\u7ed9\u5b9a\u73b0\u5728\u72b6\u6001\u53ca\u6240\u6709\u8fc7\u53bb\u72b6\u6001\u60c5\u51b5\u4e0b\uff0c\u5176\u672a\u6765\u72b6\u6001\u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u4ec5\u4f9d\u8d56\u4e8e\u5f53\u524d\u72b6\u6001</li> <li>\u9a6c\u5c14\u53ef\u592b\u94fe\uff1a\u79bb\u6563\u65f6\u95f4\u7684\u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b</li> <li>\u72b6\u6001\u8f6c\u79fb\u77e9\u9635</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C2/#22","title":"2.2 \u9a6c\u5c14\u53ef\u592b\u5956\u52b1\u8fc7\u7a0b","text":"<ul> <li>\u9a6c\u5c14\u53ef\u592b\u5956\u52b1\u8fc7\u7a0b\uff1a\u9a6c\u5c14\u53ef\u592b\u94fe\u52a0\u4e0a\u5956\u52b1\u51fd\u6570</li> <li>\u5956\u52b1\u51fd\u6570\uff1aR</li> <li>\u6298\u6263\u56e0\u5b50</li> <li>\u53ef\u4f5c\u4e3a\u8d85\u53c2\u6570\u5b66\u4e60</li> <li>\u8303\u56f4\uff1a\u4e00\u4e2a\u56de\u5408\u7684\u957f\u5ea6\uff08\u6bcf\u4e2a\u56de\u5408\u6700\u5927\u7684\u65f6\u95f4\u6b65\u6570\uff09</li> <li>\u6298\u6263\u56de\u62a5\uff1a\\(G_t = r_{t+1}+\\cdots+\\gamma^{T-t-1}r_T\\)</li> <li> <p>\u72b6\u6001\u4ef7\u503c\u51fd\u6570\uff1a\\(V^t(s)=\\mathbb{E}[G_t|s_t=s]\\)</p> </li> <li> <p>\u8d1d\u5c14\u66fc\u65b9\u7a0b</p> </li> </ul> \\[   V(s)=\\underbrace{R(s)}_{\\text {\u5373\u65f6\u5956\u52b1}}+\\underbrace{\\gamma \\sum_{s^{\\prime} \\in S} p\\left(s^{\\prime} \\mid s\\right) V\\left(s^{\\prime}\\right)}_{\\text {\u672a\u6765\u5956\u52b1\u7684\u6298\u6263\u603b\u548c}} \\] <ul> <li>\u8d1d\u5c14\u66fc\u65b9\u7a0b\u7684\u77e9\u9635\u5f62\u5f0f:</li> <li> <p>\u53ef\u4ee5\u5229\u7528\u8fd9\u79cd\u65b9\u6cd5\u8ba1\u7b97\u72b6\u6001\u4ef7\u503c\u7684\u89e3\u6790\u89e3\uff0c\u4f46\u53ea\u9002\u7528\u4e8e\u8f83\u5c0f\u72b6\u6001\u7684\u60c5\u5f62 $$   \\begin{aligned}     \\boldsymbol{V} &amp;= \\boldsymbol{\\boldsymbol{R}}+ \\gamma \\boldsymbol{P}\\boldsymbol{V} \\     \\boldsymbol{I}\\boldsymbol{V} &amp;= \\boldsymbol{R}+ \\gamma \\boldsymbol{P}\\boldsymbol{V} \\     (\\boldsymbol{I}-\\gamma \\boldsymbol{P})\\boldsymbol{V}&amp;=\\boldsymbol{R} \\     \\boldsymbol{V}&amp;=(\\boldsymbol{I}-\\gamma \\boldsymbol{P})^{-1}\\boldsymbol{R}     \\end{aligned} $$</p> </li> <li> <p>\u8ba1\u7b97\u9a6c\u5c14\u53ef\u592b\u5956\u52b1\u7684\u8fed\u4ee3\u7b97\u6cd5</p> </li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C2/#23","title":"2.3 \u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b","text":"<ul> <li>\u5f15\u5165\u51b3\u7b56\u52a8\u4f5ca</li> <li>\u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff1a\u53d6\u51b3\u4e8e\u73b0\u5728\u7684\u72b6\u6001\u548c\u52a8\u4f5c</li> <li> <p>\u5956\u52b1\u51fd\u6570R\uff1a\u5f53\u524d\u7684\u72b6\u6001\u4ee5\u53ca\u91c7\u53d6\u7684\u52a8\u4f5c\u4f1a\u51b3\u5b9a\u667a\u80fd\u4f53\u5728\u5f53\u524d\u53ef\u80fd\u5f97\u5230\u7684\u5956\u52b1\u591a\u5c11 $$ p\\left(s_{t+1} \\mid s_{t}, a_{t}\\right) =p\\left(s_{t+1} \\mid h_{t}, a_{t}\\right)   \\ R\\left(s_{t}=s, a_{t}=a\\right)=\\mathbb{E}\\left[r_{t} \\mid s_{t}=s, a_{t}=a\\right] $$</p> </li> <li> <p>\u7b56\u7565\uff1a\\(\\pi(a\\mid s) = p(a_t=a\\mid s_t = s)\\)</p> </li> <li>\u7b56\u7565\u4e0b\u7684\u72b6\u6001\u8f6c\u79fb\uff1a\\(P_{\\pi}\\left(s^{\\prime} \\mid s\\right)=\\sum_{a \\in A} \\pi(a \\mid s) p\\left(s^{\\prime} \\mid s, a\\right)\\)</li> <li>\u7b56\u7565\u4e0b\u7684\u5956\u52b1\u51fd\u6570\uff1a\\(r_{\\pi}(s)=\\sum_{a \\in A} \\pi(a \\mid s) R(s, a)\\)</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/EasyRL/C2/#-","title":"- \u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b \u4e0e \u9a6c\u5c14\u53ef\u592b\uff08\u5956\u52b1\uff09\u8fc7\u7a0b\uff1a\u524d\u8005\u53ef\u4ee5\u7531\u667a\u80fd\u4f53\u51b3\u5b9a\u672a\u6765\u7684\u72b6\u6001\u8f6c\u79fb","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L16/","title":"L16","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L16/#lecture-16","title":"Lecture 16","text":"<p>\uff08220718\uff09</p>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L16/#_1","title":"\u81ea\u52a8\u5bfb\u8def\u7cfb\u7edf","text":"<ul> <li>Map Representations</li> <li>Walkable Area<ul> <li>Determined by character motion capabilities: Physical Collision, ...</li> </ul> </li> <li>Formats</li> <li>Waypoint network<ul> <li>Subway system</li> <li>Plan the path on the waypoint network</li> <li>Pros: Easy, fast</li> <li>Cons: Limited flexibility, waypoint selection requires manual intervention</li> </ul> </li> <li>Grid<ul> <li>square, triangle, hexagon</li> <li>modify in dynamic</li> <li>Pros: easy, uniform, dynamic</li> <li>Cons: accurary, ...</li> </ul> </li> <li>Navigation Mesh<ul> <li>convec poly</li> <li>...</li> </ul> </li> <li>Sparse voxel octree</li> <li>Path finding</li> <li>dfs, bfs</li> <li>dijk</li> <li>A*<ul> <li>cost calculation: f(n) = g(n) + h(n)</li> <li>heuristic on navigation mesh: euclid distance * D</li> </ul> </li> <li>Path Smoothing</li> <li> <p>funnel algorithm</p> </li> <li> <p>navi mesh advanced features: polygon flag</p> </li> <li>navi mesh advanced features: tile</li> <li>navi mesh advanced features: off-mesh link</li> <li>Steering</li> <li>seek / flee</li> <li>velocity match</li> <li> <p>align</p> </li> <li> <p>Crowd simulation</p> </li> <li>Macroscopic models</li> <li>Collision avoidance</li> <li>Reciprocal Velcity Obstacle</li> <li>Sensing or perception</li> <li>internal</li> <li>external: static spatial, dynamic spatial, ..</li> <li>navigation data, tactical map, smart obj, cover point</li> <li>influence map</li> <li>dynamic spatial info - game obj</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L16/#_2","title":"\u51b3\u7b56","text":"<ul> <li>Classic Decision Making algorithms</li> <li>\u6709\u9650\u72b6\u6001\u673a</li> <li>\u884c\u4e3a\u6811</li> <li></li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L18/","title":"L18","text":"<p>// Copyright 2022 tml104 //  // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at //  //     http://www.apache.org/licenses/LICENSE-2.0 //  // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License.</p>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L18/#lecture-18","title":"Lecture 18","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L18/#network-protocol","title":"Network protocol","text":"<ul> <li>TCP/IP</li> <li>Layering</li> <li>AF_INET</li> <li>AF_INET6</li> <li>TCP</li> <li>enet, raknet</li> <li>ACK, NAK, SEQ, Timeouts</li> <li>\u62dc\u5360\u5ead\u95ee\u9898</li> <li>Sliding windows protocol</li> <li>go-back-n ARQ</li> <li>Forward Error Correction</li> <li>XOR</li> <li>Reed-Solomon Codes</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L18/#clock-synchronization","title":"Clock Synchronization","text":"<ul> <li>RTT</li> <li>NTP</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L18/#rpc","title":"RPC","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES104/L18/#game-synchronization","title":"Game Synchronization","text":"<ul> <li>snapshot</li> <li>lockstep</li> <li>state synchronization</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/","title":"L1","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/#l1","title":"L1","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/#what-is-character-animation","title":"What is Character Animation","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/#3d-ca","title":"3D CA","text":"<ul> <li>simulation</li> <li> <p>fluid, smoke, sound...</p> </li> <li> <p>character animation</p> </li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/#why-study","title":"Why Study","text":"<ul> <li>\u5927\u91cf\u7684joint</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/#character-animation-pipeline","title":"Character Animation pipeline","text":"<ul> <li>\u9aa8\u9abc\u5957\u7740\u76ae\u5957\u8fd0\u52a8</li> <li>keyframe-based/kinematic approach\uff1a\u76f4\u63a5\u6539\u53d8\u4eba\u7684\u59ff\u6001</li> <li>physics-based/dynamic approaches\uff1a</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/#keyframe-animation","title":"Keyframe animation","text":"<ul> <li>disney's 12 principles</li> <li>forward/inverse kinematics</li> <li>key inerpolation</li> <li>motion capture</li> <li>motion retargeting\uff1a\u52a8\u8865\u91cd\u8ba1\u7b97</li> <li>motion graphs/ state machines\uff1a\u52a8\u4f5c\u56fe\uff0c\u72b6\u6001\u673a</li> <li>motion matchingx</li> <li>generative models</li> <li>cross-modal motion synthesis</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L1/#physics-based-dynamic-approaches","title":"Physics-based dynamic approaches","text":"<ul> <li>\u901a\u8fc7\u7269\u7406\u4eff\u771f</li> <li>\u5173\u8282\u529b\u77e9</li> <li>spacetime/ trajectory optimization\uff1a\u8f68\u8ff9\u4f18\u5316\u65b9\u6cd5</li> <li>abstract models</li> <li>DRL-based Tracking controllers</li> <li>hierarchical controllers</li> <li>generative control policies</li> <li></li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L2/","title":"L2","text":"<ul> <li>\u6570\u5b66\u80cc\u666f\u4e0e\u524d\u5411\u8fd0\u52a8\u5b66</li> <li>\u7ebf\u6027\u4ee3\u6570\u56de\u987e</li> <li>3d\u65cb\u8f6c\u7684\u8868\u793a</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L2/#_1","title":"\u5411\u91cf","text":"<ul> <li>\u957f\u5ea6\u3001\u6a21</li> <li>\u5355\u4f4d\u5411\u91cf</li> <li>\u65b9\u5411</li> <li>\u53ef\u8868\u793a\u7684\u4e1c\u897f</li> <li>\u901f\u5ea6\u3001\u4f4d\u7f6e\u3001\u4f4d\u79fb\u2026\u2026</li> <li>\u5217\u5411\u91cf</li> <li>\u5411\u91cf\u57fa\u672c\u8fd0\u7b97</li> <li>\u52a0\u6cd5\u3001\u6570\u4e58</li> <li>\u70b9\u4e58<ul> <li>\\(a\\cdot b = \\lVert a \\rVert \\lVert b \\rVert \\cos\\theta\\)</li> <li>\u4ea4\u6362\u5f8b\u3001\u7ed3\u5408\u5f8b</li> <li>\u81ea\u8eab\u70b9\u4e58\u662f\u6a21\u957f\u7684\u5e73\u65b9</li> <li>\u98ce\u683c\u8f6c\u6362</li> <li>\\(\\theta = \\arccos \\frac{a\\cdot b}{\\lVert a \\rVert \\lVert b \\rVert}\\)</li> <li>\\(\\mathbf{a} \\cdot \\mathbf{b} = \\mathbf{0} \\leftrightarrow \\cos \\theta = 0 \\leftrightarrow \\theta = 90\\degree \\leftrightarrow a \\perp b\\)</li> <li>\u6295\u5f71\uff1a\\(a_b = \\lVert a \\rVert \\cos \\theta = a \\cdot \\frac{b}{\\lVert b \\rVert}\\)</li> </ul> </li> <li>\u53c9\u4e58\uff1a\\(c = a \\times b = \\begin{bmatrix}a_yb_z - a_zb_y \\\\ a_zb_x - a_xb_z \\\\ a_xb_y - a_yb_x \\\\\\end{bmatrix}\\)<ul> <li>\u8bb0\u5fc6\uff1axyz\u5faa\u73af\uff0c\u5148\u6b63\u540e\u53cd</li> <li>\\(a \\times b = \\lVert a \\rVert \\lVert b \\rVert \\sin(\\theta)\\mathbf{n}\\)</li> <li>\u53f3\u624b\u5b9a\u5219</li> <li>\u56db\u5143\u6570\u8fd0\u7b97\u7684\u526f\u4ea7\u7269\uff1f</li> <li>\u4ea4\u6362\u76f8\u53cd\u5f8b\uff1a\\(a \\times b = -b \\times a\\)</li> <li>\u5206\u914d\u5f8b\uff1a\\(a \\times (b+d) = a \\times b + a \\times d\\)</li> <li>\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff01</li> <li>\u7ed3\u679c\u4e0d\u662f\u5355\u4f4d\u5411\u91cf\uff0c\u9700\u8981\u5f52\u4e00\u5316\uff1a\\(n = \\frac{a \\times b}{\\lVert a \\rVert \\lVert b \\rVert} (a\\neq \\mathbf 0, b\\neq \\mathbf 0, a \\nparallel b)\\)</li> </ul> </li> <li>\u5bfb\u627e\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u65cb\u8f6c</li> <li>\u89d2\u5e73\u5206\u9762</li> <li>\u5229\u7528\u53c9\u4e58\u5bfb\u627e\u89d2\u5ea6\u548c\u65cb\u8f6c\u91cf</li> <li>\u7ed5\u67d0\u5411\u91cf\u65cb\u8f6c\u5411\u91cf</li> <li></li> <li>v\u7684\u65b9\u5411\u7531u\u53c9a\u5f97\u5230</li> <li>t\u7684\u65b9\u5411\u8fdb\u4e00\u6b65\u7531u\u53c9v\u5f97\u5230</li> <li>\\(b = a+v+t\\)</li> <li>\\(\\mathbf v = (\\sin\\theta)u\\times a\\)</li> <li>\\(\\mathbf t = (1-\\cos\\theta)u\\times (u \\times a)\\)</li> <li> <p>Rodrigues' rotation formula: \\(\\mathbf b = \\mathbf a + (\\sin\\theta) \\mathbf u \\times \\mathbf a + (1-\\cos\\theta) \\mathbf u \\times (\\mathbf u \\times \\mathbf a)\\)</p> </li> <li> <p>\u6b63\u4ea4\u57fa</p> </li> <li>\u53f3\u624b\u7cfb\uff08xyz\uff09\uff1ax\u53c9y\u5f97z\uff0c\u2026\u2026</li> </ul>"},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/GAMES105/L2/#_2","title":"\u77e9\u9635","text":""},{"location":"%E5%AD%A6%E4%B8%8D%E6%9D%A5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%88%99/","title":"\u539f\u5219","text":"<p>(DP1) (2022\u5e741\u670826\u65e5)</p> <ul> <li>\u5355\u4e00\u804c\u8d23\u539f\u5219\uff08SPR\uff09</li> <li>\u5f00\u95ed\u539f\u5219\uff08OCP\uff09\uff1a\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\uff0c\u70ed\u63d2\u62d4\u3002</li> <li>\u91cc\u6c0f\u66ff\u6362\uff08LSP\uff09\uff1a\u4efb\u4f55\u57fa\u7c7b\u53ef\u4ee5\u51fa\u73b0\u7684\u5730\u65b9\uff0c\u5b50\u7c7b\u4e00\u5b9a\u53ef\u4ee5\u51fa\u73b0\u3002\u4e5f\u5373\u670d\u7528\u57fa\u7c7b\u3002</li> <li>\u63a5\u53e3\u5206\u79bb\u539f\u5219\uff08ISP\uff09\uff1aISP \u7684\u5efa\u8bae\u662f\u5c06\u63a5\u53e3\u5206\u5f00\uff0c\u4ee5\u4fbf\u4e8e\u5b9e\u73b0\u8005\u53ef\u4ee5\u6839\u636e\u4ed6\u4eec\u7684\u9700\u6c42\u8fdb\u884c\u6311\u9009\u548c\u9009\u62e9\uff08\u6bd4\u5982Java\u7684\u63a5\u53e3\uff09</li> <li>\u4f9d\u8d56\u53cd\u8f6c\u539f\u5219\uff08DIP\uff09\uff1a\u9488\u5bf9\u63a5\u53e3\u7f16\u7a0b\uff0c\u4f9d\u8d56\u4e8e\u62bd\u8c61\u800c\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/","title":"1 1 \u968f\u673a\u8bd5\u9a8c","text":"<p>\u9ad8\u65af\u79ef\u5206\uff1a $$ \\int_{-\\infty}^\\infty e<sup>{-\\frac{x</sup>2}2}dx=\\sqrt{2\\pi}\\ \\int_{-\\infty}^\\infty e<sup>{-{x</sup>2}}dx=\\sqrt{\\pi}\\ \\int_{-\\infty}^\\infty e<sup>{a(x+b)</sup>2}dx=\\sqrt{\\frac{\\pi}a}\\ \\int_0^\\infty x<sup>{2n}e</sup>{-\\alpha x<sup>2}dx=\\frac{(2n-1)!!}{2</sup>\\ \\int_0^\\infty x}\\alpha^n}\\sqrt{\\frac\\pi a<sup>{2n+1}e</sup>{-\\alpha x<sup>2}dx=\\frac{n!}{2\\alpha</sup> $$ }</p> <p>P19 \u4f8b\u98985\\6 P71 \u5361\u65b9\u5206\u5e03\u76f8\u5173\u95ee\u9898 6\u30017\u7ae0\u7684\u8bc1\u660e\u9898</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#1-1","title":"1-1 \u968f\u673a\u8bd5\u9a8c","text":"<ul> <li>\u53ef\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u91cd\u590d\u8fdb\u884c</li> <li>\u6bcf\u6b21\u8bd5\u9a8c\u7684\u53ef\u80fd\u7ed3\u679c\u4e0d\u6b62\u4e00\u79cd\uff0c\u80fd\u591f\u4e8b\u5148\u660e\u786e\u8bd5\u9a8c\u7684\u6240\u6709\u53ef\u80fd\u7ed3\u679c</li> <li>\u8fdb\u884c\u4e00\u6b21\u8bd5\u9a8c\u4e4b\u524d\u4e0d\u80fd\u786e\u5b9a\u54ea\u4e00\u4e2a\u7ed3\u679c\u4f1a\u51fa\u73b0</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#1-2","title":"1-2 \u6837\u672c\u7a7a\u95f4\u3001\u968f\u673a\u4e8b\u4ef6","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_1","title":"\u6837\u672c\u7a7a\u95f4","text":"<p>\u6837\u672c\u7a7a\u95f4\uff08S\uff09\uff1a\u968f\u673a\u8bd5\u9a8cE\u7684\u6240\u6709\u53ef\u80fd\u7ed3\u679c\u7684\u96c6\u5408</p> <p>\u6837\u672c\u70b9\uff1aE\u7684\u6bcf\u4e2a\u7ed3\u679c\uff0c\u6837\u672c\u7a7a\u95f4\u7684\u5143\u7d20</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_2","title":"\u968f\u673a\u4e8b\u4ef6","text":"<p>\u968f\u673a\u4e8b\u4ef6\uff1aE\u7684\u6837\u672c\u7a7a\u95f4S\u7684\u5b50\u96c6</p> <p>\u57fa\u672c\u4e8b\u4ef6\uff1a\u7531\u4e00\u4e2a\u6837\u672c\u70b9\u7ec4\u6210\u5355\u70b9\u96c6</p> <p>\u4e8b\u4ef6\u53d1\u751f\uff1a\u5b50\u96c6\u4e2d\u7684\u6837\u672c\u70b9\u51fa\u73b0</p> <p>\u5fc5\u7136\u4e8b\u4ef6\uff1a\u4e8b\u4ef6\u5305\u542b\u6240\u6709\u7684\u57fa\u672c\u4e8b\u4ef6\uff08\u6837\u672c\u7a7a\u95f4\u7684\u70b9\uff09</p> <p>\u4e0d\u53ef\u80fd\u4e8b\u4ef6\uff1a\u4e0d\u5305\u542b\u4efb\u4f55\u57fa\u672c\u4e8b\u4ef6\uff08\u6837\u672c\u7a7a\u95f4\u7684\u70b9\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_3","title":"\u4e8b\u4ef6\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97","text":"<p>\u5305\u542b\u5173\u7cfb\uff1aA\u53d1\u751f\u5fc5\u7136\u5bfc\u81f4B\u53d1\u751f $$ A\\subset B $$ \u5bf9\u4efb\u4f55\u4e8b\u4ef6\u90fd\u6709 $$ S\\supset A\\supset \\emptyset $$ \u548c\u4e8b\u4ef6\uff1a\u4e8b\u4ef6A\u3001B\u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u751f\u6240\u6784\u6210\u7684\u4e8b\u4ef6 $$ \\bigcup_{i=1}^nA_i \\ \\bigcup_{i=1}^\\infty A_i $$ \u79ef\u4e8b\u4ef6\uff1aA\u3001B\u540c\u65f6\u53d1\u751f\u6240\u6784\u6210\u7684\u4e8b\u4ef6 $$ \\bigcap_{i=1}^nA_i $$ \u4e92\u65a5\u4e8b\u4ef6\uff1aA\u3001B\u4e0d\u80fd\u540c\u65f6\u53d1\u751f $$ AB=\\emptyset $$</p> <ul> <li>\u57fa\u672c\u4e8b\u4ef6\u4e24\u4e24\u4e92\u4e0d\u76f8\u5bb9</li> <li>A\u5e76B=A+B</li> </ul> <p>\u5bf9\u7acb\u4e8b\u4ef6\uff1a\u4e00\u6b21\u8bd5\u9a8c\u4e2dA\u3001B\u5fc5\u7136\u6709\u5176\u4e2d\u4e00\u4e2a\u53d1\u751f\uff0c\u4e14\u53ea\u53d1\u751f\u5176\u4e2d\u4e00\u4e2a $$ \\overline A=S-A $$</p> <p>\u5dee\u4e8b\u4ef6\uff1aA\u53d1\u751f\uff0cB\u4e0d\u53d1\u751f\uff0c\u8bb0\u4e3aA-B $$ A-B=A-AB $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#1-3","title":"1-3 \u9891\u7387\u3001\u6982\u7387","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_4","title":"\u9891\u7387","text":"<p>n\u6b21\u8bd5\u9a8c\u4e2d\uff0c\u4e8b\u4ef6A\u53d1\u751f\u7684\u6b21\u6570nA\u79f0\u4e3a\u4e8b\u4ef6A\u53d1\u751f\u9891\u6570\u3002 $$ f_n(A)=\\frac {n_A}{n} $$ \u57fa\u672c\u6027\u8d28\uff1a $$ 0\\le f_n(A) \\le1 \\ f_n(S)=1 \\ f_n(A_1\\cup\\dots\\cup A_k)=f_n(A_1)+\\dots+f_n(A_k) $$</p> <p>A1...An\u4e24\u4e24\u4e92\u65a5</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_5","title":"\u6982\u7387","text":"<p>E\u662f\u968f\u673a\u8bd5\u9a8c\uff0cS\u662f\u6837\u672c\u7a7a\u95f4\u3002\u96c6\u5408\u51fd\u6570P\u6ee1\u8db3\uff1a</p> <p>1.\u975e\u8d1f\u6027\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4e8b\u4ef6A $$ P(A)\\ge 0 $$ 2.\u89c4\u8303\u6027\uff1a\u5bf9\u4e8e\u5fc5\u7136\u4e8b\u4ef6S $$ P(S)=1 $$ 3.\u53ef\u5217\u53ef\u52a0\u6027\uff1aA1\u3001...\u4e24\u4e24\u4e92\u65a5 $$ P(A_1\\cup\\dots)=P(A_1)+\\dots $$</p> <p>\u6027\u8d28\uff1a</p> <p>1. $$ P(\\emptyset)=0 $$ 2.\u6709\u9650\u53ef\u52a0\u6027\uff1aA1\u3001...\u3001An\u662f\u4e24\u4e24\u4e92\u65a5\u4e8b\u4ef6 $$ P(A_1\\cup\\dots\\cup A_n)=P(A_1)+\\dots+P(A_n) $$ 3. $$ A\\subset B \\Rightarrow \\ P(B-A)=P(B)-P(A) \\ P(B)\\ge P(A) $$ 4.\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u4e8b\u4ef6A\uff0c $$ P(A)\\leq1 $$ 5.\u9006\u4e8b\u4ef6\u6982\u7387 $$ P(\\overline A)=1-P(A) $$ 6.\u52a0\u6cd5\u516c\u5f0f\uff08\u57fa\u4e8e\u5bb9\u65a5\u539f\u7406\uff09 $$ P(A\\cup B)=P(A)+P(B)-P(AB) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#1-4","title":"1-4 \u7b49\u53ef\u80fd\u6982\u578b\uff08\u53e4\u5178\u6982\u578b\uff09","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_6","title":"\u5b9a\u4e49","text":"<p>1.\u57fa\u672c\u4e8b\u4ef6\u7684\u53d1\u751f\u6982\u7387\u76f8\u540c</p> <p>2.\u6837\u672c\u7a7a\u95f4\u6709\u6709\u9650\u591a\u4e2a\u70b9 $$ P({e_1})=...=P({e_n}) \\ P(A)=\\sum_{j=1}^kP({e_{i_j}})=\\frac kn $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_7","title":"\u8ba1\u7b97","text":"<p>\u7ec4\u5408\u8ba1\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#1-5","title":"1-5 \u6761\u4ef6\u6982\u7387","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_8","title":"\u6761\u4ef6\u6982\u7387","text":"<p>\u4e58\u6cd5\u539f\u7406 $$ P(A|B)=\\frac{P(AB)}{P(B)} \\ \u4e58\u6cd5\u516c\u5f0f\uff1a P(AB)=P(B)\\cdot P(A|B) $$</p> <p>\u6027\u8d28\uff1a</p> <p>1.\u975e\u8d1f\u6027\uff1a $$ P(B|A)\\ge0 $$ 2.\u89c4\u8303\u6027\uff1a $$ P(S|A)=1 $$ 3.\u53ef\u5217\u53ef\u52a0\u6027\uff1aB1...Bn\u4e24\u4e24\u4e92\u65a5 $$ P(\\bigcup_{i=1}^\\infty B_i|A)=\\sum_{i=1}^\\infty P(B_i|A) $$</p> <p>\u6269\u5c55\uff1a</p> <p>\u591a\u4e2a\u4e8b\u4ef6\u7684\u4e58\u6cd5\u539f\u7406 $$ P(ABC)=P(C|AB)P(B|A)P(A)\\ P(A_1\\dots A_n)=P(A_n|A_1\\dots A_{n-1})\\dots $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_9","title":"\u5168\u6982\u7387\u516c\u5f0f","text":"<p>B1\u3001B2\u3001...\u3001Bn\u662f\u6837\u672c\u7a7a\u95f4S\u7684\u4e00\u4e2a\u5212\u5206\uff08\u80cc\u666f\u4e8b\u4ef6\uff09\uff0cA\u662fE\u7684\u4e8b\u4ef6\uff08A\u7684\u53d1\u751f\u4f9d\u8d56\u4e8e\u80cc\u666f\u4e8b\u4ef6\u7684\u53d1\u751f\uff09\uff0cP(Bi)&gt;0\uff0c\u5219 $$ P(A)=P(A|B_1)P(B_1)+\\dots+P(A|B_n) $$</p> <p>\u5b8c\u5168\u4e8b\u4ef6\u7cfb\uff1aB1\u3001...\u3001Bn</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#bayes","title":"Bayes \u8d1d\u53f6\u65af\u516c\u5f0f","text":"<p>\u77e5\u9053\u7ed3\u679c\u6c42\u539f\u56e0\u53d1\u751f\u7684\u6982\u7387 $$ P(B_i|A)=\\frac{P(B_iA)}{P(A)}=\\frac{P(B_i)P(A|B_i)}{\\sum_{j=1}^nP(B_j)P(A|B_j)} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#1-6","title":"1-6 \u72ec\u7acb\u6027","text":"\\[ P(AB)=P(A)P(B)\\\\ P(A|B)=P(A)\\\\ P(B|A)=P(B) \\] <p>\u5b9a\u7406\uff08\u53cd\u4e8b\u4ef6\u72ec\u7acb\u6027\uff09\uff1aA\u3001B\u4e92\u76f8\u72ec\u7acb\uff0c\u5219\u4e0b\u9762\u7684\u4e8b\u4ef6\u4e5f\u76f8\u4e92\u72ec\u7acb $$ A\u548c\\overline B\u3001\\overline A\u548cB\u3001\\overline A\u548c\\overline B $$</p> <ul> <li>P(A),P(B)&gt;0\uff0c\u5219AB\u72ec\u7acb\u4e0eAB\u4e92\u65a5\u4e0d\u80fd\u540c\u65f6\u6210\u7acb\uff08\u56e0\u4e3a\u4e92\u65a5\u610f\u5473\u7740P(A|B)=P(B|A)=0\uff0c\u4f46\u8fd9\u4e0d\u53ef\u80fd\uff09</li> </ul> <p>\u76f8\u4e92\u72ec\u7acb\uff1a</p> <p>\u4e0b\u9762\u56db\u4e2a\u7b49\u5f0f\u540c\u65f6\u6210\u7acb\uff0c\u5219A\u3001B\u3001C\u76f8\u4e92\u72ec\u7acb $$ \\begin{cases} P(AB)=P(A)P(B)\\ P(BC)=P(B)P(C)\\ P(AC)=P(A)P(C)\\ P(ABC)=P(A)P(B)P(C) \\end{cases} $$</p> <ul> <li>A1\u3001...\u3001An\u76f8\u4e92\u72ec\u7acb\uff0c\u5219\u4efb\u610fk\u4e2a\u4e8b\u4ef6\u4e5f\u76f8\u4e92\u72ec\u7acb</li> <li>A1\u3001...\u3001An\u76f8\u4e92\u72ec\u7acb\uff0c\u5219\u5c06\u4efb\u610f\u591a\u4e2a\u4e8b\u4ef6\u6362\u6210\u5b83\u4eec\u5404\u81ea\u7684\u5bf9\u7acb\u4e8b\u4ef6\uff0c\u8fd9n\u4e2a\u4e8b\u4ef6\u4ecd\u76f8\u4e92\u72ec\u7acb</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#2-1","title":"2-1 \u968f\u673a\u53d8\u91cf","text":"<p>\u968f\u673a\u53d8\u91cf\uff1a\u6837\u672c\u7a7a\u95f4S\u3001X\u4e3a\u5b9a\u4e49\u5728\u6837\u672c\u7a7a\u95f4S\u4e0a\u7684\u5b9e\u6570\u51fd\u6570\uff0c\u5219\u79f0X\u4e3a\u968f\u673a\u53d8\u91cf $$ S={e},X=X(e) $$ \uff08\u968f\u673a\u53d8\u91cf\u4e8b\u5148\u662f\u4e0d\u786e\u5b9a\u7684\uff09</p> <p>\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf</p> <p>\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#2-2","title":"2-2 \u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u5206\u5e03","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#0-1","title":"0-1 \u5206\u5e03","text":"\\[ P\\{X=k\\}=p^k(1-p)^{1-k},k=0,1 \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#bernoulli","title":"Bernoulli \u8bd5\u9a8c\u3001\u4e8c\u9879\u5206\u5e03","text":"<p>Bernoulli \u8bd5\u9a8c\uff1a\u4e8b\u4ef6\u53ea\u6709A\uff08\u53d1\u751f\uff09\u548cA\u62d4\uff08\u4e0d\u53d1\u751f\uff09\u4e24\u79cd\u60c5\u51b5</p> <p>n\u91cd\uff1a\u505a\u8fd9\u4e2a\u8bd5\u9a8cn\u6b21</p> <p>\u4e8c\u9879\u5206\u5e03\uff1a $$ X\\widetilde~b(n,p)\\ P{X=k}=\\binom{n}{k}p<sup>k(1-p)</sup> $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#poisson","title":"Poisson \u5206\u5e03","text":"\\[ X\\widetilde~\\pi(\\lambda)\\\\ P\\{X=k\\}=\\frac{\\lambda^ke^{-\\lambda}}{k!} \\] <p>\u5176\u4e2d $$ \\lambda=np_n\\ \\binom{n}{k}p<sup>k_n(1-p_n)</sup>\\approx\\frac{\\lambda<sup>ke</sup> $$}}{k!</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#2-3","title":"2-3 \u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570","text":"\\[ F(x)=P(X\\le x) ~(-\\infty\\le x\\le+\\infty) \\] <p>\u5dee\u5206\u6027\uff1a\u53f3\u8fde\u7eed\uff08\u8fd9\u91cc\u662f\u6307\u95f4\u65ad\u70b9\u5904\u53d6\u503c\u53d6\u9760\u53f3\u7684\u503c\uff09 $$ P{x_1\\lt X\\le x_2}=F(x_2)-F(x_1) $$</p> \\[ F(-\\infty)=0\\\\ F(+\\infty)=1\\\\ \\lim_{x\\to x_0}F(x)=F(x_0) \\] <p>\u5355\u8c03\u6027\uff1aF(x)\u4e0d\u4f1a\u4e0b\u964d\uff08\u56e0\u4e3aP\uff08x\uff09\u5927\u4e8e\u7b49\u4e8e0\uff09</p> <p></p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#2-4","title":"2-4 \u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5bc6\u5ea6","text":"\\[ F(x)=\\int_{-\\infty}^xf(t)dt \\] <p>\u5176\u4e2df(x)\u662f\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u5176\u503c\u63cf\u8ff0\u4e86\u6982\u7387\u5728x\u9644\u8fd1\u7684\u5bc6\u96c6\u7a0b\u5ea6 $$ f(x)\\ge0\\ \\int_{-\\infty}^{+\\infty}f(x)dx=1 $$ \u5355\u8c03\u6027\uff1aF\uff08x\uff09\u4e0d\u4f1a\u4e0b\u964d\uff08f(x)&gt;=0\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_10","title":"\u5747\u5300\u5206\u5e03","text":"\\[ f(x)=\\frac1{b-a} ~(a\\lt x\\le b )\\\\ F(x)=\\begin{cases} 0,&amp;x\\lt a\\\\ \\frac{x-a}{b-a},&amp;a\\le x\\lt b\\\\ 1,&amp;x\\ge b\\\\ \\end{cases}\\\\ X\\widetilde~U(a,b) \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_11","title":"\u6307\u6570\u5206\u5e03","text":"\\[ f(x)=\\begin{cases} \\frac1\\theta e^{-\\frac x\\theta},&amp; x\\gt0\\\\ 0,&amp;\\text{else} \\end{cases}\\\\ F(x)=\\begin{cases} 1-e^{-\\frac x\\theta},&amp; x\\gt0\\\\ 0,&amp;\\text{else} \\end{cases} \\] <p>\u65e0\u8bb0\u5fc6\u6027\uff1a $$ P(X&gt;s+t|X&gt;s)=P(X&gt;t) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_12","title":"\u6b63\u6001\u5206\u5e03","text":"\\[ X\\widetilde~ N(\\mu,\\sigma^2)\\\\ f(x)=\\frac1{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}},-\\infty&lt;x&lt;+\\infty \\] <p>\u5bf9\u79f0\u6027\uff1a\u66f2\u7ebf\u5173\u4e8e\u4e0b\u9762\u7684\u76f4\u7ebf\u5bf9\u79f0 $$ x=\\mu\\ P{\\mu-h&lt;X\\le\\mu}=P{\\mu&lt;X\\le\\mu+h} $$ \u6700\u503c\uff1a $$ x=\\mu\u65f6\u6709\u6700\u5927\u503c\\ f(\\mu)=\\frac1{\\sqrt{2\\pi}\\sigma} $$ \u62d0\u70b9\uff1a $$ x=\\mu\\pm\\sigma $$ sigma\uff08\u6807\u51c6\u5dee\uff09\u8d8a\u5c0f\uff0c\u56fe\u5f62\u8d8a\u5c16\u9510</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_13","title":"\u6807\u51c6\u6b63\u6001\u5206\u5e03","text":"\\[ X\\widetilde~ N(0,1)\\\\ \\mu=0,\\sigma=1\\\\ \\phi(x)=\\frac1{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}}\\\\ \\Phi(x)=\\frac1{\\sqrt{2\\pi}}\\int_{-\\infty}^xe^{-\\frac{t^2}{2}}dt \\] <p>\u5173\u4e8e\u76f4\u7ebfx=0\uff08y\u8f74\uff09\u5bf9\u79f0\uff1a $$ \\Phi(-x)=1-\\Phi(x) $$ \u7ebf\u6027\u53d8\u6362\u516c\u5f0f\uff1a $$ X\\widetilde~N(\\mu,\\sigma^2)\\Rightarrow Z=\\frac{X-\\mu}{\\sigma}\\widetilde~ N(0,1) $$ \u901a\u8fc7\u53d8\u6362\u540e\u8ba1\u7b97\u51fa\u6ee1\u8db3\u6982\u7387\u7684Z\uff0c\u7136\u540e\u901a\u8fc7\u7ebf\u6027\u5173\u7cfb\u5f97\u5230X</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#2-5","title":"2-5 \u968f\u673a\u53d8\u91cf\u7684\u51fd\u6570\u5206\u5e03","text":"<p>\u5df2\u77e5 $$ Y=g(X) $$ \u6839\u636eX\u7684\u5206\u5e03F_X(x)\u6c42\u51faY\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570f_Y(y) $$ F_Y(y)=P(Y\\le y)=P(g(X)\\le y)\\Rightarrow P(X\\le h(y))\\ \\Rightarrow F_X(h(y))\\ \u518d\u4e24\u7aef\u6c42\u5bfc\u5f97\\ f_Y(y)=f_X(h(y))\\cdot h'(y) $$ \u5b9a\u7406\uff1a\u968f\u673a\u53d8\u91cfX\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3af_X(x),-\u221e&lt;x&lt;+\u221e\u3002g(x)\u5904\u5904\u53ef\u5bfc\u800c\u4e14\u6052\u4e3a\u5355\u8c03\u51fd\u6570\uff08g(x)&gt;0 or g'(x)&lt;0 \uff09\uff0c\u5219Y=g(X)\u662f\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff0c\u5176\u6982\u7387\u5bc6\u5ea6\uff1a $$ f_Y(y)=\\begin{cases} f_x[h(y)]\\cdot|h'(y)|,~a&lt;y&lt;b\\ 0, \\text{else} \\end{cases}\\ \u5176\u4e2d\\ a=\\min(g(-\\infty),g(+\\infty))\\ b=\\max(g(-\\infty),g(+\\infty))\\ h=g^{-1} $$ \u6ce8\u610f\uff1a\u5148\u901a\u8fc7x\uff08X\uff09\u7684\u503c\u57df\u6c42\u89e3y\uff08Y\uff09\u7684\u503c\u57df</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#3-1","title":"3-1 \u4e8c\u7ef4\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03","text":"<p>\u4e8c\u7ef4\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570\uff1a $$ \u4e8c\u7ef4\u968f\u673a\u53d8\u91cf(X,Y)\\ F(x,y)=P{(X\\le x)\\cap(Y\\le y)}=P(X\\le x,Y\\le y) $$ \u51fd\u6570\u503c\uff08\u6982\u7387\uff09 $$ F(x,y)=P(x_1&lt;X\\le x_2,y_1&lt;Y\\le y_2)\\ =F(x_2,y_2)-F(x_1,y_2)-F(x_2,y_1)+F(x_1,y_1) $$</p> <p>\u6027\u8d28\uff1a $$ p_{ij}\\ge0\\ \\sum_i<sup>\\infty\\sum_j</sup>\\infty p_{ij}=1 $$ \u6982\u7387\u5bc6\u5ea6\uff1a $$ F(x,y)=\\int_{-\\infty}<sup>y\\int_{-\\infty}</sup>xf(u,v)dudv $$ \u6027\u8d28\uff1a $$ f(x,y)\\ge0\\ \\int_{-\\infty}<sup>\\infty\\int_{-\\infty}</sup>\\infty f(u,v)dudv=1\\ F\u5173\u4e8ex\u3001y\u7684\u504f\u5bfc\u51fd\u6570\u662ff(x,y)\uff1af(x,y)=\\frac{\\partial^2F(x,y)}{\\partial x\\partial y} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#3-2","title":"3-2 \u8fb9\u7f18\u5206\u5e03","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_14","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u8fb9\u7f18\u5206\u5e03","text":"\\[ P\\{X=x_i\\}=\\sum_{j=1}^\\infty p_{ij}\\\\ P\\{Y=y_i\\}=\\sum_{i=1}^\\infty p_{ij}\\\\ F_X(x)=F(x,\\infty)=\\sum_{x_i\\le x}\\sum_{j=1}^\\infty p_{ij}\\\\ F_Y(y)=F(\\infty,y)=\\sum_{y_i\\le y}\\sum_{i=1}^\\infty p_{ij} \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_15","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u7684\u8fb9\u7f18\u5206\u5e03","text":"<p>\u56fa\u5b9a\u67d0\u4e00\u53d8\u91cf\uff0c\u904d\u5386\u53e6\u4e00\u53d8\u91cf\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c $$ f_x(x)=\\int_{-\\infty}^\\infty f(x,y)dy\\ F_X(x)=F(x,+\\infty)=\\int_{-\\infty}<sup>xdx\\int_{-\\infty}</sup>f(x,y)dy\\ F_Y(x)=F(+\\infty,y)=\\int_{-\\infty}<sup>{\\infty}dx\\int_{-\\infty}</sup>f(x,y)dy $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#3-3","title":"3-3 \u6761\u4ef6\u5206\u5e03","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_16","title":"\u6761\u4ef6\u5206\u5e03\u5f8b","text":"<p>\u56fa\u5b9a\u5176\u4e2d\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u540e\u53d6\u5f97\u53e6\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\uff08X\u7684\u6761\u4ef6\u5206\u5e03\u5f8b\uff09 $$ P{X=x_i|Y=y_i}=\\frac{P{X=x_i,Y=y_i}}{P{Y=y_i}}=\\frac{\u8054\u5408\u5206\u5e03}{\u8fb9\u7f18\u5206\u5e03} $$ \u6027\u8d28\uff1a $$ P{X=x_i|Y=y_i}\\ge0\\ \\sum_{i=1}^\\infty P{X=x_i|Y=y_i}=1 $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_17","title":"\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u3001\u6761\u4ef6\u5206\u5e03\u51fd\u6570","text":"\\[ f_{X|Y}(x|y)=\\frac{f(x,y)}{f_Y(y)}\\\\ P\\{X\\le x|Y=y\\}=F_{X|Y}(x|y)=\\int_{-\\infty}^{x}f_{X|Y}(x|y)dx = \\int_{-\\infty}^x\\frac{f(x,y)}{f_Y(y)}dx \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#3-4","title":"3-4 \u76f8\u4e92\u72ec\u7acb\u968f\u673a\u53d8\u91cf","text":"<p>X\u7684\u6982\u7387\u4e0d\u53d6\u51b3\u4e8eY\u7684\u6982\u7387 $$ f(x,y)=f_X(x)f_Y(y)\\ F(x,y)=F_X(x)F_Y(y)\\ f_{Y|X}(y|x)=f_Y(y),f_{X|Y}(x|y)=f_X(x) $$</p> <p>\u5bf9\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u800c\u8a00 $$ P{X=x_i,Y=y_i}=P{X=x_i}P{Y=y_i} $$ \u4e8c\u7ef4\u6b63\u6001\u968f\u673a\u53d8\u91cf\uff1arho=0 $$ f(x,y)=\\frac{1}{2\\pi \\sigma_1\\sigma_2\\sqrt{1-\\rho<sup>2}}\\exp{\\frac{-1}{2(1-\\rho</sup>2)}[\\frac{(x-\\mu_1)<sup>2}{\\sigma_1</sup>2}-\\2\\rho \\frac{(x-\\mu_1)(y-\\mu_2)}{\\sigma_1 \\sigma_2}+\\frac{(y-\\mu_2)<sup>2}{\\sigma</sup>2_2}]} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#3-5","title":"3-5 \u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u51fd\u6570\u5206\u5e03","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#zxy","title":"Z=X+Y","text":"<p>\u53cc\u968f\u673a\u53d8\u91cf(X,Y) \u6709\u5bc6\u5ea6\u5206\u5e03\u51fd\u6570f(x,y)\uff0c\u5219Z\u4f5c\u4e3aX\u4e0eY\u7684\u51fd\u6570\uff0c\u6709 $$ F_Z(z)=P(Z\\le z)\\ =P(X+Y\\le z)\\ =\\iint_{x+y\\le z}f(x,y)dxdy\\ =\\int_{-\\infty}<sup>\\infty(\\int_{-\\infty}</sup>f(x,y)dx)dy\uff08\u4e8c\u91cd\u79ef\u5206\u5316\u4e3a\u7d2f\u6b21\u79ef\u5206\uff09\\ \u4ee4x=u-y\uff08\u6ce8\u610f\u4e0a\u4e0b\u9650\u53d8\u4e3au\u7684\u4e0a\u4e0b\u9650\uff09\\ ...=\\int_{-\\infty}<sup>\\infty(\\int_{-\\infty}</sup>f(u-y,y)du)dy\\ =\\int_{-\\infty}<sup>z(\\int_{-\\infty}</sup>f(u-y,y)dy)du\uff08\u53d8\u6362\u79ef\u5206\u987a\u5e8f\uff09\\ $$ \u5219 $$ f_Z(z)=F'Z(z)=\\int f(z-y,y)dy\\ =\\int_{-\\infty}^{\\infty} f(x,z-x)dx $$ \u5f53X\u3001Y\u72ec\u7acb\u65f6\uff0c\u6709}^{\\infty\u79bb\u6563\u5377\u79ef\u516c\u5f0f $$ f_Z(z)=\\int_{-\\infty}^{\\infty} f_X(z-y)f_Y(y)dy\\ =\\int_{-\\infty}^{\\infty} f_X(x)f_Y(z-x)dy\\ =f_Xf_Y $$ \u6b63\u6001\u5206\u5e03\u4e0b\u7684Z=X+Y*:</p> <p>XY\u72ec\u7acb\uff0c\u5206\u522b\u5177\u6709\u5206\u5e03 $$ X\\widetilde~N(\\mu_1,\\sigma_1<sup>2),Y\\widetilde~N(\\mu_2,\\sigma_2</sup>2)\\ $$ \u5219Z=X+Y\u6709\u5206\u5e03 $$ Z\\widetilde~(\\mu_1+\\mu_2,\\sigma_1<sup>2+\\sigma_2</sup>2) $$ \u6709\u9650\u4e2a\u72ec\u7acb\u6b63\u6001\u5206\u5e03\u53d8\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\u4ecd\u670d\u4ece\u6b63\u6001\u5206\u5e03</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#mmaxxy","title":"M=max(X,Y)","text":"<p>XY\u72ec\u7acb\u65f6\uff08\u6ce8\u610f\u8fd9\u91cc\u6c42\u51fa\u6765\u7684\u662f\u5206\u5e03\u800c\u975e\u5bc6\u5ea6\uff09 $$ F_M(z)=P(M\\le z)\\ =P(X\\le z,Y\\le z)\\ =P(X\\le z)P(Y\\le z)\\ =F_X(z)F_Y(z) $$ \u66f4\u4e00\u822c\u7684\u60c5\u51b5\uff1a $$ F_M(z)=F_{X_1}(z)F_{X_2}(z)\\dots F_{X_n}(z) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#nminxy","title":"N=min(X,Y)","text":"<p>XY\u72ec\u7acb\u65f6\uff08\u6ce8\u610f\u8fd9\u91cc\u6c42\u51fa\u6765\u7684\u662f\u5206\u5e03\u800c\u975e\u5bc6\u5ea6\uff09 $$ F_N(z)=P(N\\le z)=1-P(N&gt;z)\\ =1-P(X&gt;z,Y&gt;z)=1-P(X&gt;z)P(Y&gt;z)\\ =1-[1-F_X(z)][1-F_Y(z)] $$ \u66f4\u4e00\u822c\u7684\u60c5\u51b5\uff1a $$ F_N(z)=1-[1-F_{X_1}(z)][1-F_{X_2}(z)]\\dots[1-F_{X_n}(z)] $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#4-1-expected-value","title":"4-1 \u6570\u5b66\u671f\u671b\uff08Expected value\uff09","text":"<p>\u79bb\u6563\u578b\u6570\u5b66\u671f\u671b\uff1a\u8bbeX\u662f\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\uff0cP(X=x_k)=p_k\uff0c\u5219\uff08\u6536\u655b\u7684\u7ea7\u6570\uff09E(X)\u662f\u968f\u673a\u53d8\u91cfX\u7684\u6570\u5b66\u671f\u671b $$ E(X)=\\sum_{k=1}^\\infty x_kp_k\\ $$</p> <ul> <li>\u73c0\u677e\u5206\u5e03X~pi(lambda)\u7684E(X)=lambda</li> <li>\u4e8c\u9879\u5206\u5e03X~B(n,p)\u7684E(X)=lambda</li> </ul> <p>\u8fde\u7eed\u578b\u6570\u5b66\u671f\u671b\uff1aX\u662f\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff0cf(x)\u4e3a\u5176\u5bc6\u5ea6\u51fd\u6570\uff0c\u5219\uff08\u6536\u655b\u7684\u79ef\u5206\uff09E(X)\u662f\u968f\u673a\u53d8\u91cfX\u7684\u6570\u5b66\u671f\u671b $$ E(X)=\\int_{-\\infty}^{\\infty}xf(x)dx $$ \u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u6570\u5b66\u671f\u671b\uff1aY=g(X)\uff0c\u5219\uff08\u5c06\u6982\u7387\u7684\u4e58\u5b50\u6539\u4e3a\u51fd\u6570\u6620\u5c04\u540e\u7684\u7ed3\u679c\u5373\u53ef\uff09 $$ E(Y)=E[g(X)]=\\sum_{k=1}^\\infty g(x_k)p_k\\ =\\int_{-\\infty}^\\infty g(x)f(x)dx $$ \u4e24\u4e2a\uff08\u4ee5\u4e0a\uff09\u968f\u673a\u53d8\u91cf\u7684\u51fd\u6570\u7684\u6570\u5b66\u671f\u671b\uff1aZ=g(X,Y) $$ E(Z)=E[g(X,Y)]=\\sum_{i=1}\\sum_{j=1} g(x_i,y_j)p_{ij}\\ \\int_{-\\infty}<sup>{\\infty}\\int_{-\\infty}</sup>g(x,y)f(x,y)dxdy $$ \u6027\u8d28\uff1a</p> <ul> <li>\u5e38\u6570\u7684\u6570\u5b66\u671f\u671b\u4e3a\u5176\u672c\u8eab\uff1aC:f(x)=c,\u5219E(C)=C</li> <li>\u6570\u5b66\u671f\u671b\u7684\u7ebf\u6027\u7ec4\u54081\uff1aE(kX)=kE(X)</li> <li>\u6570\u5b66\u671f\u671b\u7684\u7ebf\u6027\u7ec4\u54082\uff1aE(X+Y)=E(X)+E(Y)</li> <li>\u72ec\u7acb\u53d8\u91cf\u7684\u79ef\u6027\uff1aE(XY)=E(X)E(Y) \uff08\u5145\u5206\u6761\u4ef6\u662fX\u3001Y\u72ec\u7acb\uff0c\u4f46\u4e0d\u662f\u5fc5\u8981\u6761\u4ef6\uff08\u4e5f\u5c31\u662f\u8bf4\u63a8\u4e0d\u51faX\u3001Y\u72ec\u7acb\uff09\uff09</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#4-2-variance","title":"4-2 \u65b9\u5dee\uff08Variance\uff09","text":"\\[ D(X)=E([X-E(X)]^2)\\\\ D(X)=\\begin{cases} \\sum_{k=1}^{\\infty}[x_k-E(x)]^2p_k\\\\ \\int_{-\\infty}^\\infty[x-E(x)]^2f(x)dx \\end{cases} \\] <p>\u7b80\u5316\u516c\u5f0f\uff08\u6839\u636e\u5b9a\u4e49\uff0c\u5229\u7528\u671f\u671b\u6027\u8d28\u62c6\u5206\u5316\u7b80\u5f97\u5230\uff09 $$ D(X)=E(X<sup>2)-[E(X)]</sup>2 $$ \u6027\u8d28\uff1a</p> <ul> <li> <p>\u5e38\u6570\u7684\u65b9\u5dee\u4e3a0\uff1aD(C)=0</p> </li> <li> <p>\u5e38\u6570\u548c\u968f\u673a\u53d8\u91cf\u4e4b\u548c\u7684\u65b9\u5dee\u4e0d\u53d8\uff1aD(X+C)=D(X)</p> </li> <li> <p>\u5e38\u6570\u548c\u968f\u673a\u53d8\u91cf\u4e4b\u79ef\u7684\u65b9\u5dee\uff0c\u7b49\u4e8e\u5e38\u6570\u5e73\u65b9\u4e58\u4ee5\u8be5\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\uff1a   $$   D(CX)=C^2D(X)\\   $$</p> </li> <li> <p>\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u548c\u7684\u65b9\u5dee\uff0c\u7b49\u4e8e\u5404\u81ea\u65b9\u5dee\u548c\u52a0\u4e0a2\u500d\u534f\u65b9\u5dee   $$   D(X+Y)=D(X)+D(Y)+2E{(X-E(X))(Y-E(Y))}\\   =D(X)+D(Y)+2Cov(X,Y)\\   X\u548cY\u72ec\u7acb\uff1aD(X+Y)=D(X)+D(Y)   $$</p> </li> </ul> \\[ \\begin{array}{l|l|l} \u5206\u5e03X &amp; \u671f\u671bE &amp; \u65b9\u5deeD\\\\ \\hline 0-1\u5206\u5e03 &amp; p &amp; p(1-p)\\\\ \u4e8c\u9879\u5206\u5e03~b(n,p) &amp; np &amp; np(1-p)\\\\ \u5747\u5300\u5206\u5e03~U(a,b) &amp; \\frac{a+b}{2} &amp; \\frac{(b-a)^2}{12}\\\\ \u6307\u6570\u5206\u5e03~(\\theta) &amp; \\theta &amp; \\theta^2\\\\ \u6cca\u677e\u5206\u5e03~\\pi(\\lambda) &amp; \\lambda &amp; \\lambda \\\\ \u6b63\u6001\u5206\u5e03~N(\\mu,\\sigma^2) &amp; \\mu &amp; \\sigma^2 \\end{array} \\] <p>\u6b63\u6001\u5206\u5e03\u7684\u7ebf\u6027\u7ec4\u5408\uff1a</p> <p>\u4e92\u76f8\u72ec\u7acb\u7684\u670d\u4ece\u6b63\u6001\u5206\u5e03\u7684\u53d8\u91cf $$ X_i\\widetilde~N(\\mu_i,\\sigma_i^2) $$ \u7684\u7ebf\u6027\u7ec4\u5408\u4e5f\u670d\u4ece\u6b63\u6001\u5206\u5e03 $$ C_1X_1+\\dots+C_nX_n\\widetilde~N(\\sum_{i=1}^n C_i\\mu_i,\\sum_{i=1}^n C_i<sup>2\\sigma_i</sup>2) $$ \u5207\u6bd4\u96ea\u592b\u4e0d\u7b49\u5f0f\uff1a</p> <p>\u4f30\u8ba1\u843d\u5728\u533a\u57df\u5916\u7684\u6982\u7387\u4e0a\u754c</p> <p>E(X)=mu, D(X)=sigma $$ P{|X-\\mu|\\ge\\epsilon}\\le\\frac{\\sigma<sup>2}{\\epsilon</sup>2}\\ P{|X-\\mu|\\le\\epsilon}\\ge1-\\frac{\\sigma<sup>2}{\\epsilon</sup>2}\\ $$</p> <ul> <li>sigma\u8d8a\u5c0f\uff0c\u843d\u5728\u533a\u95f4\u5185\u7684\u6982\u7387\u8d8a\u5927\uff0c\u96c6\u4e2d\u5728\u671f\u671b\u503c\uff08\u5e73\u5747\u6570\uff09\u9644\u8fd1\u7684\u53ef\u80fd\u6027\u8d8a\u5927</li> <li>3sigma\u539f\u5219\uff1a\u5bf9\u4e8e\u4efb\u610f\u7684\u5206\u5e03\uff0cX\u53d6\u503c\u8d85\u8fc73sigma\u7684\u6982\u7387\u5c0f\u4e8e0.111 (1/9)</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#4-3-covariance","title":"4-3 \u534f\u65b9\u5dee\uff08Covariance\uff09","text":"<p>\u4e24\u4e2a\u53d8\u91cf\u7684\u603b\u4f53\u7684\u8bef\u5dee\uff1b\u4e24\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u8d8b\u52bf\u4e00\u81f4\u4e3a\u6b63\uff0c\u76f8\u53cd\u4e3a\u8d1f $$ Cov(X,Y)=E{[X-E(X)][Y-E(Y)]} $$ \u7b80\u6613\u516c\u5f0f\uff1a $$ Cov(X,Y)=E(XY)-E(X)E(Y) $$ \u6027\u8d28\uff1a</p> <ul> <li> <p>\u968f\u673a\u53d8\u91cf\u76f8\u4e92\u72ec\u7acb\uff0c\u5219\u534f\u65b9\u5dee\u4e3a0\uff1aX\uff0cY\u72ec\u7acb\u65f6\uff0cCov(X,Y)=0</p> </li> <li> <p>\u4ea4\u6362\u5f8b\uff1aCov(X,Y)=Cov(Y,X)</p> </li> <li> <p>\u7ebf\u6027\u6027\u8d28\uff08\u6570\u4e58\uff09\uff1aCove(aX,bY)=ab Cov(X,Y)</p> </li> <li> <p>\u7ebf\u6027\u6027\u8d28\uff08\u53e0\u52a0\uff09Cov(X1+X2,Y)=Cov(X1,Y) + Cove(X2,Y)</p> </li> <li> <p>\u81ea\u5df1\u548c\u81ea\u5df1\u7684\u534f\u65b9\u5dee\u7b49\u4e8e\u81ea\u5df1\u7684\u65b9\u5dee\uff1a   $$   Cov(X,X)=E(X<sup>2)-E(X)</sup>2=D(X)   $$</p> </li> </ul> <p>\u4e0e\u534f\u65b9\u5dee\u7684\u5173\u7cfb\uff1a $$ D(X+Y)=D(X)+D(Y)+2Cov(X,Y) $$ \uff08\u7ebf\u6027\uff09\u76f8\u5173\u7cfb\u6570\uff1a\u8861\u91cf\u53d8\u91cfX\u3001Y\u7684\u7ebf\u6027\u76f8\u5173\u7a0b\u5ea6\uff1b\u7edd\u5bf9\u503c\u8d8a\u63a5\u8fd11\uff0c\u7ebf\u6027\u76f8\u5173\u7a0b\u5ea6\u8d8a\u9ad8 $$ \\rho_{XY}=\\frac{Cov(X,Y)}{\\sqrt{D(X)D(Y)}} $$ \u6027\u8d28\uff1a</p> <ul> <li> \\[   |\\rho|\\le1   \\] </li> <li> <p>\uff08\u4ec5\u5145\u5206\u6761\u4ef6\uff09X\u3001Y\u72ec\u7acb\uff0c\u5219\u5b83\u4eec\u7684\u76f8\u5173\u7cfb\u6570\u4e00\u5b9a\u4e3a0   $$   X\u3001Y\u72ec\u7acb\\Rightarrow\\rho=0   $$   \uff08\u53cd\u4e4b\u4e0d\u6210\u7acb\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1aX~U(-0.5,0.5),Y=cosX\uff09</p> </li> <li> <p>\u53d6\u5f97\u6027\u8d281\u7b49\u53f7\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662fY\u4e0eX\u4ee5100%\u6982\u7387\u7ebf\u6027\u76f8\u5173   $$   |\\rho|=1\\Leftrightarrow \\exist a,b(b\\ne0)\uff0cP(Y=a+bX)=1   $$</p> </li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#4-4-moment","title":"4-4 \u77e9\uff08moment\uff09\u3001\u534f\u65b9\u5dee\u77e9\u9635","text":"<p>\uff08k\u9636\uff09\u539f\u70b9\u77e9\uff1a(k&gt;=1) $$ E(X^k) $$ \uff08k\u9636\uff09\u4e2d\u5fc3\u77e9\uff1a(k&gt;=1) $$ E{[X-E(X)]^k} $$ \uff08k+l\u9636\uff09\u6df7\u5408\u77e9\uff1a(k,l&gt;=1) $$ E(X<sup>kY</sup>l) $$ \uff08k+l\u9636\uff09\u6df7\u5408\u4e2d\u5fc3\u77e9\uff1a(k,l&gt;=1) $$ E([X-E(X)]<sup>k[Y-E(Y)]</sup>l) $$ \u534f\u65b9\u5dee\u77e9\u9635\uff1a $$ \\begin{bmatrix} c_{11} &amp; c_{12}\\ c_{21} &amp; c_{22} \\end{bmatrix}\\ \\text{where}\\ c_{11}=E{[X_1-E(X_1)]^2}\\ c_{12}=E{[X_1-E(X_1)][X_2-E(X_2)]}\\ c_{21}=E{[X_2-E(X_2)][X_1-E(X_1)]}\\ c_{22}=E{[X_2-E(X_2)]^2}\\ $$ \u4e00\u822c\u5f62\u5f0f $$ \\begin{bmatrix} c_{11} &amp; \\cdots &amp; c_{1n}\\ \\vdots &amp; \\ddots &amp; \\vdots\\ c_{n1} &amp; \\cdots &amp; c_{nn}\\ \\end{bmatrix}\\ \\text{where}\\ c_{ij}=E{[X_i-E(X_i)][X_j-E(X_j)]}\\ $$ n\u7ef4\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\uff1a $$ X^T=[X_1,\\dots,X_n]\\ f(x1,\\dots,x_n)=\\frac{\\exp{ -\\frac12(X-\\mu)<sup>TC</sup> $$ }(X-\\mu) }}{(2\\pi)^\\frac n2|C|^\\frac 12\u6027\u8d28\uff1a</p> <ul> <li>X=(X1,...Xn) \u670d\u4ecen\u5143\u6b63\u6001\u5206\u5e03\uff0c\u5219\u5b83\u4eec\u7684\u7ebf\u6027\u7ec4\u5408\uff08\u4e0d\u4e3a\u96f6\u7684\uff09\u4e5f\u670d\u4ece\u6b63\u6001\u5206\u5e03</li> </ul> \\[ a_1X_1+a_2X_2+\\dots a_nX_n\\widetilde~N \\] <ul> <li> <p>\u7ebf\u6027\u53d8\u6362\u4e0d\u53d8\u6027\uff1aX1,...,Xn\u670d\u4ecen\u5143\u6b63\u6001\u5206\u5e03\uff0c\u5219Xi\u7684\u6240\u6709\u7ebf\u6027\u51fd\u6570Yi\u4e5f\u670d\u4ecen\u5143\u6b63\u6001\u5206\u5e03</p> </li> <li> <p>X1,...,Xn\u670d\u4ecen\u5143\u6b63\u6001\u5206\u5e03\uff0c\u5219X1,...,Xn\u76f8\u4e92\u72ec\u7acb\u7b49\u4ef7\u4e8eX1,...,Xn\u4e24\u4e24\u4e0d\u76f8\u5173</p> </li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#5-1","title":"5-1 \u5927\u6570\u5b9a\u5f8b","text":"<p>\u5207\u6bd4\u96ea\u592b\u5927\u6570\u5b9a\u5f8b\uff1a\uff08\u5207\u6bd4\u96ea\u592b\u5b9a\u5f8b\u7684\u7279\u6b8a\u60c5\u51b5\uff09</p> <p>\u8bbe\u968f\u673a\u53d8\u91cfX1\uff0cX2\uff0c...\uff0cXn\u76f8\u4e92\u72ec\u7acb\uff0c\u4e14\u5177\u6709\u76f8\u540c\u7684\u6570\u5b66\u671f\u671bmu\u548c\u65b9\u5deesigma^2\uff0c\u5219\u524dn\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u7b97\u6570\u5e73\u5747\u6570\uff08\u9891\u7387\uff09\uff08X\u62d4\uff09\u5bf9\u4e8e\u4efb\u610f\u7684epsilon&gt;0\u6709 $$ E(X_k)=\\mu,D(X_k)=\\sigma^2,\\overline X=\\frac1n\\sum_{i=1}^nX_i\\ \\lim_{n\\to\\infty}P(|\\overline X-\\mu|\\lt\\epsilon)\\ =\\lim_{n\\to\\infty} P(|\\frac1n\\sum_{i=1}^nX_i-\\mu|\\lt\\epsilon)=1~(\\forall\\epsilon\\gt0) $$ \u524dn\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u5e73\u5747\u5024\u4e0e\u671f\u671b\u503c\u7684\u504f\u5dee\u5c0f\u4e8e\u67d0\u4e00\u7279\u5b9a\uff08\u6b63\uff09\u6570\u503c\u7684\u6982\u7387\u8d8b\u8fd1\u4e8e1</p> <p>\u4f9d\u6982\u7387\u6536\u655b\uff1aY1\u3001...\u3001Yn\u662f\u968f\u673a\u53d8\u91cf\u5e8f\u5217\uff0ca\u4e3a\u5e38\u6570\uff0c\u5bf9\u4e8e\u4efb\u610f\u5e38\u6570epsilon\u6709\u4e0b\u5f0f\uff0c\u5219\u79f0\u8fd9\u4e2a\u5e8f\u5217\u4f9d\u6982\u7387\u6536\u655b\u4e8ea $$ \\overline Y_n=\\frac1n\\sum_{i=1}^nY_i\\ \\lim_{n\\to\\infty}P(|\\overline Y_n-a|\\lt\\epsilon)=1~(\\forall\\epsilon\\gt0)\\\\Downarrow\\ Y_n\\to^{P}a $$ \u524dn\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u5e73\u5747\u5024\u4e0e\u67d0\u5e38\u6570\u7684\u504f\u5dee\u5c0f\u4e8e\u67d0\u4e00\u7279\u5b9a\uff08\u6b63\uff09\u6570\u503c\u7684\u6982\u7387\u8d8b\u8fd1\u4e8e1</p> <p>\u6027\u8d28\uff1a</p> <p>\u8bbeXn\u6536\u655b\u4e8ea\uff0cYn\u6536\u655b\u4e8eb\uff0cg(x,y)\u5728\u70b9(a,b)\u8fde\u7eed\uff0c\u5219g(Xn,Yn)\u6536\u655b\u4e8eg(a,b)</p> <p>\u8f9b\u94a6\u5927\u6570\u5b9a\u7406\uff08\u5f31\u5927\u6570\u5b9a\u7406\uff09\uff1a</p> <p>\u8bbe\u968f\u673a\u53d8\u91cfX1\uff0cX2\uff0c...\uff0cXn\u76f8\u4e92\u72ec\u7acb\uff0c\u4e14\u5177\u6709\u76f8\u540c\u7684\u6570\u5b66\u671f\u671bmu\uff0c\u5219\u524dn\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u7b97\u6570\u5e73\u5747\u6570\uff08\u9891\u7387\uff09\uff08X\u62d4\uff09\u4f9d\u6982\u7387\u6536\u655b\u4e8emu $$ \\overline X\\to^{P} \\mu \\ \\lim_{n\\to\\infty}P(|\\frac1n\\sum_{i=1}^nX_i-\\mu|\\lt\\epsilon)=1~(\\forall\\epsilon\\gt0) $$ - \u8bc1\u660e\uff1a\u5207\u6bd4\u96ea\u592b\u4e0d\u7b49\u5f0f</p> <p>\u4f2f\u52aa\u5229\u5927\u6570\u5b9a\u7406\uff1a</p> <p>nA\u662fn\u6b21\u72ec\u7acb\u91cd\u590d\u8bd5\u9a8c\u4e2d\u4e8b\u4ef6A\u7684\u53d1\u751f\u6b21\u6570\uff0cp\u662f\u4e8b\u4ef6A\u5728\u6bcf\u6b21\u8bd5\u9a8c\u4e2d\u53d1\u751f\u7684\u6982\u7387\uff08nA~b(n,p)\uff09\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u6574\u6570epsilon&gt;0\uff0c\u6709 $$ \\lim_{n\\to\\infty}P(|\\frac{n_A}{n}-p|\\lt\\epsilon)=1\\ \\lim_{n\\to\\infty}P(|\\frac{n_A}{n}-p|\\ge\\epsilon)=0 \\(\\forall\\epsilon\\gt0) $$ \u201c\u9891\u7387\u8d8b\u8fd1\u4e8e\u4e8b\u4ef6\u6982\u7387\u201d\u7684\u6982\u7387\u8d8b\u8fd1\u4e8e1</p> <ul> <li> <p>\u4e8b\u4ef6\u53d1\u751f\u7684\u9891\u7387\u53ef\u4ee5\u4ee3\u66ff\u4e8b\u4ef6\u6982\u7387</p> </li> <li> \\[   X\\sim b(n,p)\\Rightarrow \\overline X\\sim N(np,p(1-p))   \\] </li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#5-2","title":"5-2 \u4e2d\u5fc3\u6781\u9650\u5b9a\u7406","text":"<p>\u72ec\u7acb\u540c\u5206\u5e03\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\uff1aX1...Xn\u76f8\u4e92\u72ec\u7acb\uff0c\u670d\u4ece\u540c\u4e00\u5206\u5e03\uff0c\u800c\u4e14\u5177\u6709\uff08\u76f8\u540c\u7684\uff09\u6570\u5b66\u671f\u671bE(Xi)=mu\u4e0e\u65b9\u5deeD(Xi)=sigma^2\uff0c\u5219\u968f\u673a\u53d8\u91cf\u4e4b\u548c\u7684\u6807\u51c6\u5316\u53d8\u91cf $$ Y_n=\\frac{\\sum_{k=1}^nX_k-n\\mu}{\\sqrt n\\sigma} $$</p> <p>\u7684\u5206\u5e03\u51fd\u6570Fn(x)\u5bf9\u4e8e\u4efb\u610fx\u6ee1\u8db3 $$ \\lim_{n\\to\\infty}F_n(x)=\\lim_{n\\to\\infty}P{\\frac{\\sum_{k=1}^nX_k-n\\mu}{\\sqrt n\\sigma}\\le x}=\\Phi(x) $$ \u4e5f\u5c31\u662f\u8bf4\uff0cn\u5145\u5206\u5927\u65f6\uff1a</p> <ul> <li> \\[   \\sum_{k=1}^nX_k\\sim N(n\\mu,n\\sigma^2)   \\] </li> <li> \\[   Y_n=\\frac{\\sum_{k=1}^nX_k-n\\mu}{\\sqrt n\\sigma}\\sim N(0,1)   \\] </li> <li> \\[   \\overline X=\\frac1n\\sum_{k=1}^nX_k\\sim N(\\mu,\\frac{\\sigma^2}n)   \\] </li> <li> \\[   \\frac{\\overline X-\\mu}{\\frac\\sigma{\\sqrt n}}\\sim N(0,1)   \\] </li> </ul> <p>\u674e\u96c5\u666e\u8bfa\u592b(Liapounov)\u5b9a\u7406\uff08\u975e\u72ec\u7acb\u540c\u5206\u5e03\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\uff09\uff1a</p> <p>X1...Xn\u76f8\u4e92\u72ec\u7acb\uff0c\u800c\u4e14\u5177\u6709\u6570\u5b66\u671f\u671b\u4e0e\u65b9\u5dee $$ E(X_i)=\\mu_i,D(X_i)=\\sigma_i^2 $$ \u4ee4\u6240\u6709\u53d8\u91cf\u7684\u65b9\u5dee\u548c\u4e3aBn^2 $$ B_n<sup>2=\\sum_{i=1}</sup>n\\sigma_i^2 $$ \u5982\u679c\u5b58\u5728\u6b63\u6570 $$ \\frac1{B_n<sup>{2+\\delta}}\\sum_{i=1}</sup>nE(|X_i-\\mu_i|^{2+\\delta})\\to0 $$ \u5219\u968f\u673a\u53d8\u91cf\u4e4b\u548c\u7684\u6807\u51c6\u5316\u53d8\u91cf $$ Z_n=\\frac{\\sum_{i=1}<sup>nX_i-E(\\sum_{i=1}</sup>nX_i)}{\\sqrt{D(\\sum_{i=1}<sup>nX_i)}}=\\frac{\\sum_{i=1}</sup>nX_i-\\sum_{i=1}^n\\mu_i}{B_n} $$ \u7684\u5206\u5e03\u51fd\u6570Fn(x)\u5bf9\u4efb\u610fx\u6ee1\u8db3 $$ \\lim_{n\\to\\infty}F_n(x)=\\lim_{n\\to\\infty}P{Z_n\\le x}=\\lim_{n\\to\\infty}P{\\frac{\\sum_{i=1}<sup>nX_i-\\sum_{i=1}</sup>n\\mu_i}{B_n}\\le x}=\\Phi(x) $$ \u8fd9\u5c31\u662f\u8bf4\uff0cn\u5145\u5206\u5927\u65f6\uff1a</p> <ul> <li> \\[   \\sum_{i=1}^nX_i\\sim N(\\sum_{i=1}^n\\mu_i,\\sum_{i=1}^n\\sigma_i^2)=N(\\sum_{i=1}^n\\mu_i,B_n^2)   \\] </li> <li> \\[   Z_n=\\frac{\\sum_{i=1}^nX_i-E(\\sum_{i=1}^nX_i)}{\\sqrt{D(\\sum_{i=1}^nX_i)}}=\\frac{\\sum_{i=1}^nX_i-\\sum_{i=1}^n\\mu_i}{B_n}\\sim N(0,1)   \\] </li> </ul> <p>\u68e3\u83ab\u4f5b\u62c9\u666e\u62c9\u65af\u5b9a\u7406\uff08\u4e8c\u9879\u5206\u5e03\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\uff09\uff1a</p> <p>\u968f\u673a\u53d8\u91cfeta1...etan\u670d\u4ece\u540c\u4e00\u4e8c\u9879\u5206\u5e03B(n,p)\uff0c\u5219\u5bf9\u4efb\u610fx\u6709 $$ \\lim_{n\\to\\infty}P{\\frac{\\eta_n-np}{\\sqrt{np(1-p)}}\\le x}=\\Phi(x) $$ \u8fd9\u5c31\u662f\u8bf4\uff0cn\u5145\u5206\u5927\u65f6\uff0c $$ \\eta_n\\sim N(np,np(1-p)) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#6-1","title":"6-1 \u968f\u673a\u6837\u672c","text":"<p>\u603b\u4f53\uff1a\u7814\u7a76\u5bf9\u8c61\u7684\u5168\u4f53</p> <p>\u4e2a\u4f53\uff1a\u603b\u4f53\u4e2d\u7684\u6bcf\u4e2a\u6210\u5458</p> <p>\u5bb9\u91cf\uff1a\u603b\u4f53\u4e2d\u5305\u542b\u7684\u4e2a\u4f53\u4e2a\u6570</p> <p>\u62bd\u6837\u3001\u6837\u672c\uff1a\u62bd\u53d6\uff08\u62bd\u6837\uff09\u5176\u4e2d\u90e8\u5206\u5f97\u5230\u7684\u7ed3\u679c\uff08\u6837\u672c\uff09\uff0c\u7531\u90e8\u5206\u63a8\u65ad\u6574\u4f53</p> <p>\u7b80\u5355\u968f\u673a\u62bd\u6837\uff1a</p> <ul> <li>\u4ee3\u8868\u6027\uff1aX1....Xn\u4e2d\u6bcf\u4e00\u4e2a\u6837\u672c\u4e0e\u8003\u5bdf\u7684\u603b\u4f53\u6709\u76f8\u540c\u5206\u5e03</li> <li>\u72ec\u7acb\u6027\uff1aX1....Xn\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf\uff08\u7b80\u5355\u968f\u673a\u6837\u672c\uff09</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#6-2","title":"6-2 \u6837\u672c\u548c\u62bd\u6837\u5206\u5e03","text":"<p>\u7edf\u8ba1\u91cf\uff1a\uff08\u5bf9\u6837\u672c\u8fdb\u884c\u52a0\u5de5\uff09\u4e0d\u542b\u4efb\u4f55\u672a\u77e5\u53c2\u6570\u7684\u6837\u672c\u7684\u51fd\u6570\u79f0\u4e3a\u7edf\u8ba1\u91cf $$ g(X_1,\\dots,X_n) $$</p> <p>x1...xn\u662fX1...Xn\u7684\u89c2\u5bdf\u503c</p> <p>g(x1,...xn)\u662fg(X1,...Xn)\u7684\u89c2\u5bdf\u503c</p> <p>\u6837\u672c\u5747\u503c\u3001\u6837\u672c\u65b9\u5dee\u3001\u6837\u672c\u6807\u51c6\u5dee\uff1a $$ \\overline X=\\frac1n\\sum_{i=1}^nX_i\\ S<sup>2=\\frac1{n-1}\\sum_{i=1}</sup>n(X_i-\\overline X)<sup>2=\\frac1{n-1}(\\sum_{i=1}</sup>nX_i^2-n\\overline X^2)\\ S=\\sqrt{\\frac1{n-1}(\\sum_{i=1}<sup>nX_i</sup>2-n\\overline X^2)} $$ \u6837\u672c\u7684k\u9636\u539f\u70b9\u77e9\u3001k\u9636\u4e2d\u5fc3\u77e9\uff1a $$ A_k=\\frac1n\\sum_{i=1}<sup>nX_i</sup>k\\ B_k=\\frac1n\\sum_{i=1}^n(X_i-\\overline X)^k\\ $$ \u603b\u4f53X\u7684k\u9636\u77e9\u5b58\u5728E(X<sup>k)=mu</sup>k\uff0c\u5219\u5f53n\u2192\u221e\u65f6 $$ A_k=\\frac1n\\sum_{i=1}<sup>nX_i</sup>k\\to<sup>P\\mu</sup>k~(k=1,2,\\dots)\\ g(A_n,\\dots,A_k)\\to<sup>Pg(\\mu</sup>1,\\dots,\\mu^k) $$ \u7ecf\u9a8c\u5206\u5e03\u51fd\u6570\uff1a</p> <p>X1\uff0c...\uff0cXn\u662f\u603b\u4f53F\u7684\u4e00\u4e2a\u6837\u672c\uff0cs(x)\u8868\u793a\u8fd9\u4e9b\u6837\u672c\u4e2d\u4e0d\u5927\u4e8ex\u7684\u968f\u673a\u53d8\u91cf\u4e2a\u6570 $$ F_n(x)=\\frac1ns(x),-\\infty&lt;x&lt;\\infty\\ =\\begin{cases} 0,x&lt;x(1)\\ \\frac kn,x(k)\\le x&lt;x(k+1)\\ 1,x\\ge x(n) \\end{cases},(\u5e8f\u5217x(i)\u4ece\u5c0f\u81f3\u5927\u6392\u5e8f) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#chi-square-distribution","title":"\u5361\u65b9\u5206\u5e03\uff08chi-square distribution\uff09","text":"<p>X1,...Xn\u76f8\u4e92\u72ec\u7acb\uff0c\u90fd\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03N(0,1)\uff0c\u5219\u79f0\u968f\u673a\u53d8\u91cf $$ \\chi<sup>2=X_1</sup>2+\\dots+X_n^2 $$ \u670d\u4ece\u81ea\u7531\u5ea6\u4e3an\u7684\u5361\u65b9\u5206\u5e03 $$ \\chi^2\\sim \\chi^2(n)\\ f(x;n)=\\begin{cases} \\frac{1}{2<sup>{n/2}\\Gamma(n/2)}x</sup>,x\\ge0\\ 0,x&lt;0 \\end{cases}\\ \\Gamma(x)=\\int_0^\\infty e}e^{-\\frac x2<sup>{-t}t</sup>dt,x&gt;0~(=(x-1)!)\\ \\Gamma(s,x)=\\int_x^\\infty e<sup>{-t}t</sup>dt $$ \u7279\u522b\u5730\uff1a $$ \\chi^2(1) \\Leftrightarrow \\Gamma(\\frac12,2)\uff08\u4f3d\u9a6c\u5206\u5e03\uff09\\ \\Gamma(\\alpha,\\beta),f(x)=\\frac{x<sup>{\\alpha-1}\\lambda</sup>\\alpha e^{-\\lambda x}}{\\Gamma(\\alpha)} $$ \u6027\u8d28\uff1a</p> <ol> <li>\u5f52\u4e00\u5316\u516c\u5f0f</li> </ol> \\[ X_1,\\dots,X_n\\sim N(\\mu,\\sigma^2)\\Rightarrow\\\\ \\chi^2=\\frac1{\\sigma^2}\\sum_{i=1}^n(X_i-\\mu)^2\\sim \\chi^2(n) \\] <ol> <li>\u53ef\u52a0\u6027</li> </ol> \\[ X_1\\sim \\chi^2(n_1),X_2\\sim \\chi^2(n_2)\\Rightarrow\\\\ X_1+X_2\\sim \\chi^2(n_1+n_2) \\] <ol> <li>\u4e2d\u5fc3\u6781\u9650</li> </ol> \\[ \\chi^2\\sim \\chi^2(n),n\u5145\u5206\u5927\u65f6\u6709\\frac{X-n}{\\sqrt{2n}}\\sim N(0,1) \\] <ol> <li>\u671f\u671b\u548c\u65b9\u5dee</li> </ol> \\[ E(X)=n,D(X)=2n \\] <ol> <li>\u5361\u65b9\u5206\u5e03\u7684\u5206\u4f4d\u70b9\uff1a\u7ed9\u5b9aalpha\u2208(0\uff0c1)\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9chi^2_alpha(n)\uff0c</li> </ol> \\[ P(\\chi^2&gt;\\chi^2_\\alpha(n))=\\int_{\\chi^2_\\alpha(n)}^{\\infty}f(y)dy=\\alpha\\\\ \\chi^2_{0.1}(25)=34.382\\\\ (x&gt;34.382\u65f6\uff0cP\\{x&gt;34.382\\}=0.1) \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#t","title":"t \u5206\u5e03\uff08\u5b66\u751f\u6c0f\u5206\u5e03\uff09","text":"<p>\u8bbeX<sub>N(0,1)\uff0cY</sub>chi^2(n)\uff0cX\u3001Y\u76f8\u4e92\u72ec\u7acb\uff0c\u5219t $$ t=\\frac{X}{\\sqrt{\\frac Yn}} $$ \u670d\u4ece\u81ea\u7531\u5ea6\u4e3an\u7684t\u5206\u5e03\uff0c\u8bb0\u4e3at~t(n)\uff0c $$ f(t)=\\frac{\\Gamma(\\frac{n+1}2)}{\\Gamma(\\frac n2)\\sqrt{n\\pi}}(1+\\frac{t<sup>2}{n})</sup>~(-\\infty&lt;t&lt;\\infty) $$ }{2}\u6027\u8d28\uff1a</p> <ol> <li>\u6570\u5b66\u671f\u671b\u548c\u65b9\u5dee\uff1a</li> </ol> \\[ E(t)=0,D(t)=\\frac n{n-2} \\] <ol> <li>\u4e2d\u5fc3\u6781\u9650\uff1at\u5206\u5e03\u5bc6\u5ea6\u51fd\u6570\u5173\u4e8et=0\u5bf9\u79f0\uff0cn\u5145\u5206\u5927\u65f6\uff0c</li> </ol> \\[ \\lim_{n\\to\\infty}f(t)=\\frac1{\\sqrt{2\\pi}}e^{-\\frac{t^2}2}\\\\ t\\sim N(0,1) \\] <ol> <li>\u5206\u4f4d\u70b9\uff1a\u7ed9\u5b9aalpha\u2208(0\uff0c1)\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9t_alpha(n)\uff0c</li> </ol> \\[ P(t&gt;t_\\alpha(n))=\\int_{t_\\alpha(n)}^\\infty f(t)dt=\\alpha\\\\ t_{0.025}(15)=2.1315\\\\ (x&gt;2.1315\uff0cP(x&gt;2.1315)=0.025) \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#f","title":"F\u5206\u5e03","text":"<p>U~chi^2(n1), V~chi^2(n2)\uff0cU\uff0cV\u72ec\u7acb\uff0c\u5219F $$ F=\\frac{U/n_1}{V/n_2} $$ \u670d\u4ece\u81ea\u7531\u5ea6\u4e3an1\uff08\u7b2c\u4e00\u81ea\u7531\u5ea6\uff09\u548cn2\uff08\u7b2c\u4e8c\u81ea\u7531\u5ea6\uff09\u7684F\u5206\u5e03 $$ F\\sim F(n_1,n_2)\\ \\frac1F=\\frac{V/n_2}{U/n_1}\\sim F(n_2,n_1)\\ $$ \u6982\u7387\u5bc6\u5ea6 $$ \\phi(y)=\\begin{cases} \\frac{\\Gamma(\\frac{n_1+n_2}{2})}{\\Gamma(\\frac {n_1}{2})\\Gamma(\\frac {n_2}{2})}(\\frac{n_1}{n_2})<sup>{\\frac{n_1}2}(y)</sup>,y&gt;0\\ 0,y\\le 0 \\end{cases} $$ }{2}-1}(1+\\frac{n_1}{n_2}y)^{-\\frac{n_1+n_2}{2}\u6027\u8d28\uff1a</p> <ol> <li>\u6570\u5b66\u671f\u671b\uff08\u6ca1\u6709\u7279\u522b\u7684\u5bf9\u79f0\u6027\uff09</li> </ol> \\[ E(F)=\\frac{n_2}{n_2-2},(n_2&gt;2) \\] <ol> <li>\u5206\u4f4d\u70b9\uff1a\u7ed9\u5b9aalpha\u2208(0\uff0c1)\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9F_alpha(n1,n2)\uff0c</li> </ol> \\[ P(F&gt;F_\\alpha(n_1,n_2))=\\int_{F_\\alpha(n_1,n_2)}^\\infty\\phi(y)dy=\\alpha\\\\ F_{1-\\alpha}(n_1,n_2)=\\frac1{F_\\alpha(n_2,n_1)}\\\\ F_{0.95}(12,9)=\\frac1{F_{0.05}(9,12)}=\\frac{1}{2.80}=0.357 \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_18","title":"\u62bd\u6837\u5206\u5e03\u5b9a\u7406","text":"<p>\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\uff1a\u603b\u4f53\uff08\u4e0d\u8bba\u670d\u4ece\u4f55\u79cd\u5206\u5e03\uff09\u7684\u5747\u503c\u548c\u65b9\u5dee\u5df2\u7ecf\u77e5\u9053\u3001\u77e5\u9053\u6837\u672c\u7684\u6570\u91cf\uff0c\u5219 $$ E(\\overline X)=\\mu\\ D(\\overline X)=\\frac{\\sigma^2}{n}\\ E(S<sup>2)=\\sigma</sup>2\\ (S<sup>2=\\frac1{n-1}(\\sum_{i=1}</sup>nX_i^2-n\\overline X^2) $$ \u6837\u672c\u5747\u503c\u5206\u5e03\uff08\u5b9a\u7406\u4e00\uff09\uff1a\uff08\u77e5\u9053\u6837\u672c\u7684\u4e2a\u6570\u548c\u5747\u503c\u3001\u603b\u4f53\u7684\u5747\u503c\u548c\u65b9\u5dee\uff09</p> <p>X1...Xn\u6765\u81ea\u6b63\u6001\u603b\u4f53N\uff08mu\uff0csigma^2\uff09\uff0c\u5219\u6837\u672c\u5747\u503c\u670d\u4ece\u6b63\u6001\u5206\u5e03 $$ \\overline X\\sim N(\\mu,\\frac{\\sigma^2}{n})\\ \\frac{\\overline X-\\mu}{\\frac\\sigma{\\sqrt{n}}}\\sim N(0,1) $$ \u6837\u672c\u65b9\u5dee\u5206\u5e03\uff08\u5b9a\u7406\u4e8c\uff09\uff1a\uff08\u77e5\u9053\u6837\u672c\u7684\u4e2a\u6570\u548c\u65b9\u5dee\u3001\u603b\u4f53\u7684\u65b9\u5dee\uff09</p> <p>X1...Xn\u662f\u6765\u81ea\u6b63\u6001\u603b\u4f53N(mu,sigma^2)\u7684\u6837\u672c\uff0c\u5219\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u6709\u4e0b\u5217\u6027\u8d28 $$ \\frac{(n-1)S<sup>2}{\\sigma</sup>2}\\sim \\chi^2(n-1)\\ \\overline X\u548cS^2\u72ec\u7acb $$ \u6837\u672c\u5747\u503c\u5206\u5e032\uff08\u5b9a\u7406\u4e09\uff09\uff1a\uff08\u77e5\u9053\u6837\u672c\u7684\u4e2a\u6570\u3001\u5747\u503c\u548c\u65b9\u5dee\u3001\u603b\u4f53\u7684\u5747\u503c\uff09</p> <p>X1...Xn\u662f\u6765\u81ea\u6b63\u6001\u603b\u4f53N(mu,sigma^2)\u7684\u6837\u672c\uff0c\u5219 $$ \\frac{\\overline X-\\mu}{S/\\sqrt n}\\sim t(n-1) $$</p> <p>\u6837\u672c\u5747\u503c\u5dee\u3001\u6837\u672c\u65b9\u5dee\u6bd4\u7684\u5206\u5e03\uff08\u5b9a\u7406\u56db\uff09\uff1a\uff08\u77e5\u9053\u4e24\u79cd\u6837\u672c\u7684\u4e2a\u6570\u548c\u65b9\u5dee\u3001\u4e24\u79cd\u5206\u5e03\u7684\u65b9\u5dee\uff09</p> <p>\u8bbeX~N(mu_1,sigma<sup>2_1),Y~N(mu_2,sigma</sup>2_2),\uff0cX\u3001Y\u76f8\u4e92\u72ec\u7acb\uff0cX1...Xn\u662f\u6765\u81eaX\u7684\u6837\u672c\uff0cY1...Yn\u662f\u6765\u81eaY\u7684\u6837\u672c\uff0c\uff0c\u5219\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u6ee1\u8db3\uff1a $$ \\frac{S_1<sup>2/S_2</sup>2}{\\sigma<sup>2_1/\\sigma</sup>2_2}\\sim F(n_1-1,n_2-1)\\ \\frac{(\\overline X-\\overline Y)-(\\mu_1-\\mu_2)}{S_w\\sqrt{\\frac1{n_1}+\\frac1{n_2}}}\\sim t(n_1+n_2-2),(\\sigma<sup>2_1=\\sigma</sup>2_2=\\sigma^2)\\ where~S_w<sup>2=\\frac{(n_1-1)S_1</sup>2+(n_2-1)S_2^2}{n_1+n_2-2} $$</p> <p>\uff08\u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53ea\u80fd\u5728\u4e24\u4e2a\u5206\u5e03\u7684\u65b9\u5dee\u76f8\u540c\u65f6\u4f7f\u7528\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#7-1","title":"7-1 \u70b9\u4f30\u8ba1\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_19","title":"\u77e9\u4f30\u8ba1\u6cd5","text":"<p>\u6837\u672ck\u9636\u77e9\u53ef\u4ee5\u4f30\u8ba1\u603b\u4f53k\u9636\u77e9 $$ \u6837\u672c\u77e9\uff1aA_k=\\frac 1n\\sum_{i=1}<sup>nX_i</sup>k\\ \u603b\u4f53\u77e9\uff1aE(X^k)=\\mu_k $$ \u8bbe\u5206\u5e03\u4e2d\u6709k\u4e2a\u53c2\u6570\u672a\u77e5\uff0c\u90a3\u4e48\u524dk\u9636\u77e9\u4e3amu1...mun\uff0c\u5219\u53ef\u4ee5\u6839\u636e\u82e5\u5e72\u4e2a\uff08\u4e00\u822c\u662fk\u4e2a\uff09\u77e9\u5173\u4e8e\u8fd9k\u4e2a\u53c2\u6570\u7684\u65b9\u7a0b\u6c42\u89e3\u51fa\u8fd9k\u4e2a\u53c2\u6570 $$ \\mu_i=\\mu_i(\\theta_1,...,\\theta_k)\\ \\Downarrow\\ \\theta_j=\\theta_j(\\mu_1,...,\\mu_k) $$ \u5176\u4e2d\u7684mu\u7528\u6837\u672c\u77e9\u6765\u4ee3\u66ff $$ \\mu_i:=A_i\\ \\hat\\theta=\\theta_j(A_1,...,A_k) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_20","title":"\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u6cd5","text":"<p>f(x1,...;theta)\u662f\u6837\u672c\u7684\u8054\u5408\u6982\u7387\u5bc6\u5ea6\uff0c\u5b9a\u4e49\u4f3c\u7136\u51fd\u6570\uff08\u5176\u4e2dx1...\u662f\u62bd\u6837\u89c2\u5bdf\u503c\uff09\uff1a $$ L(\\theta)=f(x_1,...,x_n;\\theta) $$ \u4ee4\u4f3c\u7136\u51fd\u6570\u6700\u5927\u7684\u53c2\u6570theta\u5373\u4e3a\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf $$ \\frac{d\\ln L(\\theta)}{d\\theta}=0 $$</p> <ul> <li>\u9002\u7528\u4e8e\u6837\u672c\u603b\u4f53\u5206\u5e03\u79bb\u6563\u4e14\u5df2\u7ecf\u77e5\u9053\u5206\u5e03\u5f8b\u7684\u60c5\u51b5</li> </ul> <p>\u5bf9\u4e8e\u6b63\u6001\u5206\u5e03\uff0c\u6700\u5927\u4f3c\u7136\u53c2\u6570\u4f30\u8ba1\uff1a $$ \\hat\\mu=\\overline x,\\hat\\sigma^2=\\frac 1n\\sum_{i=1}^n(X_i-\\overline X)^2 $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#7-2","title":"7-2 \u4f30\u8ba1\u91cf\u7684\u9009\u53d6\u6807\u51c6","text":"<p>\u65e0\u504f\u6027\uff1a</p> <p>\u8bbe $$ \\hat\\theta(X_1,...,X_n) $$ \u662f\u53c2\u6570theta\u7684\u4f30\u8ba1\u91cf\uff0c\u5982\u679c\u8fd9\u4e2a\u4f30\u8ba1\u91cf\u7684\u671f\u671b\u662f\u771f\u5b9e\u7684theta\uff08\u4e5f\u5373\u4f30\u8ba1\u91cf\u968f\u7740\u53c2\u6570\u53d8\u5316\u800c\u5728\u771f\u5b9e\u503c\u9644\u8fd1\u6446\u52a8\uff09 $$ E(\\hat\\theta)=\\theta $$ \u5219\u79f0\u5176\u662ftheta\u7684\u65e0\u504f\u4f30\u8ba1</p> <ul> <li>\u6ca1\u6709\u7cfb\u7edf\u504f\u5dee</li> </ul> <p>\u6709\u6548\u6027\uff1a</p> <p>\u8bbe $$ \\hat\\theta_1(X_1,...,X_n),\\hat\\theta_2(X_1,...,X_n) $$ \u5747\u662ftheta\u7684\u65e0\u504f\u4f30\u8ba1\uff0c\u5982\u679c\u5bf9\u4e8e\u4efb\u610f\u7684theta\u2208O\uff0c $$ D(\\hat\\theta_1)\\le D(\\hat\\theta_2) $$ \u4e14\u81f3\u5c11\u6709\u4e00\u4e2atheta\u80fd\u4f7f\u5f97\u4e0a\u5f0f\u4e2d\u7684\u4e0d\u7b49\u53f7\u6210\u7acb\uff0c\u5219<sup>theta1\u6bd4</sup>theta2\u6709\u6548</p> <p>\u76f8\u5408\u6027\uff1a</p> <p>\u8bbe $$ \\hat\\theta(X_1,...,X_n) $$ \u82e5\u5bf9\u4e8e\u4efb\u610ftheta\uff0cn\u2192\u221e\u65f6\uff0c^theta\u4f9d\u6982\u7387\u6536\u655b\u4e8etheta\uff0c\u5219\u79f0\u5176\u4e3atheta\u7684\u76f8\u5408\u4f30\u8ba1\u91cf</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#7-3","title":"7-3 \u533a\u95f4\u4f30\u8ba1","text":"<p>\u8bbetheta\u662f\u4e00\u4e2a\u5f85\u4f30\u8ba1\u53c2\u6570\uff0c\u7ed9\u5b9aalpha&gt;0\uff0c\u5982\u679c\u7531\u6837\u672cX1...Xn\u786e\u5b9a\u7684\u4e24\u4e2a\u7edf\u8ba1\u91cf\u4e3a $$ \\underline\\theta=\\underline\\theta(X_1,...,X_n)\\ \\overline\\theta=\\overline\\theta(X_1,...,X_n)\\(\\underline\\theta&lt;\\overline\\theta) $$ \u6ee1\u8db3 $$ P(\\underline\\theta&lt;\\theta&lt;\\overline\\theta)=1-\\alpha $$ \u5219\u8fd9\u4e2a\uff08\u7f6e\u4fe1\u4e0b\u9650\uff0c\u7f6e\u4fe1\u4e0a\u9650\uff09\u533a\u95f4\u4e3atheta\u7684\u7f6e\u4fe1\u5ea6/\u7f6e\u4fe1\u6c34\u5e73\u4e3a1-alpha\u7684\u7f6e\u4fe1\u533a\u95f4</p> <ul> <li>\u7cbe\u5ea6\u5c3d\u53ef\u80fd\u9ad8\uff08\u533a\u95f4\u957f\u5ea6\u5c3d\u53ef\u80fd\u77ed\uff09</li> <li>\u7f6e\u4fe1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08\u4e00\u822c\u4f18\u5148\u4fdd\u8bc1\uff09</li> </ul> <p>alpha\u5206\u4f4d\u70b9\uff1a</p> <p>\u6ee1\u8db3 $$ P(X&gt;x_\\alpha)=\\alpha\\ P(X\\le x_\\alpha)=1-\\alpha\\ $$ \u7684\u70b9x_alpha\u4e3aX\u7684\u6982\u7387\u5206\u5e03\u4e0a\u7684alpha\u5206\u4f4d\u70b9 $$ P(a&lt;X&lt;b)=1-\\alpha\\ P(X&lt;b)-P(X&lt;a)=1-\\alpha\\ P(X&lt;b)=1-\\frac\\alpha3,P(X&lt;b)=\\frac{2\\alpha}3,\\ a=x_{1-\\frac{2\\alpha}3},b=x_{\\frac\\alpha3} $$</p> <p>\u6b65\u9aa4\uff1a\u6c42\u67d0\u4e2a\u53c2\u6570theta\u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a1-alpha\u7684\u7f6e\u4fe1\u533a\u95f4\uff08\u4f8b\u5982\u5bfb\u627eN(mu,sigma^2)\u4e2dmu\u7684\u533a\u95f4\u4f30\u8ba1\uff09</p> <ul> <li> <p>\u5bfb\u627etheta\u7684\u4e00\u4e2a\u826f\u597d\u70b9\u4f30\u8ba1T\uff08\u65e0\u504f\u4f30\u8ba1\uff0c\u670d\u4ece\u76f8\u5408\u6027\u7b49\u7b49\uff09\uff08\u4f8b\u5982\u5bfb\u627e\u5e73\u5747\u6570_X\uff09</p> </li> <li> <p>\u5bfb\u627e\u5173\u4e8e\u53c2\u6570theta\u548c\u70b9\u4f30\u8ba1T\u7684\u5df2\u77e5\u5206\u5e03\u51fd\u6570U   $$   \\frac{\\overline X-\\mu}{\\frac\\sigma{\\sqrt{n}}}\\sim N(0,1)   $$</p> </li> <li> <p>\u6839\u636e\u7f6e\u4fe1\u6c34\u8bc41-alpha\u548cU\u7684\u5206\u5e03\u6c42\u51fa\u5206\u4f4d\u70b9   $$   P(a&lt;U(T,\\theta)&lt;b)=1-\\alpha\\   P(|{\\frac{\\overline X-\\mu}{\\frac\\sigma{\\sqrt{n}}}}|&lt;x_{\\alpha/2})=1-\\alpha   $$</p> </li> <li> <p>P(...)\u4e2d\u89e3\u51fa\u7f6e\u4fe1\u533a\u95f4   $$   P(\\underline\\theta&lt;\\theta&lt;\\overline\\theta)=1-\\alpha\\   P(\\overline X-\\frac{\\sigma}{\\sqrt n}u_{\\alpha/2}\\le \\mu \\le \\overline X+\\frac{\\sigma}{\\sqrt n}u_{\\alpha/2})=1-\\alpha   $$ </p> </li> </ul> <ul> <li>U\u7684\u6982\u7387\u5bc6\u5ea6\u4e3a\u5355\u5cf0\u5bf9\u79f0\u65f6\uff0ca=-b\u65f6\u7f6e\u4fe1\u533a\u95f4\u957f\u5ea6\u6700\u77ed</li> </ul> <p>\u5355\u4fa7\u7f6e\u4fe1\u533a\u95f4\uff1a</p> <p>\u8bbetheta\u662f\u4e00\u4e2a\u5f85\u4f30\u8ba1\u53c2\u6570\uff0c\u7ed9\u5b9aalpha&gt;0\uff0c\u5982\u679c\u7531\u6837\u672cX1...Xn\u786e\u5b9a\u7684\u7edf\u8ba1\u91cf\u4e3a_theta\uff0c\u4e14\u5bf9\u4e8e\u4efb\u610f\u80fd\u53d6\u5230\u7684theta\u6ee1\u8db3 $$ P(\\theta\\ge\\underline\\theta)=1-\\alpha $$ \u5219[_theta,+\u221e)\u662ftheta\u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a1-alpha\u7684\u5355\u4fa7\u7f6e\u4fe1\u533a\u95f4</p> <p>\u540c\u7406\u6709\u7f6e\u4fe1\u4e0a\u9650\uff1a $$ P(\\theta\\le\\overline\\theta)=1-\\alpha $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#7-4","title":"7-4 \u6b63\u6001\u603b\u4f53\u5747\u503c\u548c\u65b9\u5dee\u7684\u533a\u95f4\u4f30\u8ba1","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_21","title":"\u5355\u4e2a\u6b63\u6001\u603b\u4f53","text":"<p>X~N(mu,sigma<sup>2)\uff0c\u8bbeX1...Xn\u662f\u603b\u4f53\u6837\u672c\uff0c_X\uff0cS</sup>2\u5206\u522b\u662f\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee</p> <p>\u603b\u4f53\u5747\u503cmu\u7684\u7f6e\u4fe1\u533a\u95f4\uff1a</p> <p>1.sigma^2\u5df2\u77e5\u65f6\uff1a $$ \\frac{\\overline X-\\mu}{\\sigma/\\sqrt n}\\sim N(0,1) $$ \u53ef\u7531\u6b64\u5f97\u7f6e\u4fe1\u533a\u95f4 $$ \\mu:(\\overline X-\\frac{\\sigma}{\\sqrt n}u_{\\alpha/2},\\overline X+\\frac{\\sigma}{\\sqrt n}u_{\\alpha/2}) $$</p> <p>2.sigma^2\u672a\u77e5\u65f6\uff1a $$ \\frac{\\overline X-\\mu}{S/\\sqrt n}\\sim t(n-1) $$ \u53ef\u7531\u6b64\u5f97\u7f6e\u4fe1\u533a\u95f4 $$ \\mu:(\\overline X-\\frac{S}{\\sqrt n}t_{\\alpha/2}(n-1),\\overline X+\\frac{S}{\\sqrt n}t_{\\alpha/2}(n-1)) $$ \u603b\u4f53\u65b9\u5deesigma\u7684\u7f6e\u4fe1\u533a\u95f4\uff1a $$ \\frac{(n-1)S<sup>2}{\\sigma</sup>2}\\sim\\chi^2(n-1) $$ \u53ef\u7531\u6b64\u5f97\u7f6e\u4fe1\u533a\u95f4 $$ P{\\chi<sup>2_{1-{\\alpha/2}}(n-1)&lt;\\frac{(n-1)S</sup>2}{\\sigma<sup>2}&lt;\\chi</sup>2_{{\\alpha/2}}(n-1)}=1-\\alpha \\ \\sigma<sup>2:(\\frac{(n-1)S</sup>2}{\\chi<sup>2_{\\alpha/2}(n-1)},\\frac{(n-1)S</sup>2}{\\chi^2_{1-\\alpha/2}(n-1)})\\ \\sigma:(\\frac{\\sqrt{(n-1)}S}{\\sqrt{\\chi<sup>2_{\\alpha/2}(n-1)}},\\frac{\\sqrt{(n-1)}S}{\\sqrt{\\chi</sup>2_{1-\\alpha/2}(n-1)}})\\ $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#_22","title":"\u4e24\u4e2a\u6b63\u6001\u603b\u4f53","text":"<p>X1...Xn\u662f\u6765\u81ea\u7b2c\u4e00\u4e2a\u603b\u4f53N(mu_1,sigma_1^2)\u7684\u6837\u672c\uff1b</p> <p>Y1...Yn\u662f\u6765\u81ea\u7b2c\u4e8c\u4e2a\u603b\u4f53N(mu_1,sigma_1^2)\u7684\u6837\u672c\uff1b</p> <p>\u8bbe\u4ed6\u4eec\u76f8\u4e92\u72ec\u7acb\uff0c\u7ed9\u5b9a\u7f6e\u4fe1\u6c34\u5e731-alpha\uff0c_X _Y\u5206\u522b\u662f\u7b2c\u4e00\u4e2a\u3001\u7b2c\u4e8c\u4e2a\u6837\u672c\u5747\u503c\uff0cS1<sup>2,S2</sup>2\u5206\u522b\u662f\u7b2c\u4e00\u4e2a\u3001\u7b2c\u4e8c\u4e2a\u6837\u672c\u65b9\u5dee</p> <p>\u4e24\u4e2a\u603b\u4f53\u5747\u503c\u5dee\u7684\u7f6e\u4fe1\u533a\u95f4(mu1-mu2)\uff1a</p> <p>1.\u5df2\u77e5\u4e24\u4e2a\u603b\u4f53\u7684\u65b9\u5dee\uff1a $$ \\overline X-\\overline Y\\sim N(\\mu_1-\\mu_2,\\frac{\\sigma_1<sup>2}{n_1}+\\frac{\\sigma_2</sup>2}{n_1})\\ \\frac{\\overline X-\\overline Y-(\\mu_1-\\mu_2)}{\\sqrt{\\frac{\\sigma_1<sup>2}{n_1}+\\frac{\\sigma_2</sup>2}{n_2}}}\\sim N(0,1) $$ \u5f97\u5230\u7f6e\u4fe1\u533a\u95f4 $$ \\mu_1-\\mu_2:(\\overline X-\\overline Y-\\sqrt{\\frac{\\sigma_1<sup>2}{n_1}+\\frac{\\sigma_2</sup>2}{n_2}}u_{\\alpha/2},\\overline X-\\overline Y+\\sqrt{\\frac{\\sigma_1<sup>2}{n_1}+\\frac{\\sigma_2</sup>2}{n_2}}u_{\\alpha/2}) $$ 2.\u5df2\u77e5\u4e24\u4e2a\u603b\u4f53\u7684\u65b9\u5dee\u76f8\u7b49\uff08\u5747\u4e3asigma^2\uff09</p> <p>\u7531\u62bd\u6837\u5206\u5e03\u5b9a\u74064\uff1a $$ \\frac{\\overline X-\\overline Y-(\\mu_1-\\mu_2)}{S_\\omega\\sqrt{\\frac{1}{n_2}+\\frac{1}{n_2}}}\\sim t(n_1+n_2-2)\\ where~S_\\omega<sup>2=\\frac{(n_1-1)S_1</sup>2+(n_2-1)S_2^2}{n_1+n_2-2}\uff08\u6837\u672c\u5747\u503c\u52a0\u6743\u5e73\u5747\uff09 $$ \u53ef\u5f97\u7f6e\u4fe1\u533a\u95f4 $$ \\mu_1-\\mu_2:(\\overline X-\\overline Y\\pm S_\\omega\\sqrt{\\frac{1}{n_1}+\\frac{1}{n_2}}t_{\\alpha/2}(n_1+n_2-2)) $$ \u4e24\u4e2a\u603b\u4f53\u65b9\u5dee\u6bd4\u503c\u7684\u7f6e\u4fe1\u533a\u95f4(sigma1<sup>2/sigma2</sup>2)\uff1a</p> <p>\u7531\u62bd\u6837\u5206\u5e03\u5b9a\u74064\uff1a $$ \\frac{S_1<sup>2/S_2</sup>2}{\\sigma<sup>2_1/\\sigma</sup>2_2}\\sim F(n_1-1,n_2-2)\\ P(F_{1-\\alpha/2}(n_1-1,n_2-1)&lt;\\frac{S_1<sup>2/S_2</sup>2}{\\sigma<sup>2_1/\\sigma</sup>2_2}&lt;F_{\\alpha/2}(n_1-1,n_2-1))=1-\\alpha $$ \u5f97\u7f6e\u4fe1\u533a\u95f4\uff1a $$ \\frac{\\sigma_1<sup>2}{\\sigma_2</sup>2}:(\\frac{S_1<sup>2}{S_2</sup>2}\\frac1{F_{\\alpha/2}(n_1-1,n_2-1)},\\frac{S_1<sup>2}{S_2</sup>2}\\frac1{F_{1-\\alpha/2}(n_1-1,n_2-1)}) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#8-1","title":"8-1 \u5047\u8bbe\u68c0\u9a8c","text":"<ol> <li>\u63d0\u51fa\u5047\u8bbe\uff1a</li> </ol> \\[ H_0=\\mu \\] <ol> <li>\u9009\u53d6\u68c0\u9a8c\u7edf\u8ba1\u91cf\uff08\u7531\u4e8esigma\u5df2\u77e5\uff0c\u5219\uff09</li> </ol> \\[ U=\\frac{\\overline X-\\mu_0}{\\sigma/\\sqrt n}\\sim N(0,1) \\] <ol> <li>\u67e5\u8868\uff0c\u627e\u5230\u5206\u4f4d\u70b9\u4f7f\u5f97\uff08alpha\u79f0\u4e3a\u663e\u8457\u6027\u6c34\u5e73\uff09</li> </ol> \\[ P\\{|U|&gt;u_{\\alpha/2}\\}=\\alpha \\] <p>\u5bf9\u5e94\u62d2\u7edd\u57df $$ W:|U|&gt;u_{\\alpha/2} $$ \u5f53\u7531\u6837\u672c\u8ba1\u7b97\u5f97\u5230\u7684\u5b9e\u6d4b\u503c\u843d\u5165\u533a\u57dfW\u5219\u62d2\u7eddH0</p> <p>\u7b2c\u4e00\u7c7b\u9519\u8bef\uff1a\u663e\u8457\u6027\u6c34\u5e73\u4e3a\u72af\u4e0b\u7b2c\u4e00\u7c7b\u9519\u8bef\u7684\u6982\u7387 $$ P(\u62d2\u7eddH_0|H_0\u4e3a\u771f)=\\alpha $$ \u7b2c\u4e8c\u7c7b\u9519\u8bef\uff1a\u964d\u4f4e\u9700\u8981\u6269\u5927\u6837\u672c\u5bb9\u91cf $$ P(\u63a5\u53d7H_0|H_0\u4e3a\u5047)=\\beta $$</p> <p>\u5355\u3001\u53cc\u4fa7\u68c0\u9a8c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#8-2","title":"8-2 \u6b63\u6001\u603b\u4f53\u5747\u503c\u7684\u5047\u8bbe\u68c0\u9a8c","text":"<p>\u5355\u4e2a\u603b\u4f53N(mu,sigma^2)\u5747\u503cmu\u7684\u68c0\u9a8c:</p> <p>1.\u65b9\u5deesigma^2\u5df2\u77e5</p> <p>\u65b9\u5deesigma^2\u5df2\u77e5\u65f6\u5173\u4e8emu=mu0\u7684\u68c0\u9a8c\u95ee\u9898\u3002\u5229\u7528H0\uff08mu=mu0\uff09\u4e3a\u771f\u65f6\u4e0b\u9762\u7edf\u8ba1\u91cf\u670d\u4ece\u6b63\u6001\u5206\u5e03 $$ U=\\frac{\\overline X-\\mu_0}{\\sigma/\\sqrt n}\\sim N(0,1) $$ \u786e\u5b9a\u62d2\u7edd\u57df\u3002 $$ \u62d2\u7edd\u57df\u5f62\u5f0f\uff1a\\overline X-\\mu_0\\ge k $$</p> <p>\u6bd4\u8f83\u6b63\u6001\u603b\u4f53N(mu,sigma^2)(\u65b9\u5dee\u5df2\u77e5)\uff0c\u5bf9\u5747\u503cmu\u7684\u4e24\u79cd\u68c0\u9a8c\u95ee\u9898 $$ H_0:\\mu\\le\\mu_0,H_1:\\mu&gt;\\mu_0\\ (H_0:\\mu=\\mu_0,H_1:\\mu&gt;\\mu_0) $$ \u62e5\u6709\u76f8\u540c\u7684\u62d2\u7edd\u57df\uff08\u5355\u4fa7\u68c0\u9a8c\uff01\uff09 $$ \\frac{\\overline X-\\mu_0}{\\sigma/\\sqrt n}\\ge z_\\alpha $$ 2.\u65b9\u5deesigma^2\u672a\u77e5\uff08t\u68c0\u9a8c\uff09 $$ t=\\frac{\\overline X-\\mu_0}{s/\\sqrt n}\\sim t(n-1)\\ \u62d2\u7edd\u57df\u5f62\u5f0f\uff1a|t|=|\\frac{\\overline X-\\mu_0}{s/\\sqrt n}|\\ge k $$ \u62d2\u7edd\u57df $$ H_0:\\mu=\\mu_0,H_1:\\mu\\ne\\mu_0\\ |t|=|\\frac{\\overline X-\\mu_0}{s/\\sqrt n}|\\ge t_{\\alpha/2}(n-1) $$ \u4e24\u4e2a\u6b63\u6001\u603b\u4f53\u5747\u503c\u5dee\u7684\u68c0\u9a8c\uff08t\u68c0\u9a8c\uff09\uff1a</p> <p>\u4e24\u4e2a\u6b63\u6001\u603b\u4f53\u7684\u65b9\u5dee\u76f8\u7b49 $$ X_1,...,X_{n_1}\\sim N(\\mu_1,\\sigma^2)\\ Y_1,...,Y_{n_2}\\sim N(\\mu_2,\\sigma^2)\\ $$ \u68c0\u9a8c\u95ee\u9898\uff1a $$ H_0:\\mu_1-\\mu_2=\\delta,H_1:\\mu_1-\\mu_2&gt;\\delta $$ \u68c0\u9a8c\u7edf\u8ba1\u91cf\uff1a $$ t=\\frac{(\\overline x-\\overline y)-\\delta}{S_w\\sqrt{\\frac1{n_1}+\\frac1{n_2}}}\\sim t(n_1+n_2-2)\\ S_w<sup>2=\\frac{(n_1-1)s_1</sup>2+(n_2-1)s_2^2}{n_1+n_2-2} $$ \u62d2\u7edd\u57df\u5f62\u5f0f\uff1a $$ t=\\frac{(\\overline x-\\overline y)-\\delta}{S_w\\sqrt{\\frac1{n_1}+\\frac1{n_2}}}\\ge k $$ \u62d2\u7edd\u57df\uff1a $$ t=\\frac{(\\overline x-\\overline y)-\\delta}{S_w\\sqrt{\\frac1{n_1}+\\frac1{n_2}}}\\ge t_\\alpha(n_1+n_2-2) $$</p> <ul> <li>\u4e24\u79cd\u6b63\u6001\u603b\u4f53\u65b9\u5dee\u5747\u4e3a\u5df2\u77e5\u65f6\uff0c\u53ef\u7528u\u68c0\u9a8c\u6cd5\u6765\u68c0\u9a8c\u5747\u503c\u5dee</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#8-3","title":"8-3 \u6b63\u6001\u603b\u4f53\u65b9\u5dee\u7684\u5047\u8bbe\u68c0\u9a8c","text":"<p>\u5355\u4e2a\u603b\u4f53N(mu,sigma<sup>2)\u5747\u503cmu\u7684\u68c0\u9a8c(chi</sup>2\u68c0\u9a8c): $$ H_0:\\sigma<sup>2=\\sigma_0</sup>2,H_1=\\sigma<sup>2\\ne\\sigma_0</sup>2 $$</p> <p>\u68c0\u9a8c\u7edf\u8ba1\u91cf\uff1a $$ \\chi<sup>2=\\frac{(n-1)s</sup>2}{\\sigma_0<sup>2}\\sim\\chi</sup>2(n-1) $$ \u62d2\u7edd\u57df\u5f62\u5f0f\uff1a $$ \\chi<sup>2=\\frac{(n-1)s</sup>2}{\\sigma_0^2}\\le k_1(or ~\\ge k_2) $$ \u62d2\u7edd\u57df\uff1a $$ \\frac{(n-1)s<sup>2}{\\sigma_0</sup>2}\\le \\chi^2_{1-\\alpha/2}(n-1)\\ \\frac{(n-1)s<sup>2}{\\sigma_0</sup>2}\\ge \\chi^2_{\\alpha/2}(n-1)\\ $$ \u4e24\u4e2a\u603b\u4f53\u7684\u65b9\u5dee\u76f8\u7b49\u68c0\u9a8c(F\u68c0\u9a8c)\uff1a</p> <p>x_k: N(mu1,sigma^2_1)</p> <p>y_k: N(mu2,sigma^2_2) $$ H_0:\\sigma_1<sup>2=\\sigma_2</sup>2,H_1:\\sigma_1<sup>2&gt;\\sigma_2</sup>2\\ (H_0:\\sigma_1<sup>2=\\sigma_2</sup>2,H_1:\\sigma_1<sup>2\\ne\\sigma_2</sup>2) $$ \u68c0\u9a8c\u7edf\u8ba1\u91cf\uff1a $$ \\frac{s_1<sup>2/\\sigma_1</sup>2}{s_2<sup>2/\\sigma_2</sup>2}\\sim F(n_1-1,n_2-1)\\ F=\\frac{s_1<sup>2}{s_2</sup>2}\\sim F(n_1-1,n_2-1)~(\\sigma_1<sup>2=\\sigma_2</sup>2) $$ \u62d2\u7edd\u57df\u5f62\u5f0f\uff1a $$ F=\\frac{s_1<sup>2}{s_2</sup>2}\\ge k\\ (F\\ge k_1 ~or \\le k_2) $$ \u62d2\u7edd\u57df\uff1a $$ F=\\frac{s_1<sup>2}{s_2</sup>2}\\ge F_\\alpha(n_1-1,n_2-1)\\ (\\frac{s_1<sup>2}{s_2</sup>2}\\ge F_{\\alpha/2}(n_1-1,n_2-1),or~ F_{1-\\alpha/2}(n_1-1,n_2-1)) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/1-1%20%E9%9A%8F%E6%9C%BA%E8%AF%95%E9%AA%8C/#8-8-p","title":"8-8 \u5047\u8bbe\u68c0\u9a8c\u95ee\u9898\u7684p\u503c\u68c0\u9a8c","text":"<p>\u5047\u8bbe\u68c0\u9a8c\u95ee\u9898\u7684p\u503c\u662f\u7531\u68c0\u9a8c\u7edf\u8ba1\u91cf\u7684\u6837\u672c\u89c2\u5bdf\u503c\u5f97\u51fa\u7684\u539f\u5047\u8bbe\u53ef\u88ab\u62d2\u7edd\u7684\u6700\u5c0f\u663e\u8457\u6027\u6c34\u5e73(alpha) $$ Z=\\frac{\\overline X-\\mu_0}{\\sigma/\\sqrt n}\\ge z_\\alpha\\ \u4ee3\u5165\u89c2\u5bdf\u503c\u5f97Z\u7684\u89c2\u5bdf\u503cz_0\\ p\u503c=P(Z\\ge z_0) $$ \u5f53p\u503c\u5c0f\u4e8e\u7b49\u4e8ealpha\u65f6(z0&gt;=z_alpha)\uff0c\u62d2\u7eddH0\uff1b</p> <p>\u5f53p\u503c\u5927\u4e8ealpha\u65f6(z0&lt;z_alpha)\uff0c\u63a5\u53d7H0\uff1b</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/","title":"Git\u5e38\u89c1\u64cd\u4f5c","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#_1","title":"\u65b0\u5efa","text":"<p>\u5728\u5f53\u524d\u76ee\u5f55\u65b0\u5efagit\u5e93</p> <pre><code>git init\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#addrm-commit","title":"Add\u3001RM &amp; Commit &amp; \u72b6\u6001\u68c0\u67e5\u3001\u6bd4\u5bf9","text":"<p>\u5de5\u4f5c\u533a\u63a8\u9001\u5230\u6682\u5b58\u533a</p> <pre><code>git add a.txt b.txt ...\n</code></pre> <p>\u5de5\u4f5c\u533a\u63a8\u9001\u5230\u6682\u5b58\u533a\uff08\u5220\u9664\u6587\u4ef6\uff09</p> <p>*\u4e5f\u53ef\u4f7f\u7528<code>git add</code></p> <pre><code>git rm &lt;file&gt;\n</code></pre> <p>\u6682\u5b58\u533a\u63a8\u9001\u5230\u4ed3\u5e93</p> <pre><code>git commit -m \"(description)\"\n</code></pre> <p>\u68c0\u67e5\u72b6\u6001</p> <pre><code>git status\n</code></pre> <p>\u6bd4\u5bf9\u4e0d\u540c</p> <pre><code>git diff a.txt\n</code></pre> <p>Commit\u8bb0\u5f55</p> <pre><code>git log [--pretty=oneline] [--gtaph] [--abbrev-commit]\n</code></pre> <p>Commit\u64cd\u4f5c\u65e5\u5fd7\uff08\u7528\u4e8e\u5bfb\u627eCommit ID\uff09</p> <pre><code>git reflog\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#_2","title":"\u7248\u672c\u56de\u9000\u3001\u590d\u539f","text":"<p>\u56de\u9000\u81f3\u4e4b\u524d\u7684Commit</p> <pre><code>git reset --hard &lt;HEAD^|HEAD~1&gt;\n</code></pre> <p>\u4ee5Commit ID\u56de\u9000</p> <pre><code>git reset --hard &lt;1094a...&gt;\n</code></pre> <p>\u5728\u6267\u884c <code>git add</code> \u4e4b\u524d\uff0c\u5de5\u4f5c\u533a!=\u6682\u5b58\u533a\uff08index\uff09==\u4ed3\u5e93</p> <p>\u6267\u884c<code>git add</code>\u540e\uff0c\u5de5\u4f5c\u533a==\u6682\u5b58\u533a!=\u4ed3\u5e93</p> <p>\u4ece\u4ed3\u5e93\u4e2d\u590d\u539f\u81f3\u6682\u5b58\u533a\uff08\u64a4\u9500\u6682\u5b58\u533a\u7684\u4fee\u6539\uff09</p> <pre><code>git reset HEAD &lt;file&gt;\n</code></pre> <p>\u4ece\u6682\u5b58\u533a\u590d\u539f\u81f3\u5de5\u4f5c\u533a\uff08\u4e22\u5f03\u5de5\u4f5c\u533a\u4fee\u6539\uff09</p> <pre><code>git checkout -- &lt;file&gt;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#_3","title":"\u5206\u652f","text":"<p>\u65b0\u5efa\u5206\u652f\u5e76\u5207\u6362\u81f3</p> <pre><code>git checkout -b &lt;new branch name&gt;\n(or)\ngit branch &lt;new branch name&gt;\ngit checkout &lt;new branch name&gt;\n(or)\ngit switch -c &lt;new branch name&gt;\n</code></pre> <p>\u67e5\u770b\u6240\u6709\u5206\u652f</p> <pre><code>git branch\n</code></pre> <p>\u5207\u6362\u5206\u652f</p> <pre><code>git checkout &lt;branch name&gt;\n(or)\ngit switch &lt;branch name&gt;\n</code></pre> <p>\u5c06\u5176\u4ed6\u5206\u652f\u7684\u5185\u5bb9\uff08\u6700\u65b0\u7684Commit\uff09\u4e0e\u5f53\u524d\u5206\u652f\u7684\u5185\u5bb9\uff08\u6700\u65b0\u7684Commit\uff09\u5408\u5e76</p> <pre><code>\uff08\u5728\u5f53\u524d\u5206\u652f\u4e0b\u6267\u884c\uff09\ngit merge &lt;other branch name&gt;\n</code></pre> <p>\u5220\u9664\u67d0\u5206\u652f</p> <pre><code>git branch -d &lt;other branch name&gt;\n</code></pre> <p>\u5f3a\u5236\u5220\u9664\uff08\u5982\u679c\u6b64\u5206\u652f\u6ca1\u6709\u88ab\u5408\u5e76\u8fc7\uff09</p> <pre><code>git branch -D &lt;other branch name&gt;\n</code></pre> <p>\u5408\u5e76\u65f6\u53ef\u80fd\u4f1a\u9047\u5230\u51b2\u7a81\u3002\u82e5\u9047\u5230\u51b2\u7a81\uff0c\u76f4\u63a5\u6253\u5f00\u6587\u4ef6\u4fee\u6539\u6700\u7ec8\u5408\u5e76\u540e\u7684\u6587\u4ef6\u7248\u672c\u3002\u4e4b\u540e\u518d\u63d0\u4ea4</p> <pre><code>git merge &lt;branch name&gt;\ngit status\n...(\u9047\u5230\u51b2\u7a81\u540e\u4fee\u6539\u6587\u4ef6)\ngit add &lt;file&gt;\ngit commit -m &lt;description&gt;\n</code></pre> <p>\u7981\u7528 fast forward \u6a21\u5f0f\u5408\u5e76\u3002\u6b64\u65f6 merge \u4f1a\u751f\u6210\u65b0 Commit </p> <p>\uff08\u91c7\u53d6\u9ed8\u8ba4\u65b9\u5f0f\u7684 merge \u53ea\u4f1a\u5c06 HEAD \u6307\u9488\u79fb\u52a8\u5230\u65b0\u5206\u652f\u7684\u6700\u65b0 Commit \u4e0a\uff09</p> <pre><code>git merge --no-ff -m \"merge with no-fast-forward\" &lt;other branch name&gt;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#stash","title":"Stash \u4e34\u65f6\u4fdd\u85cf","text":"<p>\u5728\u5207\u6362\u81f3\u5176\u4ed6\u5206\u652f\u524d\uff0c\u5982\u679c\u5de5\u4f5c\u533a\u6709\u672a Commit \u7684\u4fee\u6539\uff0c\u53ef\u4ee5\u5148\u4fdd\u5b58</p> <pre><code>git stash\n</code></pre> <p>\u6062\u590d\uff08pop\u4f1a\u4ecestash\u5217\u8868\u4e2d\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\u590d\u539f\uff0c\u7136\u540e\u5220\u9664\u4e4b\uff09</p> <pre><code>git stash apply\ngit stash drop\n(or)\ngit stash pop\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#cherry-pick-commit","title":"Cherry-pick \u590d\u7528 Commit","text":"<p>\u590d\u7528\u67d0\u6b21\u7684 Commit \u4e8e\u5f53\u524d Commit\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684 Commit </p> <pre><code>git cherry-pick &lt;commit id&gt;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#_4","title":"\u8fdc\u7a0b\u63a8\u9001\u3001\u6293\u53d6","text":"<p>\u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93\uff08\u82e5\u6ca1\u6709\u5219\u8fd4\u56de\u7a7a\uff09</p> <pre><code>git remote\n</code></pre> <p>\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93</p> <pre><code>git remote add origin git@github.com:tml104/&lt;repository name&gt;\n</code></pre> <p>\u63a8\u9001\u672c\u5730 master \u5206\u652f\u81f3\u8fdc\u7a0b\u5e93</p> <p>\u4f7f\u7528<code>-u</code>\u53c2\u6570\u6765\u5c06\u672c\u5730\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u5173\u8054</p> <p>\uff08\u5206\u652f\u4e0d\u5b58\u5728\u65f6\u4f1a\u81ea\u52a8\u65b0\u5efa\uff09</p> <pre><code>git push [-u|--set-upstream] origin master\ngit push origin dev\ngit push \uff08\u81ea\u52a8\u5c06\u5f53\u524d\u6240\u5728\u672c\u5730\u5206\u652f\u63a8\u9001\u81f3\u5bf9\u5e94\u8fdc\u7a0b\u5206\u652f\uff0c\u5f53\u4e14\u4ec5\u5f53\u5f53\u524d\u6240\u5728\u672c\u5730\u5206\u652f\u5df2\u7ecf\u548c\u8fdc\u7a0b\u5206\u652f\u5173\u8054\u65f6\u53ef\u7528\uff09\ngit push origin &lt;local branch name&gt;:&lt;remote branch name&gt;\n</code></pre> <p>Clone \u8fdc\u7a0b\u4ed3\u5e93</p> <pre><code>git clone git@github.com:&lt;user name&gt;/&lt;repository name&gt;\ncd &lt;repository name&gt;\n</code></pre> <p>\u4f7f\u5f97\u672c\u5730\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u5173\u8054</p> <pre><code>git branch --set-upstream-to=origin/&lt;branch name&gt; &lt;local branch name&gt;\n</code></pre> <p>\u62c9\u53d6\u8fdc\u7a0b\u5206\u652f\u5e76\u4e0e\u672c\u5730\u5206\u652f\u5408\u5e76\uff08\u53ef\u80fd\u4f1a\u51b2\u7a81\uff0c\u4e5f\u53ef\u80fd\u5408\u5e76\u4e4b\u540e\u6ca1\u6709\u53d8\u5316\uff09</p> <pre><code>git pull [origin] [&lt;local branch name&gt;:&lt;remote branch name&gt;]\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#ssh-key","title":"\u8bbe\u7f6essh key","text":"<p>https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416</p> <p>https://blog.csdn.net/lqlqlq007/article/details/78983879</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#_5","title":"\u5728\u8bbe\u7f6e\u524d\u8bbe\u7f6e\u90ae\u7bb1\u548c\u7528\u6237\u540d","text":"<pre><code>git config --global  user.name \"\u8fd9\u91cc\u6362\u4e0a\u4f60\u7684\u7528\u6237\u540d\"\ngit config --global user.email \"\u8fd9\u91cc\u6362\u4e0a\u4f60\u7684\u90ae\u7bb1\"\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/Git/#ssh","title":"\u672c\u5730\u4ea7\u751fssh\u5bc6\u94a5\uff0c\u5e76\u5c06\u516c\u94a5\u653e\u5230\u670d\u52a1\u5668\u4e0a","text":"<pre><code>ssh-keygen -t rsa -C \"1041159637@qq.com\"\n\u63a5\u7740\u5c06\"C:\\Users\\10411\\.ssh\\id_rsa.pub\"\u4e2d\u7684\u5185\u5bb9\u590d\u5236\u5230github\u4e2dnew sshkey\u4e2d\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/","title":"OI\u6742\u7b14\u8bb0","text":"<p>\u5f85\u5b66\u4e60\u7b97\u6cd5\uff1a</p> <p>\u6811\u94fe\u5256\u5206\u76f8\u5173</p> <ul> <li> <p> \u6811\u94fe\u5256\u5206</p> </li> <li> <p> LCT</p> </li> </ul> <p>\u5b57\u7b26\u4e32\u76f8\u5173</p> <ul> <li> <p> \u6269\u5c55kmp</p> </li> <li> <p> \u540e\u7f00\u6570\u7ec4</p> </li> <li> <p> ac\u81ea\u52a8\u673a</p> </li> <li> <p> \u540e\u7f00\u81ea\u52a8\u673a</p> </li> </ul> <p>\u56fe\u8bba\u76f8\u5173\uff1a</p> <ul> <li> <p> Tarjan</p> </li> <li> <p> 2-sat</p> </li> </ul> <p>\u6570\u636e\u7ed3\u6784\u76f8\u5173</p> <ul> <li> KDT\uff08\uff1f\uff09</li> <li> \u4e3b\u5e2d\u6811</li> <li> \u70b9\u5206\u6cbb</li> <li> \u7b1b\u5361\u5c14\u6811</li> <li> \u6574\u4f53\u4e8c\u5206</li> </ul> <p>\u6570\u5b66\uff1a</p> <ul> <li> Polya</li> <li> FFT(?)</li> <li> NTT</li> <li> FWT</li> <li> \u7ebf\u6027\u57fa</li> <li> \u72c4\u91cc\u514b\u96f7\u5377\u79ef</li> <li> \u535a\u5f08\u8bba\u76f8\u5173</li> </ul> <p>\u6b63\u96be\u5219\u53cd \u6b63\u96be\u5219\u53cd \u6b63\u96be\u5219\u53cd</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_1","title":"\u8e29\u5751","text":"<ul> <li>\u4f7f\u7528FWT\u65f6\u4e0d\u628a\u6570\u7ec4\u957f\u5ea6\u5f00\u591f\u5bfc\u81f4wa\u534a\u5929\uff08HDU 6057 Kanade\u2019s convolution\uff09</li> <li>\u6570\u636e\u91cf\u8fc7\u5927\u65f6\u5207\u8bb0\u4f7f\u7528printf\u548cscanf</li> <li>\u7528\u6d6e\u9ede\u6578\u8dd1\u6700\u77ed\u8def\u6216\u8005\u6700\u5927\u6d41\u7684\u6642\u5019\u8981\u6ce8\u610f\u9b06\u5f1b\u689d\u4ef6\u8981\u653e\u9b06\u4e00\u5b9a\u7cbe\u5ea6(\u4f8b\u5982dy&gt;dx+edge+eps)</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_2","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_3","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316","text":"<p>P6563 \u4e00\u76f4\u5728\u4f60\u8eab\u8fb9</p> <p>\u7535\u7ebf\u957f\u5ea6\u4e3a1\uff0c2\uff0c...\uff0cn\u4e2d\u67d0\u4e2a\u6570\uff0c\u82b1ai\u5143\u53ef\u4ee5\u5f97\u77e5\u957f\u5ea6\u662f\u5426\u5927\u4e8e\uff08\u6216\u5c0f\u4e8e\u7b49\u4e8e\uff09i\uff0c\u95ee\u5979\u81f3\u5c11\u8981\u82b1\u591a\u5c11\u94b1\u624d\u80fd\u4fdd\u8bc1\u77e5\u9053\u9700\u8981\u7535\u7ebf\u7684\u957f\u5ea6</p> <p>\u5206\u6790\uff1a $$ f(L,R)=\\min_{1\\le k\\lt r}(\\max(f(L,k),f(k+1,R))+a_k) $$ R\u6269\u5c55\u65f6\uff0c\u6700\u4f18\u51b3\u7b56\u70b9p=k\u4e0d\u4e0b\u964d\uff08\u4e0a\u5347\u6216\u4e0d\u53d8\uff09\u3002</p> <p>\u56e0\u6b64\u5206\u7c7b\u8ba8\u8bbaf(L,k)\u4e0ef(k+1,R)\u7684\u5927\u5c0f\uff0c\u5206\u522b\u7ef4\u62a4\u66f4\u65b0\u4e24\u79cd\u60c5\u51b5\u5373\u53ef\u3002</p> <p>\u5177\u4f53\u5730\uff1a\u6b63\u5e8f\u5faa\u73afR:[1,N]\uff0c\u5012\u5e8f\u5faa\u73afL:[R,1]\uff0c\u5bf9\u4e8e\u6bcf\u4e2aL\u90fd\u540e\u9000\u66f4\u65b0\u6700\u4f18\u51b3\u7b56\u70b9k\uff0c\u7136\u540e\u66f4\u65b0f(L,k)&gt;f(k+1,R)\u7684\u60c5\u51b5\u3002f(L,k)&lt;=f(k+1,R)\u7684\u60c5\u51b5\uff0cf(L,R)=min f(k+1,R)+ak\uff0c\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u3002</p> <p>P2120 \u4ed3\u5e93\u5efa\u8bbe</p> <p>\u5206\u6790\uff1a $$ dp[i]=\\min_{0\\le j\\lt i}(dp_j+x_i(sump_i-sump_j)-\\(sumxp_i-sumxp_j))+c_i $$ \u76f4\u63a5\u5957\u7528\u659c\u7387\u4f18\u5316\u5373\u53ef</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#sosdp","title":"SOSdp","text":"<p>\u53ef\u4ee5\u5728O(m*2^m)\u7684\u65f6\u95f4\u91cc\u6c42\u89e3\u4e0b\u5217\u5f0f\u5b50\uff1a $$ f_{st}=\\sum_{i\\subset st} w_i $$</p> <p>\u8bbe \\(dp(st,i)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u8868\u793a\u96c6\u5408st\u7684\u6700\u540ei\u4f4d\uff08\u4ece0\u8ba1\u6570\uff09\u53d8\u5316\u7684\u6240\u6709\u5b50\u96c6\u8d21\u732e\u7684\u548c\u3002</p> <p>\u5219\u6709\u8f6c\u79fb\uff1a $$ dp(st,i) = \\begin{cases} dp(st,i-1), &amp; \\text{\u7b2ci\u4f4d\u4e3a0} \\ dp(st,i-1) + dp(st\\oplus(2^i),i-1), &amp; \\text{\u7b2ci\u4f4d\u4e3a1} \\ \\end{cases} $$</p> <pre><code>void sos(){\n    for(int i=0;i&lt;(1&lt;&lt;N);i++)\n        f[i]=w[i];\n    for(int i=0;i&lt;N;i++)\n        for(int st=0;st&lt;(1&lt;&lt;N);st++)\n            if(st&amp;(1&lt;&lt;i)) f[st]+=f[st^(1&lt;&lt;i)];\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_4","title":"\u6811\u4e0a\u80cc\u5305","text":"<p>P1064 [NOIP2006 \u63d0\u9ad8\u7ec4] \u91d1\u660e\u7684\u9884\u7b97\u65b9\u6848</p> <p>\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u7cfb\u5217\u7269\u54c1,\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u4ef7\u683cv\u548c\u6743\u503cw,\u5e76\u4e14\u7269\u54c1\u95f4\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb.\u6c42\u4e00\u79cd\u53ef\u884c\u65b9\u6848,\u4f7f\u5f97\u6ee1\u8db3\u4f9d\u8d56\u5173\u7cfb\u5e76\u4e14\\sum v \\leq m\u2211v\u2264m\u7684\u60c5\u51b5\u4e0b\\sum w\u2211w\u5c3d\u91cf\u5927</p> <p>\u89e3\u6cd5\uff1a</p> <p>\u6211\u4eec\u5bf9\u8fd9\u9897\u6811\u6c42\u4e00\u4e2a\u540e\u5e8f\u904d\u5386,\u8fd9\u6837\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u4ee5\u53ca\u5de6\u8fb9\u5144\u5f1f\u5728\u5e8f\u5217\u4e2d\u90fd\u5728\u5b83\u7684\u524d\u90e8.\u7136\u540e\u5462?\u6bcf\u4e00\u6b65\u6211\u4eec\u90fd\u6709\u4e24\u79cd\u51b3\u7b56.</p> <ul> <li>\u9009\u8fd9\u4e2a\u7269\u54c1,\u90a3\u4e48\u72b6\u6001i\u53ef\u4ee5\u76f4\u63a5\u7531\u72b6\u6001i - 1\u8f6c\u79fb\u800c\u6765</li> <li>\u4e0d\u9009\u8fd9\u4e2a\u7269\u54c1,\u90a3\u4e48\u662f\u4e0d\u662f\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u90fd\u4e0d\u53ef\u4ee5\u9009,\u90a3\u4e48\u72b6\u6001i\u5c31\u53ea\u80fd\u7531\u5b83\u7684\u5de6\u5144\u5f1f\u8f6c\u79fb\u800c\u6765</li> </ul> <p>\u8bbepre[i]\u662f\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5de6\u5144\u5f1f $$ f[i,j]=\\max\\begin{cases} f[pre[i],j],\\ f[i-1,j-v]+w, &amp; j\\ge v \\end{cases} $$</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=200;\n\nint n,m;\n\nstruct E\n{\n    int to,inext;\n}edge[N*2];\nint head[N],total;\n\nstruct Node\n{\n    int val;\n    int weight;\n    int fa;\n    int dfn;\n}s[N];\n\nvoid adde(int x,int y)\n{\n    edge[++total].to=y;\n    edge[total].inext=head[x];\n    head[x]=total;\n}\n\nint dfn;\n//\u6309\u7167dfs\u5e8f\u4f5c\u4e3a\u7d22\u5f15\nstruct Node_dfn\n{\n    int val;\n    int weight;\n    int pre;\n}ss[N];\nint dp[N][50000];\n\nvoid dfs(int x,int fa)\n{\n    int p=dfn;\n    for(int e=head[x];e;e=edge[e].inext)\n    {\n        int y=edge[e].to;\n        if(y==fa) continue;\n        dfs(y,x);\n    }\n    s[x].dfn=++dfn;\n    ss[dfn].val=s[x].val;\n    ss[dfn].weight=s[x].weight;\n    ss[dfn].pre=p;\n}\n\nint dpdp()\n{\n    memset(dp,0,sizeof(dp));\n    dp[0][0]=0;\n    for(int i=1;i&lt;=n+1;i++) //dfn\n    {\n        // dp[i][0]=0;\n        for(int w=0;w&lt;=m;w++)\n        {\n            /*dp[i][w]=max(\n                dp[ss[i].pre][w],\n                dp[i-1][w-1]+ss[i].bb\n            );*/\n            dp[i][w]=dp[ss[i].pre][w];\n            if(w-ss[i].weight&gt;=0) dp[i][w]=max(dp[i][w],dp[i-1][w-ss[i].weight]+ss[i].val);\n        }\n    }\n\n    int ans=0;\n    for(int w=1;w&lt;=m;w++)\n    {\n        ans=max(ans,dp[n][w]);\n    }\n    return ans;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    while(cin&gt;&gt;m&gt;&gt;n)\n    {\n        if(n==0 &amp;&amp; m==0) return 0;\n        total=0;\n        dfn=0;\n        for(int i=0;i&lt;=n+10;i++)\n        {\n            head[i]=0;\n            ss[i]=ss[0];\n            s[i]=s[0];\n        }\n        for(int i=1;i&lt;=n;i++)\n        {\n            int a,b,c;\n            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;\n\n            s[i].weight=a;\n            s[i].val=a*b;\n            s[i].fa=c;\n\n            s[i].dfn=0;\n\n            adde(i,c);\n            adde(c,i);\n        }\n\n        dfs(0,0);\n        cout&lt;&lt;dpdp()&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_5","title":"\u6570\u8bba","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_6","title":"\u540c\u4f59\u6027\u8d28","text":"<ol> <li> <p>\u6574\u9664\u6027    $$    a\\equiv b \\pmod m \\Rightarrow m|(a-b)    $$</p> </li> <li> <p>\u4f20\u9012\u6027    $$    \\begin{cases}    a\\equiv b \\pmod m\\    c\\equiv d \\pmod m    \\end{cases}    \\Rightarrow a\\equiv c \\pmod m    $$</p> </li> <li> <p>\u4fdd\u6301\u57fa\u672c\u8fd0\u7b97    $$    \\left. \\begin{matrix}    a \\equiv b \\pmod{m} \\    c \\equiv d\\pmod{m}    \\end{matrix} \\right} \\Rightarrow \\left{ \\begin{matrix} a \\pm c \\equiv b \\pm d \\pmod{m} \\ ac \\equiv bd \\pmod{m} \\end{matrix} \\right.    $$</p> </li> </ol> <p>$$    a \\equiv b \\pmod{m} \\Rightarrow \\begin{cases}     an \\equiv bn \\pmod{m}, \\forall n \\in \\mathbb{Z} \\     a^n \\equiv b^n \\pmod{m}, \\forall n \\in \\mathbb{N}^0    \\end{cases}    $$</p> <ol> <li> <p>\u5e95\u6570\u653e\u7f29    $$    (km \\pm a)^n \\equiv (\\pm a)^n \\pmod{m}    $$</p> </li> <li> <p>\u6a21\u6570\u653e\u7f29    $$    a \\equiv b \\pmod{m} \\Leftrightarrow ka \\equiv kb \\pmod{km}    $$</p> </li> <li> <p>\u9664\u6cd5\u539f\u7406\uff1a\u5f53k\u3001m\u4e92\u8d28\u65f6    $$    ka \\equiv kb \\pmod{m} \\Rightarrow a \\equiv b \\pmod{m}    $$</p> </li> <li> \\[    \\begin{cases}    a \\equiv b \\pmod m \\\\    n|m    \\end{cases}\\Rightarrow a\\equiv b \\pmod n    \\] </li> <li> <p>\u5bf9\u82e5\u5e72\u540c\u4f59\u7684\u540c\u4f59\u65b9\u7a0b\uff1a    $$    \\left. \\begin{matrix} a \\equiv b \\pmod{m_1} \\ a \\equiv b \\pmod{m_2} \\ \\vdots \\ a \\equiv b \\pmod{m_n} \\ (n \\ge 2) \\end{matrix} \\right} \\Rightarrow a \\equiv b \\pmod{ \\text{lcm}[m_1,m_2,\\cdots,m_n]}    $$</p> </li> <li> \\[    \\frac{a}{b}\\mod c=\\frac{a\\mod (bc)}{b}    \\] </li> </ol>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#exlucas","title":"\u6269\u5c55\u5362\u5361\u65af\u5b9a\u7406 (exLucas)","text":"<p>\u5f53\u6a21\u6570p\u4e0d\u662f\u8d28\u6570\u65f6</p> <p>$$ p=p_1<sup>{k_1}p_2</sup> $$ \u5f53k1=k2=...=1\u65f6\uff0c\u6c42\u4e0b\u9762\u7684\u540c\u4f59\u65b9\u7a0b\u7684a1\uff0c\u7136\u540eCRT\u5408\u5e76\u7b54\u6848 $$ \\begin{cases} C_n^m\\equiv a_1 \\pmod {p_1^{k_1}} \\ C_n^m\\equiv a_2 \\pmod {p_2^{k_2}} \\ \\cdots\\ C_n^m\\equiv a_s \\pmod {p_s^{k_s}} \\end{cases} $$ \u5f53\u5206\u89e3\u540e\u8fd8\u4e0d\u662f\u8d28\u6570\u65f6 $$ C_n^m=\\frac{n!}{m!(n-m)!}\\mod p}\\cdots p_s^{k_s<sup>t\\=\\frac{\\frac{n!}{p</sup>{p}}}{\\frac{m!<sup>{a_2}}*\\frac{(n-m)!}{p</sup>\\mod p^t\\ $$ \u8ba1\u7b97n!\u3001m!\u3001(n-m)!\u5728mod p^t\u4e0b\u7684\u503c\uff08\u540e\u4e24\u8005\u518d\u6c42\u9006\u5143\uff09}}}*p^{a_1-a_2-a_3</p> <p>\u5bf9\u4e8e\u9636\u4e58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u5206\u4e3a\u53ef\u88abp\u6574\u9664\u7684\u548c\u4e0d\u53ef\u88abp\u6574\u9664\u7684 $$ n!=\\lfloor\\frac{n}{p}\\rfloor!<sub>*</sub>p<sup>{\\lfloor\\frac{n}{p}\\rfloor}<sub>*</sub>(\\prod_{i=1\\p|i}</sup>{P<sup>t}i)</sup>{p<sup>t}\\rfloor}~*(\\prod_{i=1\\p\u2224i}</sup> $$ (n/p)!\u9012\u5f52\u89e3\u51b3\uff0c\u540e\u4e24\u8005\u9884\u5904\u7406\u89e3\u51b3}}i) \\pmod {p^t</p> <p>\u53c2\u89c1luogu/4720_exLucas</p> <p>2019-2020 ICPC Asia Taipei-Hsinchu Regional Contest</p> <p>M.DivModulo:</p> <p>\u9898\u610f\uff1a</p> <p>\u6c42C(N,M) dmod D\uff0c\u5176\u4e2d x dmod y \u6307\u7684\u662f\u53bb\u6389 x \u4e2d\u6240\u6709 y \u56e0\u5b50\u540e\u53d6\u4f59\u6570\u3002</p> <p>\u5206\u6790\uff1a</p> <p>\u6211\u4eec\u8bd5\u56fe\u5c06\u9636\u4e58\u4e2d\u6240\u6709\u542b\u6709D\u7684\u9879\u63d0\u51fa\u6765\uff0c\u7136\u540e\u5229\u7528\u7c7b\u4f3c\u6269\u5c55\u5362\u5361\u65af\u8ba1\u7b97\u4f59\u4e0b\u7684\u90e8\u5206\u3002 $$ C<sup>M_N=\\frac{N!}{M!(N-M)!}=\\frac{N!<sub>div</sub>D}{M!<sub>div</sub>D(N-M)!<sub>div</sub>D}D</sup>K $$ \u8fd9\u4e2a\u65f6\u5019\u518d\u53d6\u6a21 $$ C_N^M<sub>dmod</sub>D=(N!<sub>div</sub>D)inv(M!<sub>div</sub>D)inv((N-M)!<sub>div</sub>D) \\mod D $$ \u5206\u6bcd\u4e0d\u4e00\u5b9a\u4e0eD\u4e92\u8d28\uff0c\u56e0\u6b64\u8003\u8651\u8d28\u56e0\u6570\u5206\u89e3D=D1...Ds\uff0c\u6700\u540e\u518d\u7528CRT\u5408\u5e76 $$ C_N<sup>M<sub>div</sub>D=\\frac{C_N</sup>M}{D<sup>K}=\\frac{(C_N</sup>M<sub>div</sub>p_i)p_i<sup>k}{D</sup>K}=\\frac{(C_N<sup>M<sub>div</sub>p_i)*p_i</sup>\\mod D_i $$ \u5176\u4e2dK\u662f\u4f7f\u5f97D^K\u9664C(N,M)\u540e\u4ecd\u662f\u6574\u6570\u7684\u6700\u5927\u7684K $$ K=\\min_{1\\le i\\le s}\\frac{k_i}{a_i} $$ \u81f3\u4e8e\u8ba1\u7b97C_N^M div D mod P\uff0c\u5219\u8fd0\u7528\u7c7b\u4f3c\u6269\u5c55\u5362\u5361\u65af\u7684\u65b9\u6cd5\u5373\u53ef $$ n!=\\lfloor\\frac{n}{D}\\rfloor!}}{(D/D_i)^K<sub>*</sub>D<sup>{\\lfloor\\frac{n}{D}\\rfloor}<sub>*</sub>(\\prod_{i=1\\D|i}</sup>i)<sup>{\\lfloor\\frac{n}{D}\\rfloor}~*(\\prod_{i=1\\D\u2224i}</sup>i)\\ n!}<sub>div</sub>D=\\lfloor\\frac{n}{D}\\rfloor!<sub>(\\prod_{i=1\\D|i}<sup>{P}i)</sup>}{D}\\rfloor</sub>*(\\prod_{i=1\\D\u2224i}^{N\\mod {D}}i) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_7","title":"\u9636\u548c\u539f\u6839","text":"<p>\u9636\uff1a\\(\\((a,m)=1,a^l\\equiv1\\pmod{m}\\)\\),\u4f7f\u5f97\u5176\u6210\u7acb\u7684\u6700\u5c0f\u7684l\u79f0\u4e3aa\u5173\u4e8emod m\u7684\u9636\u3002\u8bb0\u4e3a\\(\\(\\text{ord}_ma=l\\)\\)</p> <ul> <li> \\[   \\text{ord}_ma=l\\Rightarrow \\text{ord}_ma^t=\\frac{l}{(t,l)}   \\] </li> </ul> <p>\u8bc1\u660e\uff1a   $$   \u8bbe\u540e\u8005\u539f\u6839\u662fx,\u5219\u663e\u7136l|tx\\Rightarrow tx=\\text{lcm}(t,l)=\\frac{tl}{(t,l)}   $$</p> <ul> <li> \\[   a^n\\equiv1\\pmod m\\Leftrightarrow l|n   \\] </li> </ul> <p>\u7531\u4e8e\u6b27\u62c9\u5b9a\u7406\\(\\(a^{\\phi(n)}\\equiv 1\\pmod m\\)\\),\u5219\\(\\(l|\\phi(n)\\)\\)</p> <ul> <li> <p>\\(\\(1,a,a^2,\\cdots,a^{l-1}\\)\\)\u5173\u4e8em\u4e24\u4e24\u4e0d\u540c\u4f59\uff08l\u662f\u6700\u5c0f\u5faa\u73af\u5468\u671f\uff09</p> </li> <li> <p>p\u4e3a\u8d28\u6570\uff0c\\(\\(l|\\phi(p)\\)\\)\uff0c\u5219\u5b58\u5728\\(\\(\\phi(l)\\)\\)\u4e2a\u5173\u4e8emod p\u9636\u4e3al\uff0c\u4e14\u4e24\u4e24\u4e92\u4e0d\u540c\u4f59\u7684\u6570</p> </li> <li> <p>\u82e5\\(\\(m=p_1^{a_1}\\cdots p_k^{a_k}\\)\\),\u5219\\(\\(\\text{ord}_ma=[\\text{ord}_{p_1}^{a_1},\\cdots,\\text{ord}_{p_k}^{a_k}]\\)\\)</p> </li> </ul> <p>\u539f\u6839\uff1a</p> <p>\\(\\((g,m)=1\\)\\)\uff0c\u4e14\\(\\(\\text{ord}_mg=\\phi(m)\\)\\)\uff0c\u5219g\u662fm\u7684\u539f\u6839\u3002</p> <p>\\(\\(\\{g,g^2,\\cdots,g^{\\phi(m)}\\}\\)\\)\u662fmod m\u7684\u4e00\u4e2a\u7b80\u7ea6\u5269\u4f59\u7cfb\u3002</p> <ul> <li> <p>\u539f\u6839\u5f62\u5f0f\uff1a\\(\\(2,4,p^\\alpha,2p^\\alpha\\)\\)\u3002p\u4e3a\u5947\u6570\u8d28\u6570\uff08\u9664\u4e862\u5916\u7684\u8d28\u6570\uff09\uff0calpha\u4e3a\u6b63\u6574\u6570</p> </li> <li> <p>\u6240\u6709\u539f\u6839\uff1ag\u4e3am\u7684\u4e00\u4e2a\u539f\u6839\uff0c\u5219\u4e0b\u9762\u7684\u96c6\u5408\u7ed9\u51fa\u6240\u6709\u539f\u6839\uff08\u539f\u6839g\u6784\u6210\u6574\u6570mod m\u4e58\u6cd5\u7fa4\u751f\u6210\u5143\uff09\uff0c\u56e0\u6b64\u82e5m\u5b58\u5728\u539f\u6839\uff0c\u5219\u539f\u6839\u6570\u91cf\u4e3a\\(\\(\\phi(\\phi(m))\\)\\)   $$   {g^s|1\\le s\\le\\phi(m),(s,\\phi(m))=1}   $$</p> </li> </ul> <p>\u6c42\u89e3\u4e00\u4e2a\uff08\u6700\u5c0f\uff09\u539f\u6839\uff1a</p> \\[(g,m)=1$$,\u8bbe$$p_1,p_2,\\cdots,p_k$$\u662f$$\\phi(m)$$\u7684\u6240\u6709\u4e0d\u540c\u8d28\u56e0\u6570\uff0c\u5219g\u662fm\u7684\u539f\u6839\uff0c\u5f53\u4e14\u4ec5\u5f53$$1\\le i\\le k,g^{\\frac{\\phi(m)}{p_i}}\\not\\equiv1\\pmod m\\] <p>\u5148\u5206\u89e3\\(\\(\\phi(m)\\)\\)\u7684\u8d28\u56e0\u6570\uff0c\u7136\u540e\u7a77\u4e3eg\uff0c\u5e76\u4f9d\u6b21\u9a8c\u8bc1\u6bcf\u4e2a\u8d28\u56e0\u6570\u662f\u5426\u6ee1\u8db3\u4e0a\u9762\u7684\u6761\u4ef6\u3002</p> <p>https://zh.wikipedia.org/wiki/%E5%8E%9F%E6%A0%B9</p> m \u6a21m\u7684\u539f\u6839(\u6709*\u53f7\u7684\u6570\u6ca1\u6709\u539f\u6839\uff0c\u6b64\u65f6\u662f\u6709\u6700\u5927\u6a21m\u5468\u671f\u7684\u6570) \u5468\u671f ( A002322) 1 0 1 2 1 1 3 2 2 4 3 2 5 2, 3 4 6 5 2 7 3, 5 6 8* 3, 5, 7 2 9 2, 5 6 10 3, 7 4 11 2, 6, 7, 8 10 12* 5, 7, 11 2 13 2, 6, 7, 11 12 14 3, 5 6 15* 2, 7, 8, 13 4 16* 3, 5, 11, 13 4 17 3, 5, 6, 7, 10, 11, 12, 14 16 18 5, 11 6 19 2, 3, 10, 13, 14, 15 18 20* 3, 7, 13, 17 4 21* 2, 5, 10, 11, 17, 19 6 22 7, 13, 17, 19 10 23 5, 7, 10, 11, 14, 15, 17, 19, 20, 21 22 24* 5, 7, 11, 13, 17, 19, 23 2 25 2, 3, 8, 12, 13, 17, 22, 23 20 26 7, 11, 15, 19 12 27 2, 5, 11, 14, 20, 23 18 28* 3, 5, 11, 17, 19, 23 6 29 2, 3, 8, 10, 11, 14, 15, 18, 19, 21, 26, 27 28 30* 7, 13, 17, 23 4 31 3, 11, 12, 13, 17, 21, 22, 24 30 32* 3, 5, 11, 13, 19, 21, 27, 29 8 33* 2, 5, 7, 8, 13, 14, 17, 19, 20, 26, 28, 29 10 34 3, 5, 7, 11, 23, 27, 29, 31 16 35* 2, 3, 12, 17, 18, 23, 32, 33 12 36* 5, 7, 11, 23, 29, 31 6"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_8","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406","text":"<p>p\u662f\u8d28\u6570\uff0c\u5219 $$ a^p\\equiv a \\pmod p $$ \u7279\u522b\u7684,\u5f53a\u4e0d\u662fp\u7684\u500d\u6570\u65f6(\u8fd9\u65f6a,p\u4e92\u8d28)\u6709 $$ a^{p-1}\\equiv 1 \\pmod p $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#miller-rabin","title":"Miller Rabin \u8d28\u6570\u5224\u522b\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_9","title":"\u8d39\u9a6c\u7d20\u6027\u6d4b\u8bd5","text":"<p>\u5728[2\u5230n-1]\u91cc\u9762\u9009\u62e9\u4e00\u4e9b\u57faa,\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u8d39\u9a6c\u5c0f\u5b9a\u7406,\u4e0d\u6ee1\u8db3\u5c31\u8bf4\u660e\u4e0d\u662f\u8d28\u6570</p> <ul> <li>\u5f53\u7136\u6ee1\u8db3\u4e86\u4e5f\u4e0d\u4e00\u5b9a\u662f\u8d28\u6570</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_10","title":"\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406","text":"<p>p\u662f\u5947\u8d28\u6570\uff0c\u5219\u65b9\u7a0b\\(x^2\\equiv1\\pmod p\\)\u7684\u89e3\u4e3a\\(x=1\\) \u6216\u8005 \\(x=p-1\\) \uff08\u4e5f\u5373\\(x=-1\\) (\u540c\u4f59\u610f\u4e49\u4e0b\u7684)\uff09</p> <p>\u8bc1\u660e\uff1a $$ x^2=1\\pmod1 \\Rightarrow (x+1)(x-1)=0\\pmod1\\Rightarrow\\ p|(x+1)(x-1) \\Rightarrow x=p-1\u62161 $$ </p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_11","title":"\u5361\u8fc8\u514b\u5c14\u6570","text":"<p>\u5bf9\u8fd9\u7c7b\u6570,\u53d6\u4efb\u4f55\u57fa\u90fd\u80fd\u901a\u8fc7\u7d20\u6027\u6d4b\u8bd5,\u4f46\u5176\u672c\u8eab\u5374\u4e0d\u662f\u8d28\u6570. \u6700\u5c0f\u7684\u4e09\u4e2a\u6570\u662f561,1105,1729(OEIS:A002997)</p> <p>\u7b49\u4ef7\u5b9a\u4e49:\u4e00\u4e2a\u6b63\u5408\u6210\u6570n\u662f\u5361\u8fc8\u514b\u5c14\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53 n\u65e0\u5e73\u65b9\u6570\u7ea6\u6570\u4e14\u5bf9\u4e8e\u6240\u6709 n\u7684\u7d20\u56e0\u6570 p\uff0cp-1|n-1</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_12","title":"\u7efc\u5408\u505a\u6cd5","text":"<p>\u5982\u679cn\u662f\u5927\u4e8e2\u7684\u8d28\u6570,\u5219\u7531\u4e8en-1\u662f\u5076\u6570,\u5bf9\u4e8e\u4efb\u610f\u7684\u57fa\\(a~(a\\in[2,n-1])\\),\u6709 $$ a<sup>{n-1}=a</sup> $$ \u7531\u8d39\u9a6c\u7d20\u6027\u6d4b\u8bd5,\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u505a\\(a^{n-1}\\equiv 1 \\pmod n\\),\u7ed3\u5408\u4e0a\u5f0f\u53ef\u4ee5\u5f97\u5230 $$ a<sup>{2</sup>sd}=(a<sup>{2</sup>)^2\\equiv 1\\pmod n $$ \u7531\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u53ef\u77e5\uff0c}d\\(a^{2^{r-1}}\\equiv 1\u6216-1\\). \u800c\u5982\u679c\u7b49\u4e8e1\u90a3\u4e48\u53ef\u4ee5\u7ee7\u7eed\u5f00\u6839\u53f7\u3002</p> <p>\u73b0\u5728\u8003\u8651\u53cd\u8fc7\u6765\u7528\u8fd9\u4e2a\u5b9a\u7406\uff1a\u5982\u679c\u5b58\u5728\u8fd9\u4e48\u4e00\u4e2aa\u4f7f\u5f97\u4e0b\u9762\u4e24\u4e2a\u5f0f\u5b50\u90fd\u6ee1\u8db3\uff1a $$ a^d\\not\\equiv1 \\pmod n\\ a<sup>{{2</sup>r}d}\\not\\equiv1 \\pmod n (0\\le r\\le s-1)\\ $$ \u90a3\u4e48n\u5c31\u4e00\u5b9a\u662f\u5408\u6570,a\u4fbf\u662fn\u662f\u5408\u6570\u7684\u4e00\u4e2a\u51ed\u636e.</p> <p>\u6ce8\uff1a\u8fd9\u91cc\u8981\u4e48\\(a^d,a^{2^1d},\\cdots,a^{2^rd}\\)\u5168\u662f1\uff0c\u8981\u4e48\u4f1a\u5b58\u5728\u4e00\u4e2a\u6570\u662f-1\uff0c\u7136\u540e\u5c31\u90fd\u662f1</p> <p>\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u5176\u4e2d\u67d0\u4e2a\u6570\u662f1\u90a3\u4e48\u53ef\u4ee5\u5f00\u6839\u53f7\uff0c\u5f97\u5230\u524d\u4e00\u4e2a\u6570\u662f1\u6216-1\u3002\u5982\u679c\u662f1\u90a3\u4e48\u53ef\u4ee5\u7ee7\u7eed\u5f00\u6839\u53f7\u76f4\u5230\u6240\u6709\u6570\u90fd\u662f1\u4e3a\u6b62\uff1b\u5982\u679c\u662f-1\u90a3\u4e48\u5c31\u6b64\u7ec8\u6b62\uff0c\u56e0\u6b64\u8fd9\u4e2a-1\u4e4b\u540e\u7684\u6570\u90fd\u662f1</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#pollards-rho","title":"Pollard's Rho \u8d28\u56e0\u6570\u5206\u89e3(\u5f85\u8865\u5145)","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_13","title":"\u72c4\u5229\u514b\u96f7\u5377\u79ef\uff0c\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14","text":"<p>\u5f15\u74061\uff1a\u5730\u677f\u9664\u6cd5\u5d4c\u5957\u53ef\u4e0b\u653e $$ \\forall a,b,c\\in \\mathbb{Z},\\lfloor\\frac{a}{bc}\\rfloor=\\lfloor\\frac{\\lfloor\\frac ab\\rfloor}{c}\\rfloor $$ \u5f15\u74062\uff1a\u4e0d\u540c\u7684n/d\u4e2a\u6570\u4e0d\u4f1a\u8d85\u8fc7\\(\\lfloor2\\sqrt n\\rfloor\\)</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_14","title":"\u6570\u8bba\u5206\u5757","text":"<p>\uff08\u5f85\u8865\u5145\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_15","title":"\u79ef\u6027\u51fd\u6570","text":"<p>\\(f(n)\\)\u6ee1\u8db3\\(f(1)=1 \\&amp;\\&amp; \\forall x,y\\in\\mathbb{N_+},\\gcd(x,y)=1\\)\u6709\\(f(xy)=f(x)f(y)\\),\u5219f\u4e3a\u79ef\u6027\u51fd\u6570\u3002</p> <p>\u5982\u679c\u6ca1\u6709gcd\u6761\u4ef6\u7684\u9650\u5236\uff0c\u4e5f\u5373\u4efb\u610f\u4e24\u4e2a\u6570\u90fd\u6ee1\u8db3\u79ef\u6027\u6761\u4ef6\uff0c\u5219f\u4e3a\u5b8c\u5168\u79ef\u6027\u51fd\u6570</p> <p>\u6027\u8d28\uff1a\uff08\u5f85\u8865\u5145\uff09</p> <p>\u5e38\u89c1\u79ef\u6027\u51fd\u6570\uff1a</p> <p>\u4e0b\u6587\u4e2d\\([condition]\\)\u8868\u793a\u5f53\u6761\u4ef6\u6210\u7acb\u65f6\u4e3a1\uff0c\u5426\u5219\u4e3a0</p> <ul> <li> <p>\u5355\u4f4d\u51fd\u6570\uff1a\uff08\u5b8c\u5168\u79ef\u6027\u51fd\u6570\uff09   $$   \\epsilon(n)=[n=1]   $$</p> </li> <li> <p>\u5e42\u51fd\u6570\u548c\u6052\u7b49\u51fd\u6570\uff1a(\u5b8c\u5168\u79ef\u6027\u51fd\u6570)   $$   id_k(n)=n^k,id(n)=n   $$</p> </li> <li> <p>\u5e38\u6570\u51fd\u6570\uff1a\uff08\u5b8c\u5168\u79ef\u6027\u51fd\u6570\uff09   $$   1(n)=1   $$</p> </li> <li> <p>\u9664\u6570\u51fd\u6570\uff1a   $$   \\sigma_k(n)=\\sum_{d|n}d^k\\sigma_0(n),\\sigma_1(n)=\\sigma(n)   $$</p> </li> <li> <p>\u6b27\u62c9\u51fd\u6570\uff1a</p> </li> <li> <p>\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\uff1a   $$   \\mu(n)=\\begin{cases}   1 &amp; n=1\\   0 &amp; \\exist d&gt;1:d^2|n\\   (-1)^{\\omega(n)} &amp; else\\   \\end{cases}   $$</p> </li> <li> <p>\u672c\u8d28\u4e0d\u540c\u8d28\u56e0\u5b50\u4e2a\u6570\u51fd\u6570\uff08\u4e5f\u662f\u79ef\u6027\u51fd\u6570\uff09\uff1a   $$   \\omega({n})=|{p: (p|n \\&amp;\\&amp; \\text{p is a prime})}|   $$</p> </li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#dirichlet","title":"\u72c4\u5229\u514b\u96f7\u5377\u79ef\uff08Dirichlet \uff09","text":"<p>\u4e24\u4e2a\u6570\u8bba\u51fd\u6570fg\u7684\u5377\u79ef\uff0c\u662f\u6240\u6709\u6574\u9664n\u7684\u56e0\u5b50d\u7684f(d)\uff0c\u548c\u8be5\u56e0\u5b50\u5bf9\u5e94\u7684\u5546\u6570n\\d\u7684g(n\\d) \u4e4b\u79ef\u7684\u6c42\u548c \uff08\u7ed3\u679c\u662f\u4e00\u4e2a\u65b0\u7684\u6570\u8bba\u51fd\u6570\uff09 $$ (fg)(n)=\\sum_{d|n}f(d)g(\\frac nd) $$ \u6027\u8d28*\uff08\u7fa4\u8bba\uff09\uff1a</p> <ul> <li>\u4ea4\u6362\u5f8b</li> <li>\u7ed3\u5408\u5f8b</li> <li>\u5206\u914d\u7387\uff1a\\(f*(g+h)=f*g+f*h\\)</li> <li>\u5355\u4f4d\u5143\uff1a\\(\\epsilon\\),\u4e5f\u5373\u5355\u4f4d\u51fd\u6570</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_16","title":"\u83ab\u6bd4\u4e4c\u65af\u5bb9\u65a5","text":"<p>\u5982\u679c\u8981\u6c42\u67d0\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u8981\u6c42\\(\\gcd(a_1,\\cdots,c_n)=1\\)\uff0c\u90a3\u4e48 $$ ans=\\sum_{d=1}^{n}\\mu(d)\\cdot D(a_1,a_2,\\cdots,a_n,d) $$ \u5176\u4e2d\\(D(a_1,a_2,\\cdots,a_n,d)\\)\u8868\u793a\u6ee1\u8db3\\(d|\\gcd(a_1,a_2,\\cdots,a_n)\\)\u7ea6\u675f\u65f6\u7684\u51fd\u6570\u503c</p> <p>\u4f8b\u9898\uff1a</p> <p>2019 \u94f6\u5dddD</p> <p>\u84dd\u4e66\u4e0a\u7684\u6c42sum of [gcd=1]\u9898</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#rsa","title":"*RSA","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_17","title":"\u4ea7\u751f\u516c\u94a5\u548c\u79c1\u94a5\u7684\u8fc7\u7a0b","text":"<ol> <li>\u9009\u62e9\u4e24\u4e2a\u8d28\u6570p\u3001q\uff0c\u4ee4N=pq</li> <li>\u6c42N\u7684\u6b27\u62c9\u51fd\u6570\u503cr\uff1a\\(r=\\phi(N)=\\phi(p)\\phi(q)=(p-1)(q-1)\\)</li> <li>\u9009\u62e9\u5c0f\u4e8er\u7684\u6b63\u6570e\uff0c\u4f7f\u5f97\\(\\gcd(e,r)=1\\)</li> <li>\u4f7f\u7528exgcd\u6c42\u5f97e\u5173\u4e8er\u7684\u9006\u5143\uff08\u7531\u4e8e\u5176\u4e0er\u4e92\u8d28\uff0c\u56e0\u6b64e\u7684\u9006\u5143\u5b58\u5728\uff09\uff0c\u8bb0\u4e3ad</li> </ol> <p>\u81f3\u6b64\uff0c\\((N,d)\\)\u4e3a\u79c1\u94a5\u3001\\((N,e)\\)\u4e3a\u516c\u94a5\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_18","title":"\u52a0\u5bc6","text":"<p>\u5047\u8bbe\u8981\u52a0\u5bc6\u7684\u5185\u5bb9\u4e3an\uff08n&lt;N\uff09\uff0c\u5219\u52a0\u5bc6\u540e\u7684\u660e\u6587c\u4e3a\uff1a $$ c\\equiv n^e \\pmod N $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_19","title":"\u89e3\u5bc6","text":"<p>\u62e5\u6709\u79c1\u94a5d\u548c\u660e\u6587c\uff0c\u5c31\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u5f0f\u5b50\u89e3\u5bc6\uff1a $$ n\\equiv c^{d} \\pmod N $$ \u539f\u7406\uff1a $$ c^d\\equiv n^{ed} \\pmod N $$ \u800c\\(ed\\equiv 1 \\pmod r\\)\uff0c\u5219\\(ed=1+hr=1+h\\phi(N)\\)\uff0c\u4ece\u800c $$ n^{ed}\\equiv n\\cdot (n<sup>{\\phi(N)})</sup>h \\pmod N $$ \u7531\u6b27\u62c9\u5b9a\u7406\u53ef\u77e5\\(n^{\\phi(N)}\\equiv 1 \\pmod N\\)\uff08\u5982\u679cn\u548cN\u4e92\u8d28\uff09\uff0c\u90a3\u4e48\u53ef\u5f97</p> \\[ n^{ed}\\equiv n \\pmod N \\] <p>\u5982\u679c\u4e0d\u4e92\u8d28\uff0c\u8bbe\\(n=kp&lt;N,\\gcd(n,q)=1\\)\uff0c\u5219 $$ n^{ed}\\equiv (kp)^{ed}\\equiv 0\\equiv n \\pmod p\\ n^{ed}\\equiv n^{ed-1}\\cdot n=({n<sup>{\\phi(N)}})</sup>hn\\equiv1^hn=n\\pmod q $$ \u6839\u636e\u540c\u4f59\u6027\u8d289\uff0c\u5f97\u5230 $$ n^{ed}=n \\pmod {pq} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#bertrands-postulate","title":"Bertrand's postulate \u4f2f\u7279\u5170\u5207\u6bd4\u96ea\u592b\uff08\u5047\u8bbe\uff09\u5b9a\u7406","text":"<p>\u5bf9\u4e8e\u4efb\u610f\u6574\u6570\\(n&gt;3\\)\uff0c\u5b58\u5728\u8d28\u6570p\uff1a $$ n&lt;p&lt;2n-2 $$ \u5f31\u5316\u7248\u672c\uff1a $$ n&lt;p&lt;2n $$ \u5f3a\u5316\u7248\u672c\uff1a\u5bf9\u4e8e\\(n&gt;25\\)\uff0c\u5b58\u5728\u8d28\u6570p\uff1a $$ n&lt;p&lt;(1+\\frac 15)n $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_20","title":"\u535a\u5f08\u8bba","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#nimsgmulti-sg","title":"Nim\u3001SG\u3001Multi-SG","text":"<p>Nim\u5148\u624b\u5fc5\u80dc\uff1a\u5f02\u6216\u548c\u4e0d\u4e3a0</p> <p>SG\uff1a\\(sg(x)=\\text{mex}(sg(y_1),\\cdots)\\)</p> <p>Multi-SG: \u82e5\u5e72\u4e2aICG\u7684\u548c\u7b49\u4e8e\u6bcf\u4e2aICG\u7684sg\u503c\u5f02\u6216\u548c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#anti-sganti-nim","title":"Anti-SG\u3001Anti-Nim","text":"<p>\u53d6\u5f97\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u8f93\u3002</p> <p>\u5148\u624b\u5fc5\u80dc\uff1a</p> <ol> <li>sg\u22600\uff0c\u4e14\u6709\u5355\u4e00\u6e38\u620fsg&gt;1;</li> <li>sg=0\uff0c\u4e14\u65e0\u5355\u4e00\u6e38\u620fsg&gt;1; \uff08\u4e5f\u5373\u6240\u6709\u6e38\u620fsg=1\uff09</li> </ol>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#bashanti-bash","title":"Bash\u3001Anti-Bash","text":"<p>\u4e00\u5806\uff08n\u4e2a\uff09\u77f3\u5934\uff0c\u80fd\u62ff1\u5230m\u4e2a\uff0c\u4e0d\u80fd\u62ff\u7684\u8f93\u3002</p> <p>Bash\u5148\u624b\u5fc5\u80dc\uff1a\\(n\\%(m+1)\\neq0\\)</p> <p>\u53cdBash\u5148\u624b\u5fc5\u80dc\uff1a\\((n-1)\\%(m+1)\\neq0\\)</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#laskers-nim","title":"Lasker's Nim","text":"<p>n\u5806\u77f3\u5934\uff0c\u5bf9\u4e00\u5806\u77f3\u5934\u53ef\u4ee5\u7528nim\u7684\u53d6\u6cd5\u6216\u8005\u5206\u6210\u4e24\u5806\u3002</p> <p>\u5355\u4e00\u6e38\u620f\u7684SG\u51fd\u6570\uff1a $$ sg(x)=\\begin{cases} x-1, &amp; x\\%4==0\\ x, &amp; x\\%4==1or2\\ x+1, &amp; x\\%4==3 \\end{cases} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#every-sg","title":"Every-SG","text":"<p>\u672a\u7ed3\u675f\u7684\u5355\u4e00\u6e38\u620f\u5fc5\u987b\u52a8\u4e00\u6b65\u3002</p> <p>\u67d0\u4e2a\u5355\u4e00\u6e38\u620f\u7684step\uff1a $$ step(x)=\\begin{cases} 0, &amp; \\text{end}\\ \\max(step(y))+1, &amp; sg(x)\\neq0<sub>and</sub>sg(y)=0\\ \\min(step(y))+1, &amp; sg(x)=0\\ \\end{cases} $$ \u5148\u624b\u5fc5\u80dc\uff1a\\(\\max(step(x))\\%2==1\\)</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_21","title":"\u9636\u68af\u535a\u5f08","text":"<p>\u9636\u68af\u4e0a\u6709\u82e5\u5e72\u77f3\u5934\uff0c\u6bcf\u6b21\u9009\u4e00\u4e2a\u9636\u68af\u4e0a\u7684\u81f3\u5c11\u4e00\u4e2a\u77f3\u5934\u79fb\u52a8\u5230\u4e0b\u4e00\u5c42\uff0c\u4e0d\u80fd\u79fb\u52a8\u7684\u8f93\u3002</p> <p>\u65b9\u6cd5\uff1a\u5947\u6570\u53f0\u9636\u770b\u505a\u5355\u4e2aNim\u6e38\u620f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_22","title":"\u786c\u5e01\u53cd\u8f6c","text":"<ul> <li>N\u679a\u786c\u5e01\u6392\u6210\u4e00\u6392\uff0c\u6709\u7684\u6b63\u9762\u671d\u4e0a\uff0c\u6709\u7684\u53cd\u9762\u671d\u4e0a\u3002\u6211\u4eec\u4ece\u5de6\u5f00   \u59cb\u5bf9\u786c\u5e01\u63091\u5230N\u7f16\u53f7\u3002</li> <li>Alice\u548cBob\u8f6e\u6d41\u6839\u636e\u67d0\u4e9b\u7ea6\u675f\u7ffb\u786c\u5e01\uff08\u5982\uff1a\u6bcf\u6b21\u53ea\u80fd\u7ffb\u4e00\u6216\u4e24\u679a\uff0c\u6216\u8005\u6bcf   \u6b21\u53ea\u80fd\u7ffb\u8fde\u7eed\u7684\u51e0\u679a\uff09\uff0c\u4f46\u4ed6\u6240\u7ffb\u52a8\u7684\u786c\u5e01\u4e2d\uff0c\u6700\u53f3\u8fb9\u7684\u5fc5\u987b\u662f   \u4ece\u6b63\u9762\u7ffb\u5230\u53cd\u9762\u3002</li> <li>\u8c01\u4e0d\u80fd\u7ffb\u8c01\u8f93\u3002</li> </ul> <p>\u65b9\u6cd5\uff1a\u5c40\u9762\u7684SG\u503c\u4e3a\u5c40\u9762\u4e2d\u6bcf\u4e2a\u6b63\u9762\u671d\u4e0a\u7684\u68cb\u5b50\u5355\u4e00\u5b58\u5728\u65f6\u7684SG\u503c\u7684\u5f02\u6216\u548c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_23","title":"\u6811\u4e0a\u5220\u8fb9","text":"<p>\u53f6\u5b50\u8282\u70b9\u7684sg\u503c\u4e3a0\uff0c\u975e\u53f6\u5b50\u8282\u70b9\u7684sg\uff1a $$ sg(x)=\\sum_{\\oplus}(sg(y)+1) $$ \u5176\u4ed6\u7684\u5f85\u8865\u5145\u2026\u2026</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_24","title":"\u5a01\u4f50\u592b\u535a\u5f08","text":"<p>\u4e24\u4eba\u8f6e\u6d41\u53d6\u4e24\u5806\u7b79\u7801\uff0c\u5176\u4e2d\u53d6\u6cd5\u6709\u4e24\u79cd\uff1a\u53d6\u8d70\u4e00\u5806\u4e2d\u4efb\u610f\u4e2a\u7b79\u7801\uff0c\u6216\u4ece\u4e24\u5806\u4e2d\u53d6\u8d70\u76f8\u540c\u6570\u76ee\u7684\u7b79\u7801\u3002\u53d6\u5b8c\u6240\u6709\u7b79\u7801\u7684\u4e00\u65b9\u83b7\u80dc\u3002</p> <p>\u524d\u82e5\u5e72\u4e2a\u5947\u5f02\u5c40\u52bf\uff1a\uff080\uff0c0\uff09\u3001\uff081\uff0c2\uff09\u3001\uff083\uff0c5\uff09\u3001\uff084\uff0c7\uff09\u3001\uff086\uff0c10\uff09</p> <ul> <li>\u4efb\u4f55\u4e00\u4e2a\u81ea\u7136\u6570\u90fd\u5305\u542b\u5728\u552f\u4e00\u4e00\u4e2a\u5947\u5f02\u5c40\u52bf\uff08\u5148\u8d25\uff09\u4e2d</li> <li>x\u4e3a\u524dk\u4e2a\u5947\u5f02\u5c40\u52bf\u4e2d\u672a\u51fa\u73b0\u7684\u6700\u5c0f\u6b63\u6574\u6570\uff0c\u5219\uff08x\uff0cy\uff09\u4e2d\u7684y=x+k</li> </ul> <p>\u5c40\u9762\uff08x\uff0cy\uff09\uff08x&lt;y\uff09\u5148\u624b\u5fc5\u8d25\uff1a $$ (y-x)\\frac{\\sqrt5+1}{2}=x $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_25","title":"\u6590\u6ce2\u90a3\u5951\u535a\u5f08","text":"<p>\u4e00\u5806\u77f3\u5b50\u6709n\u4e2a\uff0c\u4e24\u4eba\u8f6e\u6d41\u53d6\uff0c\u5148\u53d6\u8005\u7b2c1\u6b21\u53ef\u4ee5\u53d6\u4efb\u610f\u591a\u4e2a\uff0c\u4f46\u4e0d\u80fd\u5168\u90e8\u53d6\u5b8c\uff0c\u4ee5\u540e\u6bcf\u6b21\u53d6\u7684\u77f3\u5b50\u6570\u4e0d\u80fd\u8d85\u8fc7\u4e0a\u6b21\u53d6\u5b50\u6570\u76842\u500d\u3002\u53d6\u5b8c\u8005\u80dc\u3002</p> <p>\u5148\u624b\u5fc5\u8d25\uff1a\u77f3\u5934\u6570\u91cf\u662f\u6590\u6ce2\u90a3\u5951\u6570</p> <ul> <li>\u4efb\u4f55\u6570\u53ef\u4ee5\u5206\u89e3\u6210\u82e5\u5e72\u4e0d\u8fde\u7eed\u6590\u6ce2\u90a3\u5951\u6570\u7684\u548c</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_26","title":"\u7ec4\u5408\u6570\u5b66","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_27","title":"\u7ec4\u5408\u6570","text":"<p>\u6052\u7b49\u5f0f\uff1a</p> <ul> <li>\u659c\u7ebf\u52a0\u548c\u7b49\u4e8e\u659c\u7ebf\u672b\u7aef\u6b63\u4e0b\u65b9\u7684\u6570</li> </ul> \\[ \\sum_{r=0}^k \\binom {n+r-1}r = \\binom {n+k}k \\] <ul> <li>\u540c\u884c\u52a0\u548c</li> </ul> \\[ \\sum_{r=0}^n \\binom nr = 2^{n} \\] <ul> <li>\u540c\u5217\u76f8\u52a0   $$   \\sum_{r=m}^{n} \\binom{r}{m}=\\binom{n+1}{m+1}   $$</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_28","title":"\u9694\u677f\u6cd5","text":"<p>n\u4e2a\u7403\u653e\u5165k\u4e2a\u76d2\u5b50\u4e2d\u3002\uff08\u6ce8\u610fk\u662f\u76d2\u5b50\u6570\u4e0d\u662f\u677f\u5b50\u6570\uff09</p> <p>https://zh.wikipedia.org/wiki/%E9%9A%94%E6%9D%BF%E6%B3%95</p> <p>\u4e0d\u5141\u8bb8\u7a7a\u76d2\uff1a\u8fd9\u79cd\u653e\u6cd5\u4e0d\u5141\u8bb8\u653e\u5c06\u677f\u5b50\u5728\u4e00\u5217\u7403\u7684\u6700\u5de6\u7aef\u548c\u6700\u53f3\u7aef $$ \\binom{n-1}{k-1} $$ \u5141\u8bb8\u7a7a\u76d2\uff1a\u4e5f\u5373\u5141\u8bb8\u591a\u4e2a\u677f\u5b50\u63d2\u5728\u540c\u4e00\u4e2a\u7a7a\u9699\u4e4b\u95f4\uff08\u5305\u62ec\u6700\u5de6\u3001\u53f3\u7aef\uff09\u3002\u7b49\u4ef7\u4e8e\u5411n+k\u4e2a\u7403\u4e2d\u63d2k-1\u4e2a\u677f\u5b50\uff08k\u4e2a\u76d2\u5b50\uff09\uff08\u4e0d\u5141\u8bb8\u7a7a\u76d2\uff09\u3002</p> <p>\u53ef\u4ee5\u8fd9\u4e48\u8003\u8651\uff1a\u5411n+k\u4e2a\u7403\u4e2d\u63d2k-1\u4e2a\u677f\u5b50\uff08\u4e0d\u5141\u8bb8\u7a7a\u76d2\uff09\u540e\u518d\u4ece\u6240\u6709\u76d2\u5b50\u4e2d\u5168\u90e8\u62ff\u6389\u4e00\u4e2a\u7403\uff0c\u5c31\u7b49\u4ef7\u4e8e\u73b0\u5728\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002 $$ \\binom{n+k-1}{k-1} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_29","title":"\u4e0d\u76f8\u90bb\u7ec4\u5408\u6570","text":"<p>\u4ecen\u4e2a\u7403\u4e2d\u9009r\u4e2a\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e92\u4e0d\u76f8\u90bb\uff0c\u95ee\u53d6\u6cd5\u603b\u6570\u3002 $$ C_{n-r+1}^r~(n\\ge2r-1) $$ \u8bc1\u660e\u65b9\u6cd5\uff1a{b1,...,br}\u662f\u4e00\u4e2a\u4e0d\u76f8\u90bb\u96c6\u5408\uff0c\u6784\u9020c1=b1,c2=b2-2,...,cr=br-r+1\uff0c\u5f97\u5230\u65b0\u7684\u96c6\u5408{c1,c2,...,cr}\uff0c\u7531\u4e8eb\u4e92\u4e0d\u76f8\u90bb\uff0c\u8fd9\u79cd\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u8bc1c\u96c6\u5408\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u4e14\u5bf9\u4e8e\u4e0d\u540c\u7684b\u96c6\u5408\uff0cc\u96c6\u5408\u4e5f\u4e0d\u91cd\u590d\u3002\u8fd9\u5c31\u662f\u8bf4c\u548cb\u662f\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u3002\u800cc\u96c6\u5408\u7684\u610f\u4e49\u662f\u4ecen-r+1\u4e2a\u7403\u4e2d\u9009r\u4e2a\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_30","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7ec4\u5408\u6570\u8868\u793a","text":"\\[ F_n=C_{n-1}^{0}+C_{n-2}^{1}+\\dots+C_{n-i-1}^{i}\\\\ =\\sum_{i=0}^{(n+1)/2}C_{n-i-1}^{i} \\] <p>\u8bc1\u660e\u65b9\u6cd5\uff1a\u8003\u8651\u4e0a\u697c\u68af\u65f6+2\u7684\u6b21\u6570\u3002\u6bcf\u67091\u4e2a+2\uff0c\u53ef\u9009\u62e9\u7684\u4f59\u5730\u5c31\u51cf\u5c111\u3002 $$ 1+1+1+1\\ 1+1+2\\ 1+2+1\\ 2+1+1\\ 2+2 $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_31","title":"\u7b2c\u4e00\u7c7b\uff08\u65e0\u7b26\u53f7\uff09\u65af\u7279\u6797\u6570","text":"<p>n\u4e2a\uff08\u4e0d\u540c\uff09\u5143\u7d20\u5206\u6210k\u4e2a\u73af\u7684\u5206\u6cd5\u6570\u76ee $$ s(n,k)=\\begin{bmatrix} n\\k \\end{bmatrix}\\ s(0,0)=s(n,0)=s(0,n)=0\\ s(n+1,k)=ns(n,k)+s(n,k-1) $$ \u6027\u8d28\uff1a $$ s(n,1)=(n-1)!\\ s(n,2)=(n-1)!\\sum_{i=1}^{n-1}\\frac 1i $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_32","title":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570","text":"<p>n\u4e2a\uff08\u4e0d\u540c\uff09\u5143\u7d20\u5206\u6210k\u4e2a\u975e\u7a7a\u5b50\u96c6\u7684\u65b9\u6cd5\u6570\u76ee $$ S(n,k)=\\begin{Bmatrix} n\\k \\end{Bmatrix}\\ \\begin{Bmatrix} 0\\0 \\end{Bmatrix}=1, \\begin{Bmatrix} 0\\n \\end{Bmatrix}= \\begin{Bmatrix} n\\0 \\end{Bmatrix}=0 \\ \\begin{Bmatrix} n\\k \\end{Bmatrix}=\\begin{Bmatrix} n-1\\k-1 \\end{Bmatrix}+k\\begin{Bmatrix} n-1\\k \\end{Bmatrix} $$ \u6027\u8d28\uff1a\uff08\u6ca1\u4ec0\u4e48\u5375\u7528= =\uff09 $$ \\begin{Bmatrix} n\\k \\end{Bmatrix}=0~(k&gt;n)\\ \\begin{Bmatrix} n\\n \\end{Bmatrix}=1\\ \\begin{Bmatrix} n\\2 \\end{Bmatrix}=2^{n-1}-1\\ \\begin{Bmatrix} n\\3 \\end{Bmatrix}=\\frac12(3<sup>{n-1}+1)-2</sup> $$ \u901a\u9879\u516c\u5f0f\uff1a $$ \\begin{Bmatrix} n\\k \\end{Bmatrix}=\\frac1{k!}\\sum_{i=0}<sup>k(-1)</sup>i{k\\choose i}(k-i)^n\\ =\\begin{align}\\left{\\begin{matrix}n\\m\\end{matrix}\\right}=\\sum\\limits_{k=0}<sup>m\\dfrac{(-1)</sup>k}{k!}\\dfrac{(m-k)^n}{(m-k)!}\\end{align} $$ \u548c\u9012\u51cf\u9636\u4e58\u7684\u5173\u7cfb\uff1a $$ \\begin{align}x<sup>n=\\sum\\limits_{k=1}</sup>n\\left{\\begin{matrix}n\\k\\end{matrix}\\right}x^\\underline k\\end{align} $$</p> \\[ x^{\\overline n}=x(x+1)\\cdots(x+n-1)\\\\ x^{\\underline n}=x(x-1)\\cdots(x-n+1)\\\\ \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_33","title":"\u9519\u6392","text":"<p>\u7b80\u5316\u516c\u5f0f\uff1a $$ D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor $$ \u9012\u63a8\u516c\u5f0f\uff1a $$ D_n=nD_{n-1}+(-1)^n\\ D_n=(n-1)(D_{n-1}-D_{n-2})\\ (D_1=0,D_2=1) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#dilworth","title":"Dilworth\u5b9a\u7406","text":"<p>\u5b9a\u7406\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u504f\u5e8f\u96c6\uff0c\u5176\u6700\u5c11\u94fe\u5212\u5206\u6570\u7b49\u4e8e\u5176\u6700\u957f\u53cd\u94fe\u7684\u957f\u5ea6\u3002</p> <p>\u5bf9\u5076\u5b9a\u7406\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u504f\u5e8f\u96c6\uff0c\u5176\u6700\u5c11\u53cd\u94fe\u5212\u5206\u6570\u7b49\u4e8e\u5176\u6700\u957f\u94fe\u7684\u957f\u5ea6\u3002</p> <ul> <li>\u6700\u5c11\u4e0a\u5347\u5b50\u5e8f\u5217\u5212\u5206\u6570=\u6700\u957f\u4e0d\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_34","title":"\u2b50\u653e\u7403\u95ee\u9898","text":"<p>1\u3001\u7403\u540c\uff0c\u76d2\u540c\uff0c\u76d2\u4e0d\u53ef\u4ee5\u4e3a\u7a7aPm\uff08N\uff09--\u8fd9\u7b26\u53f7\u8868\u793a\u90e8\u5206\u6570\u4e3am\u7684N-\u5206\u62c6\u7684\u4e2a\u6570\uff0cm\u662fP\u7684\u4e0b\u6807\uff0c\u4e3a\u4e86\u597d\u770b\u6211\u5c06\u5927\u5199\u7684M\u5f04\u6210\u5c0f\u5199</p> <p>2\u3001\u7403\u540c\uff0c\u76d2\u540c\uff0c\u76d2\u53ef\u4ee5\u4e3a\u7a7a Pm\uff08N+M\uff09--\u4e3a\u4ec0\u4e48\u8981\u52a0M\uff0c\u4e0e4\u4e3a\u4ec0\u4e48\u8981\u57283\u7684\u57fa\u7840\u4e0a\u52a0M\u662f\u4e00\u6837\u7684\uff0c\u5c31\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u4e3a\u7a7a</p> <p>3\u3001\u7403\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u76d2\u4e0d\u53ef\u4ee5\u4e3a\u7a7aC(N-1, M-1)</p> <p>4\u3001\u7403\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u76d2\u53ef\u4ee5\u4e3a\u7a7a   C(N+M-1, M-1)</p> <p>5\u3001\u7403\u4e0d\u540c\uff0c\u76d2\u540c\uff0c\u76d2\u4e0d\u53ef\u4ee5\u4e3a\u7a7aS(N, M) --\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570</p> <p>6\u3001\u7403\u4e0d\u540c\uff0c\u76d2\u540c\uff0c\u76d2\u53ef\u4ee5\u4e3a\u7a7a   S (N, 1) + S(N, 2) + S(N, 3) + ... + S(N, M)</p> <p>7\u3001\u7403\u4e0d\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u76d2\u4e0d\u53ef\u4ee5\u4e3a\u7a7aM! * S(N, M)</p> <p>8\u3001\u7403\u4e0d\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u76d2\u53ef\u4ee5\u4e3a\u7a7a M^N--\u8868\u793aM\u7684N\u6b21\u65b9</p> <p>1\u30018\u4e2a\u76f8\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6bcf\u76d2\u81f3\u5c11\u4e00\u4e2a\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5\uff1f \u516c\u5f0f\uff1a\u7403\u76f8\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u62c6\u5206\u516c\u5f0f\u3002 P4(8)=P1(4)+P2(4)+P3(4)+P4(4) =1+2+1+1 =5</p> <p>2\u30018\u4e2a\u76f8\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6bcf\u76d2\u81f3\u5c11\u4e00\u4e2a\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5\uff1f \u516c\u5f0f\uff1a\u7403\u76f8\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u63d2\u677f\u6cd5\u3002 C(8-1,4-1) =C(7,3) =76\u215a =35</p> <p>3\u30018\u4e2a\u4e0d\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6bcf\u76d2\u81f3\u5c11\u4e00\u4e2a\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5\uff1f \u516c\u5f0f\uff1a\u7403\u4e0d\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u4e0d\u4e3a\u7a7a\uff0c\u9636\u4e58\u548c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u7403\u662f\u884c\u53f7\uff0c\u76d2\u5b50\u662f\u5217\u53f7\u3002 M!S(N,M) =4! * S(8,4) =241701 =40824</p> <p>4\u30018\u4e2a\u4e0d\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6bcf\u76d2\u81f3\u5c11\u4e00\u4e2a\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5 \uff1f \u516c\u5f0f\uff1a\u7403\u4e0d\u540c\uff0c\u76d2\u540c\uff0c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u4e3a\u7a7a\u662f\u7d2f\u52a0\uff0c\u4e0d\u4e3a\u7a7a\u662f\u76f4\u63a5\u53d6\u6570\uff0c\u7403\u662f\u884c\u53f7\uff0c\u76d2\u5b50\u662f\u5217\u53f7\u3002 S(N,M) =S(8,4) =1701</p> <p>5\u30018\u4e2a\u76f8\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5 \uff1f \u516c\u5f0f\uff1a\u7403\u540c\uff0c\u76d2\u540c\uff0c\u4e3a\u7a7a\uff0c\u62c6\u5206\u516c\u5f0f\u3002 P4(8+4)=P4(12) =P1(8)+P2(8)+P3(8)+P4(8) =1+4+(P1(5)+P2(5)+P3(5))+(P1(4)+P2(4)+P3(4)+P4(4)) =1+4+(1+2+(P1(2)+P2(2))+(1+2+1+1) =1+4+5+5 =15</p> <p>6\u30018\u4e2a\u76f8\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5\uff1f \u516c\u5f0f\uff1a\u7403\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u63d2\u677f\u6cd5\u3002 C(11,3) =11109/6=15*11=165</p> <p>7\u30018\u4e2a\u4e0d\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5 \uff1f \u516c\u5f0f\uff1a\u7403\u4e0d\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u662fM^N 4<sup>8=4</sup>44<sup>4=2</sup>82^8=256*256=65536</p> <p>8\u30018\u4e2a\u4e0d\u540c\u7684\u7403\u653e\u8fdb4\u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5\uff1f \u516c\u5f0f\uff1a\u7403\u4e0d\u540c\uff0c\u76d2\u540c\uff0c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u4e3a\u7a7a\uff0c\u662f\u7d2f\u52a0 S (N, 1) + S(N, 2) + S(N, 3) + ... + S(N, M) =S\uff088,1)+S\uff088,2)+S\uff088,3)+S\uff088,4) =1+127+966+1701 =2795</p> <p>9\u30018\u4e2a\u4e0d\u540c\u7684\u7403\u5e73\u5747\u5206\u7ed94\u4e2a\u5c0f\u670b\u53cb\uff0c\u6709\u51e0\u79cd\u5206\u6cd5\uff1f \u4ece8\u4e2a\u7403\u4e2d\u53d62\u4e2a\u5206\u7ed9\u7b2c1\u4e2a\u5c0f\u670b\u53cb\uff0c\u4ece\u5269\u4e0b6\u4e2a\u4e2d\u53d62\u4e2a\u6765\u5206\u7ed9\u7b2c\u4e8c\u4e2a\u5c0f\u670b\u53cb\u3002\u3002\u3002 C(8,2)C(6,2)C(4,2)*C(2,2) = 2520</p> <p>10\u30018\u4e2a\u4e0d\u540c\u7684\u7403\u5e73\u5747\u5206\u62104\u5806\uff0c\u6709\u51e0\u79cd\u5206\u6cd5\uff1f C(8,2)C(6,2)C(4,2)*C(2,2) / 4!= 2520/24 =105</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_35","title":"\u7ebf\u6027\u4ee3\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_36","title":"\u9ad8\u65af\u6d88\u5143","text":"<p>P2962 [USACO09NOV]Lights G</p> <p>\u9898\u610f\uff1a\u7ed9n\u4e2a\u70b9m\u6761\u8fb9\uff0cn\u4e2a\u70b9\u4e00\u5f00\u59cb\u5168\u662f0\uff0c\u6309\u4e0b\u4e00\u4e2a\u70b9\u4f7f\u5f97\u8be5\u70b9\u548c\u5176\u4ed6\u4e0e\u8be5\u70b9\u76f8\u8fde\u7684\u70b9\u7684\u72b6\u6001\u6539\u53d8\uff08\u5f02\u6216\uff09\uff0c\u6c42\u4f7f\u5f97\u6240\u6709\u70b9\u5168\u4e3a1\u7684\u6700\u5c0f\u6309\u4e0b\u6b21\u6570\u3002</p> <p>\u89e3\uff1a\u6839\u636e\u70b9\u7684\u5173\u7cfb\u5217\u65b9\u7a0b\uff08\u53ea\u662f\u52a0\u6cd5\u6539\u4e3a\u4e58\u6cd5\uff09\uff0c\u7136\u540e\u505a\u9ad8\u65af\u6d88\u5143\uff0cdfs\u6c42\u51fa\u5404\u4e2ax\u4e3a1\u8fd8\u662f\u4e3a0\uff0c\u66f4\u65b0\u7b54\u6848</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_37","title":"\u77e9\u9635\u4f18\u5316","text":"<p>P2044 [NOI2012]\u968f\u673a\u6570\u751f\u6210\u5668</p> <p>\u9898\u610f\uff1a\u6c42 $$ X_n\\mod g $$ \u5176\u4e2d $$ X_{n+1}=(aX_n+c)\\mod m $$ \u89e3\uff1a\u8bbe $$ A=\\begin{bmatrix} X_n &amp; a_{11}\\ a_{21} &amp; a_{22} \\end{bmatrix}\\ B=\\begin{bmatrix} b_{11} &amp; b_{11}\\ b_{21} &amp; b_{22} \\end{bmatrix}\\ $$ AB\u4e58\u79ef\u5e94\u8be5\u4ecd\u662fA\u7684\u5f62\u5f0f\uff0c\u53ea\u4e0d\u8fc7X_n\u53d8\u4e3aX_{n+1}=aX_n+c\uff0c\u6839\u636e\u5173\u7cfb\u53ef\u4ee5\u6c42\u51fa\u77e9\u9635\u4e2d\u7684\u5f85\u5b9a\u7cfb\u6570\u4e3a $$ A=\\begin{bmatrix} X_0 &amp; 1\\ 0 &amp; 0 \\end{bmatrix}\\ B=\\begin{bmatrix} a &amp; 0\\ c &amp; 1 \\end{bmatrix}\\ $$ \u5957\u7528\u77e9\u9635\u5feb\u901f\u5e42\uff08\u5176\u4e2d\u4e58\u6cd5\u7528\u5feb\u901f\u4e58\u6cd5\u4ee5\u9632\u6b62\u7206longlong\uff09\u5373\u53ef</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_38","title":"\u5f02\u6216","text":"<p>\u5355\u4f4d\u5143\uff1a0</p> <p>\u9006\u5143\uff1a\\(x^{-1}=x\\)</p> <p>\u96f6\u5143\uff1a\u4e0d\u5b58\u5728</p> <p>\u8fd0\u7b97\u5f8b\uff1a\u4ea4\u6362\u5f8b\u3001\u7ed3\u5408\u5f8b</p> <p>\u6709\u5173\u516c\u5f0f\uff1a</p> <ul> <li>\\(a\\and b=a|b-a\\oplus b\\)</li> <li>\\(a+b=((a\\&amp;b)&lt;&lt;1 )|(a\\oplus b)\\)</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_39","title":"\u7ebf\u6027\u57fa","text":"<p>\u53ef\u5728\u5bf9\u6570\u65f6\u95f4\u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u8be2\u96c6\u5408\u6700\u5927\u503c\u548c\u6700\u5c0f\u5f02\u6216\u548c\u7684\u64cd\u4f5c\u3002</p> <p>\u5b8c\u6210\u91cd\u6784\u64cd\u4f5c\u540e\uff08\u82b1\u8d39\u5bf9\u6570\u5e73\u65b9\u7684\u65f6\u95f4\uff09\u53ef\u8f6c\u6362\u4e3a\u5f62\u4f3c\u4e8e\u6700\u7b80\u884c\u9636\u68af\u578b\u77e9\u9635\u7684\u5f62\u5f0f\uff0c\u4e4b\u540e\u53ef\u5728\u5bf9\u6570\u65f6\u95f4\u5185\u67e5\u8be2\u96c6\u5408\u5185\u7b2ck\u5927\u5f02\u6216\u548c\u3002</p> <p>\u6700\u5927\u503c</p> <ul> <li>\uff08restructure\u524d\uff09\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u4e2a\u6570\u5f02\u6216\u8fdb\u6765\u4f1a\u4e0d\u4f1a\u4f7f\u5f97\u7b54\u6848\u66f4\u5927\uff0c\u5982\u679c\u4f1a\u5c31\u5f02\u6216\u8fdb\u6765\u3002</li> <li>\u5982\u679c\u9700\u8981\u5728\u5f02\u6216\u521d\u503c\u4e0d\u4e3a\u96f6\u7684\u60c5\u51b5\u4e0b\u53d6\u5f97\u6700\u5927\u503c\uff0c\u53ea\u9700\u8981\u66f4\u6539ans\u7684\u521d\u59cb\u503c\u5373\u53ef\u3002</li> </ul> <p>\u6700\u5c0f\u503c\uff1a</p> <ul> <li>\u76f4\u63a5\u8d2a\u5fc3\u62ff\u7ebf\u6027\u57fa\u4e2d\u6700\u5c0f\u7684\u6570\uff08\u5f53\u7136\uff0c\u9700\u8981\u7279\u5224\u7ebf\u6027\u57fa\u662f\u5426\u53ef\u83b7\u5f970\uff09</li> <li>-</li> </ul> <p>HDOJ 3949 \u7b2ck\u5927\u5f02\u6216\u548c</p> <p>\u6a21\u677f\u9898</p> <p>P4151 \u6700\u5927xor\u8def\u5f84</p> <p>\u7ed9\u5b9a\u65e0\u5411\u56fe\uff08\u53ef\u80fd\u6709\u91cd\u8fb9\u548c\u81ea\u73af\uff09\uff0c\u6c421\u5230n\u53f7\u70b9\u7684\u6700\u5927xor\u8def\u5f84\u548c\u3002</p> <p>\u89e3\u6cd5\uff1a\u7531\u4e8e\u5f02\u6216\u7684\u6027\u8d28\uff0c\u6bcf\u6761\u8fb9\u6700\u591a\u8d70\u4e00\u6b21\uff0c\u4e14\u73af\u4e0a\u8f6c\u4e00\u5708\u80fd\u56de\u5230\u539f\u70b9\uff0c\u4ece\u539f\u70b9\u518d\u7ee7\u7eed\u8d70\u5c31\u76f8\u5f53\u4e8e\u767d\u5ad6\u4e86\u73af\u4e0a\u7684\u6743\u503c\u548c\u3002\u56e0\u6b64\u968f\u4fbf\u627e\u4e00\u6761\u4ece1\u5230n\u7684\u8def\u5f84\uff0c\u8fd9\u65f6\u9898\u76ee\u7b49\u4ef7\u4e8e\u9009\u51e0\u4e2a\u7b80\u5355\u73af\u548c\u73b0\u6709\u7b54\u6848\u5f02\u6216\u4f7f\u5f97\u7b54\u6848\u6700\u5927\uff0c\u518d\u7528dfs\u627e\u5230\u56fe\u4e2d\u6240\u6709\u7b80\u5355\u73af\u5e76\u628a\u7b80\u5355\u73af\u7684\u5f02\u6216\u548c\u6dfb\u52a0\u5230\u7ebf\u6027\u57fa\u4e2d\u5373\u53ef\u3002</p> <p>P4301 \u65b0nim\u6e38\u620f</p> <p>\u5728\u7b2c\u4e00\u4e2a\u56de\u5408\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6e38\u620f\u8005\u53ef\u4ee5\u76f4\u63a5\u62ff\u8d70\u82e5\u5e72\u4e2a\u6574\u5806\u7684\u706b\u67f4\u3002\u53ef\u4ee5\u4e00\u5806\u90fd\u4e0d\u62ff\uff0c\u4f46\u4e0d\u53ef\u4ee5\u5168\u90e8\u62ff\u8d70\u3002\u7b2c\u4e8c\u56de\u5408\u4e5f\u4e00\u6837\uff0c\u7b2c\u4e8c\u4e2a\u6e38\u620f\u8005\u4e5f\u6709\u8fd9\u6837\u4e00\u6b21\u673a\u4f1a\u3002\u4ece\u7b2c\u4e09\u4e2a\u56de\u5408\uff08\u53c8\u8f6e\u5230\u7b2c\u4e00\u4e2a\u6e38\u620f\u8005\uff09\u5f00\u59cb\uff0c\u89c4\u5219\u548c Nim \u6e38\u620f\u4e00\u6837\u3002</p> <p>\u5982\u679c\u4f60\u5148\u62ff\uff0c\u600e\u6837\u624d\u80fd\u4fdd\u8bc1\u83b7\u80dc\uff1f\u5982\u679c\u53ef\u4ee5\u83b7\u80dc\u7684\u8bdd\uff0c\u8fd8\u8981\u8ba9\u7b2c\u4e00\u56de\u5408\u62ff\u7684\u706b\u67f4\u603b\u6570\u5c3d\u91cf\u5c0f\u3002</p> <p>\u89e3\u6cd5\uff1a\u6392\u5e8f\u7136\u540e\u5012\u7740\uff08\u4ece\u5927\u5230\u5c0f\uff09\u63d2\u5165\u7ebf\u6027\u57fa\uff0c\u5982\u679c\u63d2\u5165\u5931\u8d25\u5c31\u7d2f\u52a0\u5230\u7b54\u6848\u4e2d\u3002\uff08\u8fd9\u9898\u4e0d\u53ef\u80fd\u8f93\u51fa-1\uff09</p> <p>P4869 albus\u5c31\u662f\u8981\u7b2c\u4e00\u4e2a\u51fa\u573a</p> <p>\u7ed9n\u4e2a\u6570ai\u548c\u4e00\u4e2a\u6570q\uff0cn\u4e2a\u6570\u7684\uff08\u591a\u91cd\u96c6\u7684\uff09\u5b50\u96c6\u5f02\u6216\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5f97\u5e8f\u5217b\uff0c\u6c42q\u5728b\u4e2d\u9996\u6b21\u51fa\u73b0\u7684\u4e0b\u6807\u3002</p> <p>\u89e3\u6cd5\uff1a\u5c06a\u4e2d\u7684\u6570\u5168\u90e8\u63d2\u5165\u7ebf\u6027\u57fa\u5e76restructure\uff0c\u5229\u7528\u4e8c\u5206\u5728\u7ebf\u6027\u57fa\u4e2d\u6c42\u5f97q\u7684\u6392\u540d\uff0c\u663e\u7136q\u5c31\u662fa\u53bb\u91cd\u540e\u5f97\u5230\u7684b'\u7684\u4e0b\u6807\u3002</p> <p>\u6839\u636e\u201c\u4e0d\u53bb\u91cd\u5f02\u6216\u96c6\u5408\u201d\u7684\u63a8\u8bba\uff0c\u4e0d\u53bb\u91cd\u5f02\u6216\u96c6\u5408\u5f97\u5230\u7684\u5e8f\u5217b'\uff0c\u5e94\u8be5\u662f\u53bb\u91cd\u5f02\u6216\u96c6\u5408b\u4e2d\u7684\u6bcf\u4e2a\u6570\u91cd\u590d\\(2^{n-lb.cnt}\\)\u6b21\u5f97\u5230\u7684\u3002\u56e0\u6b64\u5c06\u521a\u521a\u5f97\u5230\u7684\u4e0b\u6807\u51cf\u53bb1\uff0c\u4e58\u4e0a\u8fd9\u4e2a\u6570\uff0c\u518d\u52a01\uff0c\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_40","title":"\u751f\u6210\u51fd\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_41","title":"\u666e\u901a\u751f\u6210\u51fd\u6570","text":"<p>\u5e42\u7ea7\u6570\uff1a $$ F(x)=\\sum_{n=0}^\\infty a_nx^n $$</p> <ul> <li>\u5982\u679c\u5e8f\u5217a\u6709\u901a\u9879\u516c\u5f0f\uff0c\u90a3\u4e48\u5b83\u7684\u666e\u901a\u751f\u6210\u51fd\u6570\u7684\u7cfb\u6570\u5c31\u662f\u901a\u9879\u516c\u5f0f\u3002\u4f8b\u5982\\(\\(a=&lt;1,2,4,8,16,...&gt;\\)\\)\u7684\u751f\u6210\u51fd\u6570\u662f\\(\\(\\sum_{n\\ge 0} 2^nx^n\\)\\)</li> </ul> <p>\u52a0\u6cd5\uff1a $$ F(x)\\pm G(x)=\\sum_n (a_n\\pm b_n)x^n $$</p> <p>\u56e0\u6b64 \\(\\(F(x)\\pm G(x)\\)\\)\u662f\u5e8f\u5217\\(\\(&lt;a_n\\pm b_n&gt;\\)\\) \u7684\u666e\u901a\u751f\u6210\u51fd\u6570\u3002</p> <p>\u4e58\u6cd5\uff08\u5377\u79ef\uff09\uff1a $$ F(x)G(x)=\\sum_n x^n \\sum_{i=0}^na_ib_{n-i} $$ \u56e0\u6b64 \\(\\(F(x)G(x)\\)\\)\u662f\u5e8f\u5217\\(\\(&lt;\\sum_{i=0}^na_ib_{n-i}&gt;\\)\\) \u7684\u666e\u901a\u751f\u6210\u51fd\u6570\u3002</p> <p>\u5e38\u7528\u5c55\u5f00\uff1a</p> <p>\u7b49\u6bd4\u7ea7\u6570 $$ \\frac1{1-x}=\\sum_{n=0}^\\infty x^n\\ \\frac1{1-kx}=\\sum_{n=0}^\\infty k<sup>nx</sup>n $$ &lt;0,1,1,1,....&gt; $$ F(x)=\\frac x{1-x} $$ \u5076\u6570&lt;1,0,1,0,1,..&gt; $$ F(x)=\\frac 1{1-x^2} $$ \u7b49\u5dee&lt;1,2,3,4,...&gt; $$ F(x)=\\sum_{n\\ge1}nx<sup>{n-1}=(\\sum_{n\\ge1}x</sup>n)'=(\\frac{1}{1-x})'=\\frac1{(1-x)^2} $$ \u4e8c\u9879\u5f0f\\(\\(a_n=\\binom{m}{n}\\)\\) $$ F(x)=\\sum_{n\\ge0}\\binom{m}{n}x<sup>n=(1+x)</sup>m $$ \\(\\(a_n=\\binom{m+n}{n}\\)\\) $$ F(x)=\\frac{1}{(1-x)^{m+1}} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_42","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217","text":"<p>\u4e24\u79cd\u5c01\u95ed\u5f62\u5f0f\uff08\u7cfb\u6570\u5176\u5b9e\u5c31\u5bf9\u5e94\u901a\u9879\u516c\u5f0f\uff09\uff1a</p> <p>\u5f53\\(\\(a_0=0,a_1=1\\)\\)\u65f6\uff08\u4f7f\u7528\\(\\(\\frac{1}{1-kx}\\)\\)\u7684\u7ea7\u6570\u5c55\u5f00\uff09 $$ F(x)=xF(x)+x^2F(x)-a_0x+a_1x+a_0\\ \\Rightarrow F(x)=\\frac{x}{1-x-x^2}=\\frac{\\frac1{\\sqrt5}}{1-\\frac{1+\\sqrt5}{2}x}-\\frac{\\frac1{\\sqrt5}}{1-\\frac{1-\\sqrt5}{2}x}\\ =\\frac1{\\sqrt5}\\sum_{n=0}^\\infty x<sup>n((\\frac{1+\\sqrt5}{2})</sup>n-(\\frac{1-\\sqrt5}{2})^n) $$ \u5f53\\(\\(a_0=1,a_1=1\\)\\)\u65f6 $$ F(x)=\\frac{1}{1-x-x<sup>2}=\\sum_{n\\ge0}x</sup>n\\sum_{i=0}^n\\binom{n-i}{i} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_43","title":"\u5361\u7279\u5170\u6570","text":"\\[ H_n=\\sum_{i=0}^{n-1}H_iH_{n-i-1}~(n\\ge1)\\\\ H_0=H_1=1 \\] <p>\u751f\u6210\u51fd\u6570 $$ H(x)=\\sum_{n\\ge0}H_nx<sup>n=1+x\\sum_{n\\ge1}\\sum_{i=0}</sup>H_ix<sup>iH_{n-i-1}x</sup>\\ =1+x\\sum_{i\\ge0}H_ix<sup>i\\sum_{n\\ge0}H_nx</sup>n=1+xH(x)^2 $$ \u5f97 $$ H(x)=\\frac{1\\pm\\sqrt{1-4x}}{2x}=\\frac2{1\\mp\\sqrt{1-4x}} $$ \u53c8\\(\\(H(0)=1\\)\\)\uff0c\u56e0\u6b64\u53d6\u6b63\u6839\uff0c\u5219\u5229\u7528\u725b\u987f\u4e8c\u9879\u5f0f\u5b9a\u7406\u5c55\u5f00\\(\\(\\sqrt{1-4x}\\)\\)\uff0c\u7136\u540e\u518d\u4ee3\u56de\u53bb\u7ecf\u8fc7\u4e00\u756a\u8fd0\u7b97\u53ef\u5f97 $$ H(x)=\\frac1{2x}\\sum_{n\\ge1}\\binom{2n-1}{n}\\frac1{(2n-1)}2x<sup>n=\\cdots=\\sum_{n\\ge0}\\binom{2n}{n}\\frac1{n+1}x</sup>n $$</p> <p>BZOJ </p> <p>\u6709 n \u5806\u7cd6\u679c\u3002\u4e0d\u540c\u7684\u5806\u91cc\u7cd6\u679c\u7684\u79cd\u7c7b\u4e0d\u540c\uff08\u5373\u540c\u4e00\u4e2a\u5806\u91cc\u7684\u7cd6\u679c\u79cd\u7c7b\u662f\u76f8\u540c\u7684\uff0c\u4e0d\u540c\u7684\u5806\u91cc\u7684\u7cd6\u679c\u7684\u79cd\u7c7b\u662f\u4e0d\u540c\u7684\uff09\u3002\u7b2ci\u4e2a\u5806\u91cc\u6709 \u4e2a\u7cd6\u679c\u3002\u73b0\u5728\u8981\u5403\u6389\u81f3\u5c11a\u4e2a\u7cd6\u679c\uff0c\u4f46\u4e0d\u8d85\u8fc7b\u4e2a\u3002\u6c42\u6709\u591a\u5c11\u79cd\u65b9\u6848\u3002</p> \\[n\\le 10,0\\le a\\le b\\le 10^7,m_i\\le 10^6\\] <p>i\u5806\u5403j\u4e2a\u7684\u751f\u6210\u51fd\u6570 $$ F_i(x)=\\sum_{j=0}<sup>{m_i}x</sup>j=\\frac{1-x^{m_i+1}}{1-x} $$ \u8003\u8651\u6240\u6709\u5806\u5c31\u662f\u4e58\u8d77\u6765\uff0c\u5bf9\u5e94\u751f\u6210\u51fd\u6570 $$  G(x)=\\prod_{i=1}^n F_i(x)=(1-x)<sup>{-n}\\prod_{i=1}</sup>n(1-x^{m_i+1})  $$ \u5176\u4e2d $$ \\begin{aligned} (1-x)^{-n} &amp;=\\sum_{i\\ge 0}\\binom{-n}{i}(-x)^i\\ &amp;=\\sum_{i\\ge 0}\\binom{n-1+i}{i}x^i \\end{aligned} $$ \u53f3\u4fa7\u5f0f\u5b50\u5728n\u8f83\u5c0f\u65f6\u80fd\u591f\u66b4\u529b\u5c55\u5f00\uff0c\u8bbe\u5176\u5c55\u5f00\u540e\\(\\(x^k\\)\\)\u5bf9\u5e94\u7cfb\u6570\u4e3a\\(\\(c_k\\)\\)\uff0c\u52191~b\u7684\u7b54\u6848\u4e3a $$ \\sum_{k=0}<sup>nc_k\\sum_{i=0}</sup> $$ }\\binom{n-1+i}{i}=\\sum_{k=0}^nc_k\\binom{n+b-k}{n</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_44","title":"\u6307\u6570\u751f\u6210\u51fd\u6570","text":"\\[ \\hat F(x)=\\sum_{n}a_n\\frac{x^n}{n!} \\] <p>\u52a0\u6cd5\uff1a\u5bf9\u5e94\u9879\u7cfb\u6570\u76f8\u52a0</p> <p>\u4e58\u6cd5\uff08\u5377\u79ef\uff09\uff1a $$ \\hat F(x)\\hat G(x)=\\sum_{i\\ge0}a_i\\frac{x<sup>i}{i!}\\sum_{j\\ge0}b_j\\frac{x</sup>j}{j!}\\ =\\sum_{n\\ge0}x<sup>n\\sum_{i=0}</sup>na_ib_{n-i}\\frac1{i!(n-i)!}\\ =\\sum_{n\\ge0}\\frac{x<sup>n}{n!}\\sum_{i=0}</sup>na_ib_{n-i}\\binom{n}{i} $$ \u56e0\u6b64\u5176\u662f\u5e8f\u5217\\(\\(&lt;\\sum_{i=0}^n\\binom{n}{i}a_ib_{n-i}&gt;\\)\\)\u7684\u6307\u6570\u751f\u6210\u51fd\u6570</p> <p>\u5e38\u89c1\u5c55\u5f00\uff1a</p> \\[&lt;1,1,\\cdots&gt;$$ $$ \\hat F(x)=\\sum_{n\\ge0}\\frac{x^n}{n!}=e^x $$ \u7b49\u6bd4\u6570\u5217$$&lt;1,p,p^2,\\cdots&gt;$$ $$ \\hat F(x)=\\sum_{n\\ge0}p^n\\frac{x^n}{n!}=e^{xp} \\]"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_45","title":"\u5706\u6392\u5217","text":"<p>n\u4e2a\u9009r\u4e2a\u7684\u5706\u6392\u5217\uff1a\uff08\u5148\u7528\u666e\u901a\u7684\u6392\u5217\uff0c\u7136\u540e\u53bb\u9664\u8f6c1\u30012\u3001...\u3001r\u6b21\u7684\u60c5\u51b5\u5171r\u79cd\uff0c\u56e0\u6b64\u9664\u4ee5r\uff09 $$ Q(n,r)=\\frac{P(n,r)}{r}=\\frac{n!}{r(n-r)!} $$ \u7279\u522b\u5730\uff0cn\u4e2a\u6570\u7684\u5168\u5706\u6392\u5217\u662f(n-1)!\u79cd\u3002</p> <p>\u751f\u6210\u51fd\u6570\uff08\u5176\u5173\u4e8ee\u7684\u6307\u6570\uff0c\u5c31\u662f\u4e00\u822c\u6392\u5217\u7684\u6307\u6570\u751f\u6210\u51fd\u6570\uff09 $$ \\hat Q(x)=\\sum_{n\\ge1}\\frac{(n-1)!x<sup>n}{n!}=\\sum_{n\\ge1}\\frac{x</sup>n}{n}=-\\ln(1-x)\\ \\Rightarrow e^{\\hat Q(x)}=\\hat P(x)=\\frac{1}{1-x} $$ \u4e8b\u5b9e\u4e0a\uff0c\u8bbe\u6392\u5217\u6570\u4e3ap(n)\uff0c\u5219\u5176\u53ef\u4ee5\u770b\u6210\u679a\u4e3e\u5176\u7531k\u4e2a\u6362\u6392\u5217\u6784\u6210\u5e76\u6c42\u548c\u5f97\u5230\uff0c\u8bbe\\(\\(q_k(n)\\)\\)\u8868\u793a\u6392\u5217\u7531k\u4e2a\u7f6e\u6362\u7ec4\u6210\u7684\uff0cc(n)\u8868\u793a\u5706\u6392\u5217\u4e2a\u6570 $$ p(n)=\\sum_{k=1}^nq_k(n)\\ \\hat P(x)=\\sum_{n\\ge1}\\sum_{k=1}<sup>nq_k(n)\\frac{x</sup>n}{n!}=\\sum_{k=1}^n\\hat q_k(x) $$ \\(\\(q_k(n)\\)\\)\u7684\u751f\u6210\u51fd\u6570\u548c\\(\\(c(n)\\)\\)\u7684\u751f\u6210\u51fd\u6570\u6709\u5982\u4e0b\u5173\u7cfb\uff1a\u53c2\u8003\u8bf7\u89c1\u6b64 $$ \\hat q_k(x)=\\frac1{k!}\\hat c(x)^k $$ \u5219 $$ \\hat P(x)=\\sum_{k=1}^n \\frac1{k!}\\hat c(x)<sup>k=e</sup> $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_46","title":"\u9519\u6392\u6570","text":"<p>\u53ef\u4ee5\u770b\u6210\u6ca1\u6709\u957f\u5ea6\u4e3a1\u7684\u73af\u7684\u6392\u5217\uff0c\u56e0\u6b64\u5176\u751f\u6210\u51fd\u6570 $$ \\hat R(x)=\\sum_{n\\ge2}\\frac{x^n}{n}=-\\ln(1-x)-x $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_47","title":"\u4e94\u8fb9\u5f62\u6570\u3001\u6574\u6570\u5206\u62c6","text":"<p>\u53c2\u8003\uff1ahttps://www.zhihu.com/question/364818496</p> <p>\u9012\u63a8\u516c\u5f0f\uff1a $$ f_1=1,f_n=f_{n-1}+3n-2 $$ \u901a\u9879\u516c\u5f0f\uff1a $$ f_n=\\frac{n(3n-1)}{2} $$ \u7279\u522b\u5730\u3001\u5bf9\u4e8e\u5e7f\u4e49\u4e94\u8fb9\u5f62\u6570\uff0c\u4e0a\u5f0f\u7684n\uff1an=0,1,-1,2,-2,... $$ F_n=\\frac{n(3n\\pm 1)}{2} $$</p> <p>\u6b27\u62c9\u51fd\u6570\uff08\u590d\u53d8\u51fd\u6570)\u7684\u5c55\u5f00\u5f0f\uff1a $$ \\phi(q)=\\prod_{k=1}<sup>\\infty(1-q</sup>k) $$</p> <p>\u6574\u6570\u5206\u62c6\u7684\u751f\u6210\u51fd\u6570\uff1a $$ G(x)=\\sum_{n=0}^\\infty p(n)x<sup>n=\\prod_{i=1}</sup>\\infty(\\frac{1}{1-x^i}) $$ \u4e5f\u5373\u6b27\u62c9\u51fd\u6570\u7684\u5012\u6570\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_48","title":"\u7fa4\u8bba","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_49","title":"\u7fa4\u3001\u5b50\u7fa4","text":"<p>\u82e5\u96c6\u5408S\uff08\u975e\u7a7a\uff09 \u548cS \u4e0a\u7684\u8fd0\u7b97*\u6784\u6210\u7684\u4ee3\u6570\u7ed3\u6784(S,*)\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <ul> <li> <p>\u5c01\u95ed\u6027\uff1a    $$   \\forall a,b \\in S, a\\cdot b\\in S   $$</p> </li> <li> <p>\u7ed3\u5408\u5f8b\uff1a    $$   \\forall a,b,c \\in S,(a\\cdot b)\\cdot c=a\\cdot(b\\cdot c)   $$</p> </li> <li> <p>\u5355\u4f4d\u5143\uff1a    $$   \\exist e\\in S,\\forall a\\in S,e\\cdot a=a\\cdot e=a   $$</p> </li> <li> <p>\u9006\u5143\uff1a   $$   \\forall a\\in S,\\exist b\\in S,a\\cdot b=b\\cdot a=e   $$   \u79f0b\u4e3aa\u7684\u9006\u5143\uff0c\u8bb0\u4e3a(a)^(-1)</p> </li> </ul> <p>\u5219\u79f0(S,*) \u4e3a\u4e00\u4e2a \u7fa4 \u3002\u4f8b\u5982\uff0c\u6574\u6570\u96c6\u548c\u6574\u6570\u95f4\u7684\u52a0\u6cd5 \u6784\u6210\u4e00\u4e2a\u7fa4\uff0c\u5355\u4f4d\u5143\u662f 0\uff0c\u4e00\u4e2a\u6574\u6570\u7684\u9006\u5143\u662f\u5b83\u7684\u76f8\u53cd\u6570\u3002</p> <ul> <li>\u5b50\u7fa4\uff1a(T,*)\uff0cT\u662fS\u7684\u975e\u7a7a\u5b50\u96c6</li> <li>\u7531\u4e8e\u6709\u7ed3\u5408\u5f8b\uff0c\u56e0\u6b64\u5bf9\u4e8e\u8be5\u8fd0\u7b97\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5e42</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_50","title":"\u7f6e\u6362\u7fa4","text":"<p>\u628a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6253\u4e71\u4f4d\u7f6e $$ f=\\begin{pmatrix} a_1,\\cdots,a_n\\ a_{p_1},\\cdots,a_{p_n}\\ \\end{pmatrix} $$ \u7f6e\u6362\u8fd0\u7b97\u4e5f\u6ee1\u8db3\u7fa4\u7684\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\u5c01\u95ed\u6027\uff08\u7f6e\u6362\u540e\u5143\u7d20\u4ecd\u5728\u96c6\u5408\u5185\uff09\u3001\u7ed3\u5408\u5f8b\uff08\u7f6e\u6362\u4e58\u6cd5\uff09\u3001\u5355\u4f4d\u5143\uff08\u6052\u7b49\u7f6e\u6362\uff0c\u7f6e\u6362\u540e\u4f4d\u7f6e\u4e0d\u53d8\uff09\u3001\u9006\u5143\uff08\u7f6e\u6362\u7684\u53cd\u5411\u64cd\u4f5c\uff09</p> <ul> <li>\u7f6e\u6362\u7684\u4e58\u6cd5\uff1a   $$   f=\\begin{pmatrix}   a_1,\\cdots,a_n\\   a_{p_1},\\cdots,a_{p_n}\\   \\end{pmatrix}\\   g=\\begin{pmatrix}   a_{p_1},\\cdots,a_{p_n}\\   a_{q_1},\\cdots,a_{q_n}\\   \\end{pmatrix}\\   f\\circ g=\\begin{pmatrix}   a_1,\\cdots,a_n\\   a_{q_1},\\cdots,a_{q_n}\\   \\end{pmatrix}   $$</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_51","title":"\u5faa\u73af\u7f6e\u6362","text":"\\[ (a_1,\\cdots,a_m)=\\begin{pmatrix} a_1,a_2,\\cdots,a_n\\\\ a_n,a_1,\\cdots,a_{n-1} \\end{pmatrix} \\] <ul> <li>\u4e24\u4e2a\u5faa\u73af\u7f6e\u6362\u4e0d\u542b\u6709\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5219\u79f0\u5b83\u4eec\u662f \u4e0d\u76f8\u4ea4 \u7684\u3002</li> <li>\u4efb\u610f\u4e00\u4e2a\u7f6e\u6362\u90fd\u53ef\u4ee5\u5206\u89e3\u4e3a\u82e5\u5e72\u4e0d\u76f8\u4ea4\u7684\u5faa\u73af\u7f6e\u6362\u7684\u4e58\u79ef\u3002   \uff08\u5982\u679c\u628a\u5143\u7d20\u89c6\u4e3a\u56fe\u7684\u8282\u70b9\uff0c\u6620\u5c04\u5173\u7cfb\u89c6\u4e3a\u6709\u5411\u8fb9\uff0c\u5219\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u90fd\u4e3a 1\uff0c\u56e0\u6b64\u5f62\u6210\u7684\u56fe\u5f62\u5fc5\u5b9a\u662f\u82e5\u5e72\u4e2a\u73af\u7684\u96c6\u5408\uff0c\u800c\u4e00\u4e2a\u73af\u5373\u53ef\u7528\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362\u8868\u793a\u3002\uff09</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#burnside-polya","title":"Burnside\u5f15\u7406 \u548c Polya\u5b9a\u7406","text":"<p>Burside\u5f15\u7406\uff1a $$ |X/G|=\\frac{1}{|G|}\\sum_{g\\in G}|X^g|\\ X^g={x|x\\in X,g(x)=x} $$ Polya\u5b9a\u7406\uff1a $$ |X/G|=\\frac{1}{|G|}\\sum_{g\\in G}|B|^{c(g)} $$ \u5176\u4e2d\\(c(g)\\)\u662f\u7f6e\u6362g\u80fd\u62c6\u5206\u6210\u7684\u4e0d\u76f8\u4ea4\u5faa\u73af\u7f6e\u6362\u6570\u91cf\u3002</p> <ul> <li> <p>\u5bf9\u4e8e\u65cb\u8f6c\uff1a\u5047\u8bbe\u65cb\u8f6c\u4e86k\u4e0b\uff0c\u5219\u5faa\u73af\u7f6e\u6362\u6570\u91cf\u662f   $$   c(g)=\\gcd(n,k)   $$</p> </li> <li> <p>\u5bf9\u4e8e\u7ffb\u8f6c\uff1a   $$   c(g)=\\frac{n}{2}+[n\\%2==1]   $$</p> </li> </ul> <p>P4980 Polya\u5b9a\u7406\u6a21\u7248 $$ ans=\\frac{\\sum_{k=1}^n\\gcd(n,k)}{n}=\\sum_{d|n}\\phi(d)\\cdot n^{n/d-1} $$ \uff08\u7136\u800c\u8fd9\u9898\u7684\u6b27\u62c9\u51fd\u6570\u5c45\u7136\u80fd\u66b4\u529b\u6c42\u2026\u2026\u771f\u662f\u89c1\u9b3c\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_52","title":"\u591a\u9879\u5f0f","text":"<p>\u6b27\u62c9\u516c\u5f0f\uff1a $$ e^{\\theta i}=\\cos\\theta+i\\sin\\theta $$</p> <p>\u7cfb\u6570\u8868\u793a\u6cd5\u3001\u70b9\u503c\u8868\u793a\u6cd5\uff1a</p> <p>\u4f7f\u7528n+1\u4e2a\u70b9\u8868\u793a\u591a\u9879\u5f0f $$ f(x)={(x_0,f(x_0)),\\cdots,(x_n,f(x_n))} $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#fft","title":"\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\uff08FFT\uff09","text":"<p>\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362(Discrete Fourier Transform)\uff1a\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\u3002</p> <p>\u2026\u2026\u9006\u53d8\u6362\uff1a\u70b9\u503c-&gt;\u7cfb\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_53","title":"\u5377\u79ef","text":"\\[ \\vec c=\\vec a \\otimes \\vec b \\] <p>\u5176\u4e2d\u5411\u91cf\u8868\u793a\u591a\u9879\u5f0f\uff0c\u4e14 $$ c_i=\\sum_{j=0}^ia_jb_{i-j} $$ \u5229\u7528\u70b9\u503c\u8868\u793a\u6cd5\u5c06\u70b9\u503c\u76f8\u4e58\u518d\u8f6c\u6362\u4e3a\u7cfb\u6570\u8868\u793a\u6cd5\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u5377\u79ef\uff08On\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff09\u3002\u56e0\u6b64\u74f6\u9888\u5728\u4e8e\u70b9\u503c\u8868\u793a\u6cd5\u4e0e\u7cfb\u6570\u8868\u793a\u6cd5\u7684\u8f6c\u6362\u3002</p> <p>\u5c06xi\u53d6\u7279\u5b9a\u7684\u503c\uff0c\\(x_i=\\omega_i^{[n]}=\\omega_n^i\\)\uff0c\u5219\u53ef\u6839\u636e\u67d0\u4e9b\u7279\u6b8a\u6027\u8d28\u5728nlogn\u65f6\u95f4\u5185\u8fdb\u884c\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\uff0c\u5bf9\u591a\u9879\u5f0f\u8fdb\u884c\u6c42\u503c\u548c\u5bf9\u70b9\u96c6\u8fdb\u884c\u63d2\u503c\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_54","title":"\u5355\u4f4d\u590d\u6839","text":"<p>\u590d\u6570\u610f\u4e49\u4e0b\uff0c\u4e0b\u9762\u65b9\u7a0b\u7684\u89e3\u662fn\u6b21\u590d\u6839 $$ x^n=1 \\Rightarrow (\\omega_n)^n=1 $$ \uff08n\u6b21\uff09\u5355\u4f4d\u590d\u6839\uff1a\u628a\u590d\u5e73\u9762\u5355\u4f4d\u5143\u5206\u6210n\u4efd\uff0c\u7b2c\u4e00\u4e2a\u89d2\u5bf9\u5e94\u7684\u590d\u6570\u5411\u91cf $$ \\omega_n=e^{\\frac{2\\pi i}{n}}\\ {\\omega_n^k|k=0,1,\\cdots,n-1} $$</p> <ul> <li>\\(w_n^0=1\\)</li> </ul> <p>\u6027\u8d28\uff1a $$ w_n^n=1\\ w_n<sup>k=w_{2n}</sup>\\ w_{2n}<sup>{k+n}=-w_{2n}</sup>k $$</p> <p>\u5b9a\u74061\uff1a</p> <p>\u5982\u679c\\(a=b\\pmod n\\)\uff0c\u5219 $$ w_n<sup>a=w_n</sup>b $$ \u8bc1\u660e\uff1a\u5728\u590d\u5e73\u9762\u4e0a\u770b\u5355\u4f4d\u590d\u6839\u5bb9\u6613\u770b\u51fa\u5b9a\u7406\u7684\u53d9\u8ff0\u662f\u6b63\u786e\u7684</p> <p>\u5b9a\u74062\uff1a\uff08\u76f8\u6d88\u5b9a\u7406\uff09 $$ \\omega_{dn}<sup>{dk}=\\omega_{n}</sup>k~(\\text{for }d&gt;0) $$ \u5728\u590d\u5e73\u9762\u4e0a\u4e5f\u5bb9\u6613\u770b\u51fa\u5176\u6b63\u786e\u6027\u3002</p> <p>\u5b9a\u74062\u7684\u63a8\u8bba\uff1a $$ \\omega_n<sup>{n/2}=\\omega_{2}</sup>1=-1~(n&gt;0,n\\text{ is even}) $$ \u5b9a\u74063\uff1a\uff08\u6298\u534a\u5b9a\u7406\uff09 $$ \\omega_{n}<sup>{n/2+k}=-\\omega_n</sup>k $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_55","title":"\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362","text":"<p>\u5f53\\(x_k=\\omega_n^k\\)\u65f6\uff08n\u662f\u591a\u9879\u5f0fA\u7684\u6b21\u6570\uff0ck=0~n-1\uff09\u5e26\u5165\u591a\u9879\u5f0fA\u5f97\u5230\u5404\u9879\\(y_k=A(\\omega_n^k)=\\sum_{i=0}^{n-1}a_i(\\omega_n^k)^i\\)\uff0c\u591a\u9879\u5f0f\u503c\u5411\u91cf\uff08\u70b9\u503c\u8868\u793a\u6cd5\uff09\\(\\vec y=(y_0,\\cdots,y_{n-1})\\)\u5c31\u88ab\u79f0\u4e3a\u7cfb\u6570\u5411\u91cfa\uff08\u7cfb\u6570\u8868\u793a\u6cd5\uff09\u7684\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\uff0c\u8bb0\u4e3a $$ \\vec y=\\text{DFT}_n(\\vec a) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_56","title":"\u79bb\u6563\u5085\u7acb\u53f6\u9006\u53d8\u6362","text":"<p>\u6839\u636e\u503c\u5411\u91cfy\u6c42\u51fa\u7cfb\u6570\u5411\u91cf\uff1a $$ \\vec a=\\text{DFT}^{-1}_n(\\vec y) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_57","title":"\u5377\u79ef\u5b9a\u7406","text":"<p>a\u3001b\u662f\u7cfb\u6570\u5411\u91cf\uff08\u957f\u5ea6\u4e3an\uff0c\u6700\u9ad8\u6b21\u4e3an\uff09\uff0c\u5219\u5377\u79efc\uff08\u4e5f\u662f\u7cfb\u6570\u5411\u91cf\uff09 $$ \\vec c=DFT_{2n}^{-1}(DFT_{2n}(\\vec a)\\cdot DFT_{2n}(\\vec b)) $$ \u5176\u4e2d\ud835\udc5b\u4e3a2\u7684\u5e42\u6b21\uff0c\u4e0d\u8db3\u7684\u75280\u8865\u3002\u4e2d\u95f4\u7684\u4e58\u53f7\u8868\u793a\u4e24\u4e2a\u5411\u91cf\u7684\u70b9\u4e58\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_58","title":"\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362","text":"<p>\u5feb\u901f\u5c06\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u6362\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\u3002</p> <p>\u4e00\u4e2an\u9636\u591a\u9879\u5f0f\u53ef\u4ee5\u88ab\u62c6\u6210\u4e24\u90e8\u5206\uff08\u5076\u6570\u9879\u7cfb\u6570\u62ff\u51fa\u6765\uff0c\u642d\u914d\u65b0\u7684\\(x^0\\text~x^{n-1}\\)\uff0c\u6210\u4e3a\u4e00\u4e2a\u65b0\u591a\u9879\u5f0f\uff1b\u5947\u6570\u9879\u7cfb\u6570\u62ff\u51fa\u6765\u6210\u4e3a\u53e6\u4e00\u4e2a\u65b0\u591a\u9879\u5f0f\uff09\uff1a $$ A(x)=A<sup>{[0]}(x</sup>2)+xA<sup>{[1]}(x</sup>2)\\ A<sup>{[0]}(x)=a_0+a_2x+\\cdots+a_{n-2}x</sup>\\ A<sup>{[1]}(x)=a_1+a_3x+\\cdots+a_{n-1}x</sup>\\ $$ \uff08\u6ce8\u610f\u8fd9\u91cc\u5f97\u5e26\u5165x^2\uff0c\u8fd9\u6837\u624d\u9f50\u6b21\uff09</p> <p>\u7531\u8fd9\u4e24\u4e2a\u591a\u9879\u5f0f\u5f97\u5230\u7684\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\u7684\u7ed3\u679c\uff08\u70b9\u503c\u8868\u793a\u6cd5\u76f8\u91cf\uff09\u662f</p> \\[ \\vec y^{[0]}=DFT_{n/2}(a_0,\\cdots,a_{n-2})\\\\ \\vec y^{[1]}=DFT_{n/2}(a_1,\\cdots,a_{n-1})\\\\ \\vec y=DFT_{n}(a_0,a_1,\\cdots,a_{n-1}) \\] <p>\u5219\u8fd9\u4e24\u4e2a\u76f8\u91cf\u7684\u5404\u9879\u7cfb\u6570\u662f</p> \\[ y_k^{[0]}=A^{[0]}(\\omega^k_{n/2})=A^{[0]}((\\omega^{k}_{n})^2)\\\\ y_k^{[1]}=A^{[1]}(\\omega^k_{n/2})=A^{[1]}((\\omega^{k}_{n})^2) \\] <p>\u90a3\u4e48\u6700\u7ec8\u7ed3\u679c\uff08\u4e4b\u6240\u4ee5\u5206\u6210\u4e24\u90e8\u5206\u662f\u56e0\u4e3ay\u76f8\u91cf\u7684\u4e0b\u6807\u5927\u5c0f\u662f\\(y^{[0]},y^{[1]}\\)\u7684\u4e24\u500d\uff0c\u56e0\u6b64\u5728\u5206\u6cbb\u5b8c\u6210\u540e\u8f6c\u79fb\u65f6\u53ea\u9700\u8981\u679a\u4e3ek\uff1a0~n/2-1\u5373\u53ef\uff09\uff1a</p> \\[ y_k=A(\\omega_n^k)=A^{[0]}((\\omega_n^k)^2)+A^{[1]}((\\omega_n^k)^2)\\omega^k_n=y^{[0]}_k+y^{[1]}_k\\omega_n^k\\\\ y_{k+n/2}=A(\\omega^{k+n/2}_n)=A^{[0]}((\\omega_n^{k+n/2})^2)+A^{[1]}((\\omega_n^{k+n/2})^2)\\omega^{k+n/2}_n\\\\ =A^{[0]}((\\omega_n^{k+n/2})^2)-A^{[1]}((\\omega_n^{k+n/2})^2)\\omega^{k}_n=y^{[0]}_k-y^{[1]}_k\\omega_n^k \\] <p>\u5b9e\u9645\u5b9e\u73b0\u65f6\uff0c\u9700\u8981\u5148\u5c06\u591a\u9879\u5f0f\u957f\u5ea6\u8865\u5168\u52302\u7684\u5e42\u6b21\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#ifft","title":"\u5feb\u901f\u5085\u7acb\u53f6\u9006\u53d8\u6362\uff08IFFT\uff09","text":"<p>\u53ef\u4ee5\u8bc1\u660e\uff1a $$ a_i=\\frac1n\\sum_{i=0}<sup>{n-1}y_i(\\omega_n</sup>)^i $$ \u5176\u4e2dai\u662f\u7cfb\u6570\u8868\u793a\u6cd5\u7684\u7cfb\u6570\uff0cyi\u662f\u70b9\u503c\u8868\u793a\u6cd5\u7684\u7cfb\u6570\u3002\u8fd9\u548c\u5904\u7406FFT\u662f\u4e00\u6837\u7684\u5f62\u5f0f\u3002\uff08\u4e5f\u5373\uff0c\u77e9\u9635\\(Y=\\Omega A\\)\u4e2d\uff0cOmega\uff08\u7cfb\u6570\u77e9\u9635\uff09\u7684\u9006\u77e9\u9635\u662f\u6bcf\u4e00\u9879\u53d6\u5012\u6570\uff0c\u7136\u540e\u518d\u9664\u4ee5n\uff08\u4e5f\u5373\u591a\u9879\u5f0f\u957f\u5ea6\uff09\uff09</p> <p>\u53c8\u56e0\u4e3a $$ \\frac{1}{\\omega_n}=\\omega_n^{-1} $$ \u5c06FFT\u8fc7\u7a0b\u4e2d\u7684pi\u6539\u4e3a-pi\u5c31\u662f\u5728\u505aIFFT\u4e86\u3002\u6700\u540e\u6c42\u5f97\u7684\u7cfb\u6570\u5168\u90e8\u9664\u4ee5n\uff08\u591a\u9879\u5f0f\u957f\u5ea6\uff09\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_59","title":"\u8774\u8776\u53d8\u6362","text":"<p>\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u7cfb\u6570\u7684\u4e0b\u6807\u53d8\u6362\u6709\u5982\u4e0b\u89c4\u5f8b\uff1a $$ 1:01234567\\ 2:02461357\\ 3:04261357\\ 4:04261537 $$ \u4e5f\u5373\u4e0b\u4e00\u6b65\u7684\u4e0b\u6807\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u53cd\u8f6c\u503c\u4f1a\u6210\u4e3a\u8fd9\u4e00\u6b65\u7684\u4e0b\u6807\u3002</p> <p>\u9012\u63a8\u5b9e\u73b0\uff1a(https://oi-wiki.org/math/poly/fft/#_8) $$ R(0)=0\\ R(x)=\\lfloor\\frac{R(\\lfloor\\frac{x}{2}\\rfloor)}{2}\\rfloor+(x\\mod 2)\\frac{len}{2} $$</p> <pre><code>void pre_rev(int len)\n{\n    rev[0]=0;\n    for(int i=1;i&lt;=len;i++)\n    {\n        rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;\n        if(i&amp;1)\n        {\n            rev[i]|=len&gt;&gt;1;\n        }\n    }\n}\n</code></pre> <p>SP8372 TSUM - Triple Sums</p> <p>\u9898\u610f\uff1an\u4e2a\u6570\uff0c\u4efb\u53d6\u4e09\u4e2a\u52a0\u8d77\u6765\uff08\u8981\u6c42\u4e0b\u6807i&lt;j&lt;k\uff09\uff0c\u95ee\u6bcf\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c\u7684\u65b9\u6848\u6570\uff08\u503c\u57df\u7edd\u5bf9\u503c20000\uff0cN\u572840000\u5185\uff09\u3002</p> <p>https://www.cnblogs.com/SuuT/p/9584925.html</p> <p>\u89e3\u6cd5\uff1a\u8bbeA(x)\u662f\u4e0d\u8003\u8651\u987a\u5e8f\u7684\u9009\u6cd5\u7684\u9009\u4e00\u4e2a\u7684\u751f\u6210\u51fd\u6570\uff0c\u5219A(x<sup>2)\u5c31\u662f\u9009\u4e24\u4e2a\u4e00\u6837\u7684\u751f\u6210\u51fd\u6570\uff0cA(x</sup>3)\u5c31\u662f\u9009\u4e09\u4e2a\u4e00\u6837\u7684\u751f\u6210\u51fd\u6570\uff08\u5747\u662f\u4e0d\u8003\u8651\u987a\u5e8f\u7684\uff09</p> <p>\u8003\u8651\u5bb9\u65a5\u539f\u7406\u628a\u9009\u5230\u76f8\u540c\u7684\u4e0b\u6807\u7684\u60c5\u51b5\u7ed9\u6392\u9664\u6389\uff0c\u5219\u4e0b\u9762\u7684\u5f0f\u5b50\u5c31\u662f\u7b5b\u6389\u4e4b\u540e\u7684\u751f\u6210\u51fd\u6570\uff1a\u51cf\u53bb\u6709\u4e24\u79cd\u76f8\u540c\u7684\u9009\u6cd5\u7684\u751f\u6210\u51fd\u6570\uff0c\u518d\u52a0\u56de\u591a\u51cf\u53bb\u7684\u4e09\u79cd\u76f8\u540c\u7684\u9009\u6cd5\u7684\u751f\u6210\u51fd\u6570 $$ A<sup>3(x)-3A(x</sup>2)A(x)+2A(x^3) $$ \u7531\u4e8ei&lt;j&lt;k\uff0c\u56e0\u6b64\u8fd8\u8981\u9664\u4ee56\u6765\u7b5b\u6389\u5176\u4ed6\u91cd\u590d\u7684\u60c5\u51b5\uff08\u663e\u7136\u67093*2*1\u79cd\u53ef\u80fd\uff09</p> <p>\u5b9e\u73b0\u65f6\u7531\u4e8e\u6709\u8d1f\u6570\u5b58\u5728\uff0c\u9700\u8981\u6574\u4f53\u5c06\u8bfb\u5165\u7684\u5e8f\u5217\u79fb\u52a82e4\uff0c\u6700\u540e\u8981\u53cd\u5411\u79fb\u52a86e4\uff08\u56e0\u4e3a\u6700\u7ec8\u5f0f\u5b50\u662f3\u6b21\u5f0f\uff1f\uff09</p> <p>UVA12633 Super Rooks on Chessboard</p> <p>\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u5f20\u7f51\u683c\uff0c\u4e0a\u9762\u6709\u5f88\u591a\u9a91\u58eb\uff0c\u6bcf\u4e2a\u9a91\u58eb\u80fd\u6a2a\u7740\u7ad6\u7740\u659c\u7740\u653b\u51fb\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684\u683c\u5b50\uff0c\u6c42\u6ca1\u88ab\u653b\u51fb\u7684\u683c\u5b50\u7684\u6570\u91cf\u603b\u548c\uff08R C D\u5c0f\u4e8e50000\uff09</p> <p>https://blog.csdn.net/u013368721/article/details/45367249</p> <p>\u89e3\u6cd5\uff1a\u5148\u8ba1\u7b97\u51fa\u4e0d\u8003\u8651\u659c\u65b9\u5411\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u7b54\u6848\u5c31\u662f\u6ca1\u8f66\u7684\u884c\u4e58\u4ee5\u6ca1\u8f66\u7684\u5217\u7684\u6570\u91cf\u3002</p> <p>\u8003\u8651\u659c\u65b9\u5411\uff0c\u6211\u4eec\u5c31\u8981\u5254\u9664\u6389\u4f1a\u88ab\u659c\u65b9\u5411\u5360\u636e\u7684\u60c5\u51b5\u3002\u8bbe\u591a\u9879\u5f0fR(x)\u8868\u793a\u6ca1\u88ab\u5360\u636e\u7684\u884c\u53f7\u7684\u751f\u6210\u51fd\u6570\uff0cC(x)\u8868\u793a\u6ca1\u88ab\u5360\u636e\u7684\u5217\u53f7\u7684\u751f\u6210\u51fd\u6570\u3002\uff08\u884c\u53f7\u4ece\u4e0a\u5230\u4e0b\u589e\u5927\uff0c\u5217\u53f7\u4ece\u5de6\u5230\u53f3\u589e\u5927\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570\uff09 $$ R(x)=\\sum_{i=1}<sup>{cnt}x</sup>\\ C(x)=\\sum_{i=1}<sup>{cnt2}x</sup>\\ $$ \u8fd9\u65f6\u5c31\u662f\u8981\u6570\\(r_i-c_j=d_k\\)\u7684i\u3001j\u3001k\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\\((R\\cdot C)(x)\\)\u4e2d\\(x^{d_k}\\)\u7684\u7cfb\u6570\u3002\uff08\u5176\u4e2dri\u3001cj\u3001dk\u662f\u6ca1\u6709\u8f66\u7684\u884c\u53f7\u4e0e\u5217\u53f7\u7684\u96c6\u5408\u4ee5\u53ca\u6709\u8f66\u7684\u5bf9\u89d2\u7ebf\u7684\u96c6\u5408\uff09</p> <p>\u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u7531\u4e8e-ci\u662f\u8d1f\u6570\u4e0d\u597d\u5904\u7406\uff0c\u4e8e\u662f\u6574\u4f53\u504f\u79fbC\uff08\u9898\u76ee\u7ed9\u51fa\u7684\u5217\u6570\uff09\uff0cd\u8fd9\u4e2a\u96c6\u5408\u7684\u4e0b\u6807\u4e5f\u6574\u4f53\u504f\u79fbC\u90a3\u4e48\u591a\uff0c\u6700\u540e\u8ba1\u6570\u7684\u65f6\u5019\u76f4\u63a5\u51cf\u53bb\u7cfb\u6570\u4e58\u4ee5[\u90a3\u4e00\u5bf9\u89d2\u7ebf\u662f\u5426\u6709\u8f66]\u5373\u53ef\u3002</p> <p>HDOJ4609 3-idiots</p> <p>\u9898\u610f\uff1a\u7ed9\u51fan\u4e2a\u6570\uff08\u53ef\u80fd\u76f8\u540c\uff0c\u503c\u57df1~1e5\uff09\uff0c\u4efb\u90093\u4e2a\uff0c\u95ee\u80fd\u591f\u6784\u6210\u4e09\u89d2\u5f62\u7684\u6982\u7387\u3002</p> <p>https://blog.csdn.net/Maxwei_wzj/article/details/79329154</p> <p>\u89e3\u6cd5\uff1a\u8bbeA(x)\u4e3a\u4efb\u610f\u90091\u4e2a\u5f97\u5230\u7684\u6570\u7684\u548c\u7684\u751f\u6210\u51fd\u6570\uff0c\u5219 $$ G(x)=\\frac{A(x)<sup>2-A(x</sup>2)}{2} $$ \u8fd9\u4e2a\u662f\u5728\u6392\u5e8f\u540e\u9009\u4e24\u4e2a\u6709\u5e8f\u6570\u5bf9\u6784\u6210\u7684\u548c\u7684\u9009\u6cd5\u6570\u91cf\u7684\u751f\u6210\u51fd\u6570\u3002</p> <p>\u76f4\u63a5\u53bb\u8003\u8651\u80fd\u6709\u591a\u5c11\u4e2a\u6709\u5e8f\u6570\u5bf9i\u3001j\u3001k\u6ee1\u8db3\\(A_i+A_j&gt;A_k\\)\u4e14\\(A_i\\le A_j\\le A_k\\) \u4f1a\u5b58\u5728\u56f0\u96be\uff08\u56e0\u4e3a\u76f4\u63a5\u5957\u7528\u4e0a\u9762\u7684\u751f\u6210\u51fd\u6570\u7684\u7ed3\u679c\u7684\u540e\u7f00\u548c\u662f\u4e0d\u80fd\u4fdd\u8bc1\u540e\u9762\u7684\u6761\u4ef6\u6ee1\u8db3\u7684\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u53cd\u8fc7\u6765\u8003\u8651\u62a0\u6389\\(A_i+A_j\\le A_k\\)\uff0c\u8fd9\u6837\u5728\u6392\u5e8f\u540e\uff0c\u540e\u8005\u7684\u6761\u4ef6\u81ea\u7136\u6ee1\u8db3\u3002</p> <p>\u679a\u4e3eAk\u7684\u503c\uff0c\u7136\u540e\u5206\u4e09\u7c7b\u60c5\u51b5\u7edf\u8ba1\u7b54\u6848\uff08tempsum\u662f\u5c0f\u4e8eAk\u7684\u503c\u7684\u6570\u91cf\uff0ctempsum2\u662f\u5c0f\u4e8e\u7b49\u4e8eAk\u7684\u751f\u6210\u51fd\u6570\u7684\u503c\u7684\u7cfb\u6570\u548c\uff0ccnt_i\u662f\u7b49\u4e8ei\u7684\u6570\u7684\u6570\u91cf\uff09\uff1a</p> <ul> <li>\\(A_i\\le A_j \\lt A_k\\) \uff1a\u7b54\u6848\u7d2f\u52a0\u4e0a<code>ans+=(tempsum*(tempsum-1)/2-tempsum2)*cnt[i];</code></li> <li>\\(A_i\\lt A_j = A_k\\)\uff1a<code>ans+=tempsum*cnt[i]*(cnt[i]-1)/2;</code></li> <li>\\(A_i\\lt A_j = A_k\\)\uff1a<code>ans+=cnt[i]*(cnt[i]-1)*(cnt[i]-2)/6;</code></li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#number-theoretic-transform","title":"\u5feb\u901f\u6570\u8bba\u53d8\u6362\uff08Number theoretic transform\uff09","text":"<p>FFT\u4e4b\u6240\u4ee5\u8981\u5f15\u5165\u590d\u6570\uff0c\u662f\u56e0\u4e3a\u5355\u4f4d\u5143\u6839\u6ee1\u8db3\u5faa\u73af\u7fa4\u7684\u6027\u8d28\uff1a $$ {1,\\omega,\\omega<sup>2,\\cdots,\\omega</sup>} $$ \u8fd9\u4e2a\u7fa4\u662f\\(2^K\\)\u9636\u5faa\u73af\u7fa4\u3002\u800c\u5728\u5b9e\u6570\u8303\u56f4\u5185\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u5faa\u73af\u7fa4\u3002</p> <p>\u53c2\u8003\uff1ahttps://zhuanlan.zhihu.com/p/166197713</p> <p>\u5728mod p\u610f\u4e49\u4e0b\uff0cp\u7684\u539f\u6839\u5c31\u6070\u597d\u548c\u521a\u521a\u7684\u5355\u4f4d\u5143\u6839\u4e00\u6837\u5177\u6709\u76f8\u540c\u7684\u6027\u8d28\u3002</p> <p>\u4ee4g\u662fp\uff08\u8d28\u6570\uff09\u7684\u539f\u6839\uff0c\u4ee4\\(g_N=g^{\\frac{p-1}{N}}~(N|p-1)\\)\uff0c\u5219\uff1a $$ g_N<sup>N=g</sup>=1 \\pmod p\\ g_{N}<sup>{N/2}=g</sup>\\frac{p-1}{2}=-1 \\pmod p $$</p> <p>\\(g^{\\frac{p-1}{2}}\\)\u662f-1\u53ef\u7531\u539f\u6839\u7684\u6027\u8d28+\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u8bc1\u660e\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u3002</p> <p>\u4ece\u8fd9\u91cc\u53ef\u4ee5\u77e5\u9053\uff0c\u4e0b\u9762\u7684\u7fa4\u7684\u9636\u6570\u5c31\u662fN-1\uff1a $$ {g,g<sup>2,\\cdots,g</sup>=1} $$</p> <p>\u5173\u952e\u95ee\u9898\u5c31\u5728\u4e8e\\(N|p-1\\)\uff0c\u800cp=998244353\u65f6 $$ p-1=998244353-1=2^{23}\\times17\\times7 $$ \u7531\u4e8e\u5728FFT\u4e2dN\uff08\u4e5f\u5c31\u662f\u6269\u5c55\u540e\u7684\u591a\u9879\u5f0f\u957f\u5ea6\uff09\u662f2\u7684\u5e42\uff0c\u56e0\u6b64\u5927\u591a\u6570\u65f6\u5019\uff08\u53ea\u8981N\u5c0f\u4e8e\u7b49\u4e8e2\u768423\u6b21\u5e42\uff09\u80fd\u591f\u6ee1\u8db3\\(N|p-1\\)\u3002\u540c\u6837\u7c7b\u4f3c\u7684\u6570\u8fd8\u6709p=1004535809=4792^{21}+1\u3002\u8fd9\u4e24\u4e2a\u6570\u7684\u539f\u6839\u90fd\u662f3\u3002*</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#fast-walsh-transform","title":"\u5feb\u901f\u6c83\u5c14\u4ec0\u53d8\u6362\uff08Fast Walsh Transform\uff09","text":"<p>https://oi-wiki.org/math/poly/fwt/#_3</p> <p>\u7528\u4e8e\u89e3\u51b3\u4e0e\u4f4d\u8fd0\u7b97\u6709\u5173\u7684\u5377\u79ef\u95ee\u9898\uff1a\\(\\vec c=\\vec a \\oplus \\vec b\\) $$ C_i=\\sum_{i=j|k}A_j B_k $$ \u5bf9\u6216\u8fd0\u7b97\u6765\u8bf4\uff0c\u6784\u9020\uff1a $$ A'=FWT[A]:A'i=\\sumA_j $$ \u4e5f\u5373A'i\u8868\u793a\u4e8c\u8fdb\u5236\u4e0b\u76841\u662fi\u7684\u5b50\u96c6\u7684Aj\u7684\u603b\u548c\uff0c\u5982\u6b64\u6784\u9020\u5c31\u6709 $$ FWT[C]=FWT[A]\\cdot FWT[B]\\ \\sumB_i $$ \u7279\u522b\u5730\uff0c\u591a\u9879\u5f0f\u957f\u5ea6\u4e3a1\u65f6\uff0c\u663e\u7136\u6709 $$ A=FWT[A]=A' $$ \u56e0\u4e3a\u5728\u6216\u7684\u60c5\u51b5\u4e0bi\u81ea\u5df1\u5c31\u662fi\u7684\u5b50\u96c6\u3002\u5bf9\u4e8e\u4e0e\u6765\u8bf4\u4e5f\u540c\u7406\u3002}C_i=\\sum_{i=i|j}A_i\\cdot \\sum_{i=i|j</p> <p>\u8003\u8651\u9012\u63a8\u516c\u5f0f\u7684\u65f6\u5019\uff0c\u4e3b\u8981\u8003\u8651\u591a\u51fa\u6765\u7684\u90a3\u4e00\u4f4d\u768401\u548c\u8fd0\u7b97\u5b50\u96c6\u6216\u8d85\u96c6\u7684\u5173\u7cfb</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#or","title":"\u6216\uff08OR\uff09","text":"<p>merge\u8868\u793a\u4e32\u63a5\uff0cA0\u8868\u793a\u5de6\u534a\u90e8\u5206\uff0cA1\u8868\u793a\u53f3\u534a\u90e8\u5206\u3002 $$ FWT[A]=merge(FWT[A_0],FWT[A_0]+FWT[A_1])\\ UFWT[A']=merge(UFWT[A'_0],UFWT[A'_1]-UFWT[A'_0]) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#and","title":"\u4e0e\uff08AND\uff09","text":"<p>\u4e0a\u6587\u4e2d\u5b50\u96c6\u53d8\u6210\u8d85\u96c6 $$ FWT[A]=merge(FWT[A_0]+FWT[A_1],FWT[A_1])\\ UFWT[A']=merge(UFWT[A'_0]-UFWT[A'_1],UFWT[A'_1]) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#xor","title":"\u5f02\u6216\uff08XOR\uff09","text":"<p>\u8bbe $$ A'k=FWT[A][k]=\\sum<sup>{2</sup>n-1}A_i(-1)^{|i\\and k|} $$ \u5176\u4e2d\\(|i\\and k|\\) \u8868\u793ai and k\u4e2d1\u7684\u6570\u76ee\u7684\u5947\u5076\u6027\u3002</p> <p>\u5219\uff08\u56e0\u4e3a\u6307\u6570\u90a3\u4e2a\u5730\u65b9\u53ea\u662f\u8868\u793a\u5947\u5076\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4ece\u52a0\u53f7\u66ff\u6362\u6210\u5f02\u6216\u7b26\u53f7\uff09 $$ FWT[A][k]\\cdot FWT[B][k]\\= \\sum_{i=0}<sup>{2</sup>n-1} A_i(-1)^{|i\\and k|}\\sum_{i=0}<sup>{2</sup>n-1} B_i(-1)^{|i\\and k|}\\ =\\sum_{i=0}<sup>{2</sup>n-1}\\sum_{j=0}<sup>{2</sup>n-1}A_iB_j(-1)^{|i\\and k|\\oplus|j\\and k|}\\ =\\sum_{i=0}<sup>{2</sup>n-1}\\sum_{j=0}<sup>{2</sup>n-1}A_iB_j(-1)^{|(i\\oplus j)\\and k|}\\ =\\sum_{val=0}<sup>{2</sup>n-1}(\\sum_{j=0}<sup>{2</sup>n-1}A_{val}B_{val\\oplus j})(-1)^{|val\\and k|} $$ \u6ce8\u610f\uff1a\u6700\u540e\u4e00\u4e2a\u7b49\u5f0f\u540e\u6c42\u548c\u987a\u5e8f\u5df2\u7ecf\u53d8\u6362\u3002\u62ec\u53f7\u5185\u5c31\u662f\\(C_i\\) $$ FWT[A]=merge(FWT[A_0]+FWT[A_1],FWT[A_0]-FWT[A_1])\\ UFWT[A']=merge(\\frac{UFWT[A'_0]+UFWT[A'_1]}2,\\frac{UFWT[A'_0]-UFWT[A'_1]}2)\\ $$ \u5982\u679c\u662f\u540c\u6216\u5c31\u4ea4\u6362+-\u7b26\u53f7\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_60","title":"\u7f51\u7edc\u6d41\u76f8\u5173","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#halls-marriage-theorem","title":"Hall's marriage theorem","text":"<p>\u8bbe\u4e8c\u5206\u56fe\u4e2dG=\u4e2d\uff0c|V1|=m&lt;=|V2|=n\uff0cG\u4e2d\u5b58\u5728V1\u5230V2\u7684\u5b8c\u5168\u5339\u914d\uff0c\u5f53\u4e14\u4ec5\u5f53V1\u4e2d\u4efb\u610fk\u4e2a(k=1,2,..,m)\u4e2a\u9876\u70b9\u81f3\u5c11\u4e0eV2\u4e2dk\u4e2a\u9876\u70b9\u76f8\u90bb <p>\uff08\u968f\u4fbf\u6311\u51fa\u4efb\u610f\u4e2a\u7537\u751f\uff0c\u5982\u679c\u4ed6\u4eec\u5fc3\u4eea\u7684\u5973\u751f\u7684\u6570\u91cf\uff08\u91cd\u590d\u4e0d\u7b97\uff09\u6bd4\u8fd9\u4e9b\u6311\u51fa\u7684\u7537\u751f\u6570\u8fd8\u5c11\uff0c\u90a3\u4e48\u5fc5\u7136\u4e0d\u80fd\u5b9e\u73b0\u5b8c\u7f8e\u914d\u5bf9\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_61","title":"\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6570\u91cf","text":"<p>N(S)\u8868\u793a\u4e0eS\u76f8\u90bb\uff08\u8fde\u63a5\uff09\u7684\u9876\u70b9\u6570\u91cf $$ |M|=|V_1|-max_{S\\subset V_1}(|S|-|N(S)|) $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#naibi","title":"\u6709n\u4e2a\u73ed\u7ea7\uff0c\u6bcf\u4e2a\u73ed\u7ea7\u6709ai\u4e2a\u4eba\uff0c\u4e00\u4e2a\u73ed\u7ea7\u53ef\u4ee5\u505a\u51fabi\u676f\u5976\u8336\uff0c\u4e00\u4e2a\u73ed\u7ea7\u7684\u4eba\u4e0d\u80fd\u559d\u672c\u73ed\u505a\u7684\u5976\u8336\uff0c\u53ef\u4ee5\u559d\u522b\u7684\u73ed\u505a\u7684\u5976\u8336\uff0c\u95ee\u6700\u591a\u6709\u591a\u5c11\u4eba\u559d\u5230\u5976\u8336","text":"<p>\u6211\u4eec\u601d\u8003\u4e09\u79cd\u60c5\u51b5\uff1a 1.\u5f53\u8fd9\u4e2aS\u5b50\u96c6\u662f\u4e2a\u7a7a\u5b50\u96c6\u7684\u65f6\u5019\uff0c\u90a3\u4e48|M|=|U| 2.\u5f53\u8fd9\u4e2aS\u5b50\u96c6\u5c31\u662fU\u7684\u672c\u8eab\u7684\u65f6\u5019\uff0c\u90a3\u4e48N(S)\u5c31\u7b49\u4e8eV\uff08\u5976\u8336\u7684\u6570\u91cf\uff09\uff0c\u5373|M|=|V| 3.\u5f53S\u662f|U|\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u6211\u4eec\u4e00\u4e2a\u73ed\u4e00\u4e2a\u73ed\u7684\u8003\u8651\uff0c\u5f53S\u662f\u4e00\u4e2a\u73ed\u7684\u5b66\u751f\u7684\u65f6\u5019\uff0c\u90a3\u4e48\uff1a |M|=Sa-\uff08ai-\uff08Sb-bi\uff09\uff09\u5176\u4e2dSa\uff0cSb\u5206\u522b\u4ee3\u8868\u5b66\u751f\u603b\u6570\u91cf\u548c\u5976\u8336\u603b\u6570\u91cf\uff0cai\uff0cbi\u4ee3\u8868\u672c\u73ed\u5b66\u751f\u6570\u91cf\u548c\u672c\u73ed\u505a\u7684\u5976\u8336\u6570 \uff08\u4e3a\u4ec0\u4e48\u7b2c\u4e09\u4e2a\u60c5\u51b5\u4e0d\u4e00\u4e2a\u4e2a\u5b66\u751f\u8003\u8651\u706b\u6216\u8005\u4e24\u4e2a\u73ed\u4e09\u4e2a\u73ed\u7684\u8003\u8651\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u6c42\u7684\u662fmax\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u503c\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8003\u8651\u90fd\u662f\u65e0\u6548\u7684\uff0c\u5927\u5bb6\u753b\u4e00\u4e0b\u5c31\u77e5\u9053\u4e86\uff0c\u5f88\u5bb9\u6613\u7406\u89e3\uff09 \u4e09\u4e2a\u60c5\u51b5\u53d6\u6700\u5c0f\u503c\u8bb0\u4e3a\u7ed3\u679c</p> <p>\u4e3a\u4f55\u4e0d\u4e00\u4e2a\u4e2a\u8003\u8651\uff1a\u82e5\u5982\u6b64\u505a\uff0c|S|\u5c0f\u800c|N(S)|\u5927\uff0c\u5c06S\u6269\u5927\u5230\u540c\u73ed\u7ea7\uff0c\u7ed3\u679c\u4f1a\u66f4\u597d</p> <p>\u4e3a\u4f55\u4e0d\u6570\u4e2a\u73ed\u7ea7\u4e00\u8d77\u8003\u8651\uff1a\u82e5\u5982\u6b64\u505a\uff0c|N(S)|=|V2|\uff08\u4e5f\u5c31\u662f\u5976\u8336\u6570\u91cf\uff09\u4e3a\u5b9a\u503c\uff0c\u5219\u5c06S\u6269\u5927\u5230\u6240\u6709\u4eba\uff0c\u7ed3\u679c\u4f1a\u66f4\u597d\uff0c\u4f46\u8fd9\u548c\u60c5\u51b52\u662f\u91cd\u5408\u7684</p> <p>\u4e09\u4e2a\u60c5\u51b5\u53d6\u6700\u5c0f\u503c\uff1a-max &gt;&gt;&gt;&gt; min</p> <p>\u539f\u6587\u94fe\u63a5\uff1ahttps://blog.csdn.net/qq_41925919/java/article/details/99689223</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_62","title":"\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe","text":"<p>\u5e26\u6743\u95ed\u5408\u5b50\u56fe\uff1a\u6743\u5728\u70b9\u4e0a\uff0c\u5b50\u56fe\u4e2d\u7684\u70b9\u7684\u51fa\u8fb9\u5747\u5728\u5b50\u56fe\u4e2d</p> <p>\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff1a\u503c\u7b49\u4e8e \u201c\u6240\u6709\u6b63\u70b9\u6743\u503c\u7684\u548c\u201d\u51cf\u53bb\u201cs-t\u6700\u5c0f\u5272\u201d</p> <p>https://www.cnblogs.com/dilthey/p/7565206.html</p> <p>\u5c0fM\u7684\u4f5c\u7269</p> <p>\uff08\u6b64\u9898\u7684\u53e6\u4e00\u4e2a\u505a\u6cd5\uff1aA\u3001B\u4f5c\u4e3a\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u4f5c\u7269\u4f5c\u4e3a\u4e2d\u95f4\u8282\u70b9\uff0c\u518d\u6784\u9020\u8fde\u7ed3\u6e90\u70b9\uff08\u6c47\u70b9\uff09\u548c\u4f5c\u7269\u8282\u70b9\u7684\u5956\u52b1\u8282\u70b9\uff0c\u7136\u540e\u6c42\u6700\u5c0f\u5272\uff09</p> <p>https://blog.csdn.net/clover_hxy/article/details/55043578</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_63","title":"\u6700\u5c0f\u5272\u7684\u4e00\u4e2a\u95ee\u9898\u6a21\u578b\u00b6","text":"<p>\u6709 \u4e2a\u7269\u54c1\u548c\u4e24\u4e2a\u96c6\u5408 \uff0c\u5982\u679c\u5c06\u4e00\u4e2a\u7269\u54c1\u653e\u5165 \u96c6\u5408\u4f1a\u82b1\u8d39 \uff0c\u653e\u5165 \u96c6\u5408\u4f1a\u82b1\u8d39 \uff1b\u8fd8\u6709\u82e5\u5e72\u4e2a\u5f62\u5982 \u9650\u5236\u6761\u4ef6\uff0c\u8868\u793a\u5982\u679c \u548c \u540c\u65f6\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u4f1a\u82b1\u8d39 \u3002\u6bcf\u4e2a\u7269\u54c1\u5fc5\u987b\u4e14\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u6700\u5c0f\u7684\u4ee3\u4ef7\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684 \u4e8c\u8005\u9009\u5176\u4e00 \u7684\u6700\u5c0f\u5272\u9898\u76ee\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408\u8bbe\u7f6e\u6e90\u70b9 \u548c\u6c47\u70b9 \uff0c\u7b2c \u4e2a\u70b9\u7531 \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a \u7684\u8fb9\u3001\u5411 \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a \u7684\u8fb9\u3002\u5bf9\u4e8e\u9650\u5236\u6761\u4ef6 \uff0c\u6211\u4eec\u5728 \u4e4b\u95f4\u8fde\u5bb9\u91cf\u4e3a \u7684\u53cc\u5411\u8fb9\u3002</p> <p>\u6ce8\u610f\u5230\u5f53\u6e90\u70b9\u548c\u6c47\u70b9\u4e0d\u76f8\u8fde\u65f6\uff0c\u4ee3\u8868\u8fd9\u4e9b\u70b9\u90fd\u9009\u62e9\u4e86\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u3002\u5982\u679c\u5c06\u8fde\u5411 \u6216 \u7684\u8fb9\u5272\u5f00\uff0c\u8868\u793a\u4e0d\u653e\u5728 \u6216 \u96c6\u5408\uff0c\u5982\u679c\u628a\u7269\u54c1\u4e4b\u95f4\u7684\u8fb9\u5272\u5f00\uff0c\u8868\u793a\u8fd9\u4e24\u4e2a\u7269\u54c1\u4e0d\u653e\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u3002</p> <p>\u6700\u5c0f\u5272\u5c31\u662f\u6700\u5c0f\u82b1\u8d39\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#computational-geometry","title":"\u8ba1\u7b97\u51e0\u4f55(Computational Geometry)","text":"<p>\u8ba1\u7b97\u51e0\u4f55\u5168\u5bb6\u6876\uff1ahttps://www.cnblogs.com/Xing-Ling/p/12102489.html</p> <p>kuangbin\u7684\u677f\u5b50\uff1ahttps://kuangbin.github.io/2019/04/28/20190428/#more</p> <p>Pecco\u7684\u677f\u5b50\uff1ahttps://zhuanlan.zhihu.com/p/338057154</p> <p>\u8fd9\u91cc\u4e3b\u8981\u7528kuangbin\u7684\u677f\u5b50\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_64","title":"\u5e38\u8bc6","text":"<ul> <li> <p>\u5411\u91cfa\u7684\u5de6\u624b\u8fb9\u662f\u6b63\u533a\u57df\uff08\u5305\u62ec180\u5ea6\u7ebf\uff09\uff0c\u53f3\u624b\u8fb9\u662f\u8d1f\u533a\u57df\u3002\u56e0\u6b64\u4e24\u4e2a\u76f8\u91cfa\u3001b\u7684\u5939\u89d2\u662f\u6b63\u65f6\uff0cb\u5728a\u5de6\u4fa7\uff0c\u5426\u5219\u5728\u53f3\u4fa7\u3002\uff08\u8fd9\u4e2a\u7ea6\u5b9a\u5728\u53c9\u4e58\u3001\u534a\u5e73\u9762\u4ea4\u4e2d\u90fd\u6709\u7528\uff09</p> </li> <li> \\[   |\\vec a\\times\\vec b|=|\\vec a||\\vec b|\\sin&lt;\\vec a,\\vec b&gt;\\\\   |\\vec a\\cdot \\vec b|=|\\vec a||\\vec b|\\cos&lt;\\vec a,\\vec b&gt;   \\] </li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_65","title":"\u539f\u5219","text":"<ul> <li>\u70b9\u548c\u5411\u91cf\u4f7f\u7528\u540c\u4e00\u5957\u7ed3\u6784Point\uff0c\u4f46\u662f\u5141\u8bb8\u5411\u91cf\u62e5\u6709\u522b\u540dVec\u3002\u70b9\u548c\u5411\u91cf\u7279\u6709\u7684\u65b9\u6cd5\u5728\u5b9a\u4e49\u65f6\u52a0\u4ee5\u533a\u5206</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_66","title":"\u70b9\u5728\u4efb\u610f\u591a\u8fb9\u5f62\u5185","text":"<p>HDU1756 cupids arrow</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst double eps=1e-8;\ninline int dcmp(double a){return a&lt;-eps?-1:(a&gt;eps?1:0);}//\u5904\u7406\u7cbe\u5ea6\ninline double Abs(double a){return a*dcmp(a);}//\u53d6\u7edd\u5bf9\u503c\nstruct Point\n{\n    double x,y;\n    Point(double X=0,double Y=0)\n    {\n        x=X,y=Y;\n    }\n};\ntypedef Point Vector;\n\ndouble Dot(Vector a,Vector b) {return a.x*b.x+a.y*b.y;}\ndouble Cro(Vector a,Vector b) {return a.x*b.y-a.y*b.x;}\ndouble Len(Vector a) {return sqrt(Dot(a,a));}\nVector operator+(Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}\nVector operator-(Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}\nVector operator*(Vector a,double b){return Vector(a.x*b,a.y*b);}\nbool operator==(Point a,Point b){return !dcmp(a.x-b.x)&amp;&amp;!dcmp(a.y-b.y);}//\u4e24\u70b9\u5750\u6807\u91cd\u5408\u5219\u76f8\u7b49\n\nint n;\nPoint a[110];\n\nbool check_PL(Point p,Point a,Point b)\n{\n    return !dcmp(Cro(p-a,b-a)) &amp;&amp; dcmp(Dot(p-a,p-b))&lt;=0; //\u53c9\u4e58\u4e3a0\u8868\u4e09\u70b9\u5171\u7ebf\uff0c\u70b9\u79ef\u5c0f\u4e8e0\u8868\u793aPA\u3001PB\u53cd\u5411\n}\n\nint PIP(Point *P,int n,Point a)\n{\n    int cnt=0;\n    double temp=0;\n    for(int i=1;i&lt;=n;i++)\n    {\n        int j=i==n?1:i+1;\n        if(check_PL(a,P[i],P[j])) return 2;//\u70b9\u5728\u8fb9\u4e0a\n        if(a.y&gt;=min(P[i].y,P[j].y) &amp;&amp; a.y&lt;max(P[i].y,P[j].y))//\u7eb5\u5750\u6807\u5728\u8be5\u7ebf\u6bb5\u4e24\u7aef\u70b9\u4e4b\u95f4\n        {//temp:\u76f8\u4f3c\u4e09\u89d2\u5f62\u786e\u5b9a\u4ea4\u70b9\u7684x\u5750\u6807\n            temp=P[i].x+(a.y-P[i].y)/(P[j].y-P[i].y)*(P[j].x-P[i].x);\n            cnt+=dcmp(temp-a.x)&gt;0;//\u4ea4\u70b9\u5728A\u53f3\u65b9\n        }\n    }\n    return cnt&amp;1;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    while (cin&gt;&gt;n)\n    {\n        for(int i=1;i&lt;=n;i++)\n        {\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            a[i].x=x,a[i].y=y;\n        }\n        int m;\n        cin&gt;&gt;m;\n        for(int i=1;i&lt;=m;i++)\n        {\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            Point b(x,y);\n            if(PIP(a,n,b))\n                cout&lt;&lt;\"Yes\"&lt;&lt;endl;\n            else cout&lt;&lt;\"No\"&lt;&lt;endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_67","title":"\u70b9\u5728\u51f8\u591a\u8fb9\u5f62\u5185","text":"<p>\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u5224\u65ad</p> <p>HRBUST 1429 \u51f8\u591a\u8fb9\u5f62</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst double eps=1e-8;\ninline int dcmp(double a){return a&lt;-eps?-1:(a&gt;eps?1:0);}//\u5904\u7406\u7cbe\u5ea6\ninline double Abs(double a){return a*dcmp(a);}//\u53d6\u7edd\u5bf9\u503c\nstruct Point\n{\n    double x,y;\n    Point(double X=0,double Y=0)\n    {\n        x=X,y=Y;\n    }\n};\ntypedef Point Vector;\n\ndouble Dot(Vector a,Vector b) {return a.x*b.x+a.y*b.y;}\ndouble Cro(Vector a,Vector b) {return a.x*b.y-a.y*b.x;}\ndouble Len(Vector a) {return sqrt(Dot(a,a));}\nVector operator+(Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}\nVector operator-(Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}\nVector operator*(Vector a,double b){return Vector(a.x*b,a.y*b);}\nbool operator==(Point a,Point b){return !dcmp(a.x-b.x)&amp;&amp;!dcmp(a.y-b.y);}//\u4e24\u70b9\u5750\u6807\u91cd\u5408\u5219\u76f8\u7b49\n\nconst int N=1e5+10;\nint n;\nPoint a[N],b[N];\n\nbool check_PL(Point p,Point a,Point b)\n{\n    return !dcmp(Cro(p-a,b-a)) &amp;&amp; dcmp(Dot(p-a,p-b))&lt;=0; //\u53c9\u4e58\u4e3a0\u8868\u4e09\u70b9\u5171\u7ebf\uff0c\u70b9\u79ef\u5c0f\u4e8e0\u8868\u793aPA\u3001PB\u53cd\u5411\n}\n\nbool judge(Point a,Point L,Point R)//\u5224\u65adAL\u662f\u5426\u5728AR\u53f3\u8fb9\n{\n    return dcmp(Cro(L-a,R-a))&gt;0;\n}\n\nint PIP_of_convex(Point *P,int n,Point a)\n{\n    if(judge(P[1],a,P[2]) || judge(P[1],P[n],a)) return 0;\n    if(check_PL(a,P[1],P[2]) || check_PL(a,P[1],P[n])) return 2;\n    int L=2,R=n-1;\n    while (L&lt;R)\n    {\n        int mid=(L+R+1)/2; //OOO)XX\n        if(judge(P[1],P[mid],a)) L=mid;\n        else R=mid-1;\n    }\n    if(judge(P[L],a,P[L+1])) return 0;//\u4e25\u683c\u5728\u5916\u4fa7\n    if(check_PL(a,P[L],P[L+1])) return 2;\n    return 1;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    while (cin&gt;&gt;n)\n    {\n        for(int i=n;i&gt;=1;i--)\n        {\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            a[i].x=x,a[i].y=y;\n        }\n        int m;\n        cin&gt;&gt;m;\n        bool flag=true;\n        for(int i=1;i&lt;=m;i++)\n        {\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            b[i].x=x,b[i].y=y;\n        }\n        for(int i=1;i&lt;=m;i++)\n        {\n            if(PIP_of_convex(a,n,b[i])!=1)\n                {flag=false;break;}\n        }\n        if(flag)\n            cout&lt;&lt;\"YES\"&lt;&lt;endl;\n        else cout&lt;&lt;\"NO\"&lt;&lt;endl;\n    }\n    \n    return 0;\n}\n\n//http://acm.hrbust.edu.cn/vj/index.php?c=problem-problem&amp;id=55043\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#convex-hull","title":"\u51f8\u5305(Convex Hull)","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#graham","title":"Graham\u626b\u63cf\u6cd5","text":"<p>\u9700\u8981\u6781\u89d2\u6392\u5e8f</p> <p>https://blog.csdn.net/qq_39826163/article/details/83861353</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#andrew","title":"Andrew \u7b97\u6cd5","text":"<p>\u9700\u8981\u6309\u7167\u5750\u6807x\u3001y\u4f9d\u6b21\u6392\u5e8f\u5e76\u6b63\u53cd\u8dd1\u5171\u4e24\u6b21</p> <p>https://oi-wiki.org/geometry/convex-hull/</p> <p>https://www.cnblogs.com/yjbjingcha/p/7255457.html</p> <p>P1452 \u65cb\u8f6c\u5361\u58f3\u6a21\u7248</p> <pre><code>#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst double eps=1e-8;\ninline int dcmp(double a){return a&lt;-eps?-1:(a&gt;eps?1:0);}//\u5904\u7406\u7cbe\u5ea6\ninline double Abs(double a){return a*dcmp(a);}//\u53d6\u7edd\u5bf9\u503c\nstruct Point\n{\n    double x,y;\n    Point(double X=0,double Y=0)\n    {\n        x=X,y=Y;\n    }\n};\ntypedef Point Vector;\n\ndouble Dot(Vector a,Vector b) {return a.x*b.x+a.y*b.y;}\ndouble Cro(Vector a,Vector b) {return a.x*b.y-a.y*b.x;}\ndouble Len(Vector a) {return sqrt(Dot(a,a));}\nVector operator+(Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}\nVector operator-(Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}\nVector operator*(Vector a,double b){return Vector(a.x*b,a.y*b);}\nbool operator==(Point a,Point b){return !dcmp(a.x-b.x)&amp;&amp;!dcmp(a.y-b.y);}//\u4e24\u70b9\u5750\u6807\u91cd\u5408\u5219\u76f8\u7b49\n\nbool cmp1(Vector a,Vector b)\n{\n    if(a.x==b.x) return a.y&lt;b.y;\n    return a.x&lt;b.x;\n}\n\nint n,conv_p;\nPoint a[50010],conv[50010];\n\nint Convex_Hull(Point *P,int n, Point *st)\n{\n    int t=0;\n    if(n==1)\n    {\n        st[1]=st[2]=P[1];\n        return t=1;\n    }\n    if(n==2)\n    {\n        st[1]=P[1];\n        st[2]=st[3]=P[2];\n        return t=2;\n    }\n    sort(P+1,P+1+n,cmp1);\n    for(int i=1;i&lt;=n;i++)\n    {\n        while (t&gt;1 &amp;&amp; dcmp( Cro(st[t]-st[t-1],P[i]-st[t-1])&lt;=0 ))\n        {\n            t--;\n        }\n        st[++t]=P[i];\n    }\n    int temp=t;\n    for(int i=n-1;i&gt;=1;i--)\n    {\n        while (t&gt;temp &amp;&amp; dcmp( Cro(st[t]-st[t-1],P[i]-st[t-1])&lt;=0 ))\n        {\n            t--;\n        }\n        st[++t]=P[i];\n    }\n    return --t;\n}\n\nint dis2(Vector a,Vector b)\n{\n    return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);\n}\n\nint Rotating_calipers(Point *conv,int t)\n{\n    int ans=0,j=2;\n    for(int i=1;i&lt;=t;i++)\n    {\n        while (fabs(Cro(conv[i]-conv[j],conv[i+1]-conv[j])) &lt; fabs(Cro(conv[i]-conv[j+1],conv[i+1]-conv[j+1])))\n        {\n            j++;\n            if(j&gt;t) j=1;\n        }\n        ans=max(ans,dis2(conv[i],conv[j]));\n    }\n    return ans;\n}\n\nint main()\n{\n    scanf(\"%d\",&amp;n);\n    for(int i=1;i&lt;=n;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&amp;x,&amp;y);\n        a[i].x=x,a[i].y=y;\n    }\n    conv_p=Convex_Hull(a,n,conv);\n    printf(\"%d\",Rotating_calipers(conv,conv_p));\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#rotating-calipers","title":"\u65cb\u8f6c\u5361\u58f3(Rotating calipers)","text":"<p>https://www.jvruo.com/archives/79/</p> <p>\u7528\u4e8e\u6c42\u5e73\u9762\u6700\u8fdc\u70b9\u5bf9</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_68","title":"\u534a\u5e73\u9762\u4ea4","text":"<p>https://www.jvruo.com/archives/67/</p> <p>\u8fd9\u73a9\u610f\u4e5f\u592a\u590d\u6742\u4e86\u2026\u2026</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_69","title":"\u56fe\u8bba","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#hld","title":"\u6811\u94fe\u5256\u5206(HLD)","text":"<p>\u7528\u4e8e\u89e3\u51b3\u6811\u4e0a\u8def\u5f84\u4fee\u6539\u3001\u67e5\u8be2\u7b49\u95ee\u9898\u3002\u5c06\u6811\u5212\u5206\u6210\u82e5\u5e72\u91cd\u94fe\u540e\uff0c\u91c7\u7528\u91cd\u94fedfs\u4f18\u5148\u65b9\u5f0f\u83b7\u5f97dfn\uff0c\u8fd9\u6837\u4e00\u6765\u6811\u4e0a\u8282\u70b9\u7684dfn\u662f\u8fde\u7eed\u7684\u3002\u7ef4\u62a4dfn\u548c\u70b9\u7684\u5173\u7cfb\uff0c\u540c\u65f6\u4f7f\u7528\u6570\u636e\u7ed3\u6784\uff08\u7ebf\u6bb5\u6811\u7b49\uff09\u7ef4\u62a4\u8fde\u7eeddfn\u4e0a\u7684\u8282\u70b9\u4fe1\u606f\u4ee5\u505a\u5230\u5feb\u901f\u6811\u94fe\u4e0a\u67e5\u8be2\u548c\u4fee\u6539\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_70","title":"\u91cd\u94fe\u5256\u5206","text":"<p>\u91cd\u5b50\u8282\u70b9\uff1a\u5b50\u8282\u70b9\u4e2d\u5b50\u6811\u6700\u5927\uff08\u5b50\u6811\u4e2d\u8282\u70b9\u6700\u591a\uff0c\u5305\u542b\u6811\u6839\uff09\u7684\u4e00\u4e2a\u5b50\u8282\u70b9\u3002</p> <p>\u8f7b\u5b50\u8282\u70b9\uff1a\u9664\u4e86\u91cd\u5b50\u8282\u70b9\u5916\u7684\u5b50\u8282\u70b9</p> <p>\u91cd\u8fb9\uff1a\u6839\u5230\u91cd\u5b50\u8282\u70b9\u7684\u8fb9</p> <p>\u8f7b\u8fb9\uff1a\u9664\u4e86\u6839\u5230\u91cd\u5b50\u8282\u70b9\u7684\u8fb9\u5916\u7684\u5176\u4ed6\u5230\u5b50\u8282\u70b9\u7684\u8fb9</p> <p>\u91cd\u94fe\uff1a\u82e5\u5e72\u7531\u91cd\u8fb9\u8fde\u6210\u7684\u94fe\uff08\u5176\u4f59\u843d\u5355\u8282\u70b9\u4e5f\u89c6\u4e3a\u4e00\u6761\u91cd\u94fe\uff09</p> <p>\u901a\u8fc7\u4e24\u6b21dfs\u5b9e\u73b0\uff0c\u7b2c\u4e00\u6b21dfs\u6807\u8bb0\u91cd\u5b50\u8282\u70b9\u3001\u6df1\u5ea6\u3001\u7236\u4eb2\u3001\u5b50\u6811\u5927\u5c0f\uff1b\u7b2c\u4e8c\u6b21\u6807\u8bb0dfn\uff08\u91cd\u8fb9\u4f18\u5148\u904d\u5386\uff09\u3001rnk\uff08dfn\u7684\u53cd\u51fd\u6570\uff0c\u4e5f\u5373\u901a\u8fc7dfn\u83b7\u5f97\u8282\u70b9\u539f\u6807\u53f7\uff09\u3001top\uff08\u6240\u5728\u91cd\u94fe\u94fe\u9876\uff09\u3002</p> <p>\u6027\u8d28\uff1a</p> <ul> <li>\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe\uff0c\u6240\u6709\u7684\u91cd\u94fe\u5c06\u6574\u68f5\u6811 \u5b8c\u5168\u5256\u5206\u3002</li> <li>\u91cd\u8fb9\u4f18\u5148\u904d\u5386\uff0c\u5219\u6700\u540e\u6bcf\u6761\u91cd\u94fe\u7684dfn\uff08top\u7684dfn\uff09\u662f\u4e0a\u5347\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u6309\u7167dfn\u6392\u5e8f\u5373\u53ef\u5f97\u5230\u8fde\u7eed\u7684\u5256\u5206\u94fe\u3002</li> <li>\u5b50\u6811\u5185\u3001\u94fe\u5185\u7684dfn\u90fd\u662f\u8fde\u7eed\u7684\u3002</li> <li>\u5411\u4e0b\u7ecf\u8fc7\u8f7b\u8fb9\uff0c\u5219\u5b50\u6811\u5927\u5c0f\u81f3\u5c11\u9664\u4ee52\u3002</li> <li>\u91cd\u94fe\u6570\u91cf\u4e0d\u8d85\u8fc7\\(\\(O(\\log n)\\)\\)</li> </ul> <p>\u8def\u5f84\u4e0a\u7ef4\u62a4\uff1a\u6bcf\u6b21\u9009\u62e9\u6df1\u5ea6\u8f83\u5927\u7684\u94fe\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u4e24\u70b9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002</p> <p>\u5b50\u6811\u7ef4\u62a4\uff1a\u8bb0\u5f55\u6240\u5728\u5b50\u6811\u8fde\u7eed\u533a\u95f4\u672b\u7aef\u7684\u7ed3\u70b9\uff08\u4ed6\u55b5\u7684\u4e0d\u662f\u76f4\u63a5\u8bb0\u5f55\u5b50\u6811dfn\u6700\u5927\u662f\u8c01\u5c31\u884c\u4e86\u5417\uff08\uff09\uff09</p> <p>LCA\uff1a\u548c\u8def\u5f84\u4e0a\u7ef4\u62a4\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u5f53\u4e24\u4e2a\u8282\u70b9\u8df3\u5230\u540c\u4e00\u94fe\u65f6\uff0c\u53d6\u6df1\u5ea6\u8f83\u5c0f\u8282\u70b9\u4f5c\u4e3aLCA</p> <p>[P2590 ZJOI2008]\u6811\u7684\u7edf\u8ba1</p> <p>\u57fa\u672c\u4e0a\u4e5f\u662f\u6a21\u677f\u9898\u4e86</p> <p>P3379 \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09</p> <p>\u4f20\u7edf\u5e94\u7528</p> <p>P3384 \u3010\u6a21\u677f\u3011\u8f7b\u91cd\u94fe\u5256\u5206</p> <p>\u6a21\u677f\u9898</p> <p>[P3976 TJOI2015]\u65c5\u6e38</p> <p>\u4ecea\u8d70\u5230b\uff0c\u8def\u5f84\u4e0a\u627e\u4e24\u4e2a\u70b9\u4e70\u5356\uff08\u4e70\u70b9\u548c\u5356\u70b9\u8981\u4e00\u4e2a\u5728\u524d\u4e00\u4e2a\u5728\u540e\uff09\uff08\u4e8f\u94b1\u5219\u8f93\u51fa0\uff09\uff0c\u5b8c\u4e8b\u540e\u4fee\u6539\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u503c\u3002</p> <p>\u89e3\u6cd5\uff1a\u6811\u5256\u540e\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8def\u5f84\u6743\u503c\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u4ece\u6839\u5230\u53f6\u5b50\u7684\u6700\u5927\u6700\u5c0f\u503c\u5dee(RTL)\u3001\u4ece\u53f6\u5b50\u5230\u6839\u7684\u6700\u5927\u6700\u5c0f\u503c\u5dee(LTR)\u3002\u7ef4\u62a4\u8fd9\u51e0\u4e2a\u503c\u5373\u53ef\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#dsu-on-tree","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff08DSU on Tree\uff09","text":"<p>\u53c2\u8003\uff1ahttps://www.cnblogs.com/zwfymqz/p/9683124.html#_label1_4</p> <p>\u7528\u4e8e\u89e3\u51b3\u4e00\u7c7b\u7b26\u5408\u4e0b\u8ff0\u7279\u5f81\u7684\u9898\uff1a</p> <ul> <li>\u5bf9\u4efb\u610f\u7684\u5b50\u6811\u8be2\u95ee\uff08\u4e5f\u5373\u7edf\u8ba1\u7b54\u6848\u901a\u5e38\u53ea\u548c\u5b50\u6811\u6709\u5173\uff09</li> <li>\u65e0\u4fee\u6539</li> </ul> <p>\u6d41\u7a0b\uff1a</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9x</p> <ul> <li>\u9012\u5f52\u89e3\u51b3\u6240\u6709\u8f7b\u5b50\u6811\uff0c\u4e0d\u4fdd\u7559\u5f71\u54cd</li> <li>\u9012\u5f52\u89e3\u51b3\u91cd\u5b50\u6811\uff0c\u4fdd\u7559\u5f71\u54cd \uff08\u901a\u8fc7\u4f20\u9012\u53c2\u6570\u8868\u660e\uff09</li> <li>\u518d\u626b\u63cf\u4e00\u904d\u8f7b\u5b50\u6811\uff0c\u540c\u65f6\u7edf\u8ba1\u7b54\u6848</li> <li>\u5c06\u7b54\u6848\u4fdd\u5b58\u5230ans[x]</li> <li>\u6839\u636e\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\u5220\u9664\u5b50\u6811\u7684\u5f71\u54cd\uff0c\u5c31\u5c3d\u6570\u5220\u9664\u4e4b\uff08\u518d\u904d\u5386\u4e00\u904d\u6574\u4e2a\u5b50\u6811\uff09\uff08\u6ce8\u610f\u8fd9\u91cc\u533a\u5206\u7b54\u6848\u548c\u5f71\u54cd\uff01\uff09</li> </ul> <p>\u8fd9\u91cc\u7684\u5f71\u54cd\u662f\u7528\u6765\u8f85\u52a9\u7edf\u8ba1\u5f53\u524d\u5b50\u6811\u6839\u8282\u70b9\u7b54\u6848\u7684\u4e1c\u897f\u3002\u4f8b\u5982\u5982\u679c\u8981\u6570\u5b50\u6811\u6709\u591a\u5c11\u79cd\u989c\u8272\uff0c\u90a3\u4e48cnt\u6570\u7ec4\u8868\u793a\u7b2ci\u79cd\u989c\u8272\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u8fd9\u5c31\u662f\u9700\u8981\u5728\u626b\u63cf\u5b50\u6811\u7684\u65f6\u5019\u9700\u8981\u7edf\u8ba1\u7684\u5f71\u54cd\uff0c\u7b54\u6848\u66f4\u65b0\u4f9d\u8d56\u4e8e\u6b64\u3002</p> <p>\u590d\u6742\u5ea6\uff1a\uff08\u6765\u6e90\u4e8e\u9a6c\u524d\u5352\uff09</p> <p>\u4e00\u4e2a\u70b9\u88ab\u8bbf\u95ee\u5230\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5</p> <p>1\u3001\u5728\u66b4\u529b\u7edf\u8ba1\u8f7b\u8fb9\u7684\u65f6\u5019\u8bbf\u95ee\u5230\u3002</p> <p>\u6839\u636e\u524d\u9762\u7684\u6027\u8d28\uff0c\u8be5\u6b21\u6570&lt;logn</p> <p>2\u3001\u901a\u8fc7\u91cd\u8fb9 / \u5728\u904d\u5386\u7684\u65f6\u5019\u88ab\u8bbf\u95ee\u5230</p> <p>\u663e\u7136\u53ea\u6709\u4e00\u6b21</p> <p>cf600E. Lomsat gelral</p> <p>\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u6811\uff0c\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u7f16\u53f7\u548c\uff08\u53ef\u80fd\u6709\u591a\u79cd\u989c\u8272\u51fa\u73b0\u6b21\u6570\u90fd\u662f\u6700\u591a\u7684\uff09</p> <p>\u89e3\u6cd5\uff1a\u5f71\u54cd\u5c31\u662f\u4e0a\u6587\u4e2d\u8bf4\u7684cnt\uff08\u5b50\u6811\u4e2d\u67d0\u79cd\u989c\u8272\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff09\uff0c\u540c\u65f6\u5f00\u4e00\u4e2a\u8f85\u52a9\u53d8\u91cfmaxval\u6765\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u662f\u591a\u5c11\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#tarjan","title":"\u6709\u5411\u56feTarjan \uff08\u5f85\u8865\u5145\uff09","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_71","title":"(\u53ef\u80fd\u662f)\u8fb9\u5206\u6cbb","text":"<p>HDU2376 Average Distance</p> <p>\u5206\u6210 \u5b50\u6811 \u4e58\u4ee5 \u5b50\u6811\u5916\u7684\u70b9\uff0c\u518d\u4e58\u4ee5\u8fb9\u7684\u6743\u503c\uff0c\u5373\u53ef\u5f97\u5230\u8fb9\u7684\u8d21\u732e\u3002</p> <p>\u4e25\u683c\u6765\u8bf4\u5e94\u8be5\u662f\u8d2a\u5fc3\u800c\u4e0d\u662f\u8fb9\u5206\u6cbb\u2026\u2026</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_72","title":"\u5b57\u7b26\u4e32","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#kmp","title":"\u6269\u5c55kmp","text":"<p>(by hqh 20201018)</p> <p>https://oi-wiki.org/string/z-func/</p> <p>\u4e0b\u6587\u4e2d\u5b57\u7b26\u4e32\u4ece1\u5f00\u59cb\u8ba1\u6570\u3002</p> <p>LCP\uff1a\u6700\u957f\u516c\u5171\u524d\u7f00</p> <p>\u5b9a\u4e49\u5b57\u7b26\u4e32a(\u957f\u4e3am)\u5173\u4e8e\u6a21\u5f0f\u4e32b\u7684extend\u6570\u7ec4\uff1aextend[i]\u8868\u793aa\u7684\u5b50\u4e32a[i~m]\u548cb\u7684LCP\u957f\u5ea6\u3002\u5982a='abcde'\uff0cb='bcd', \u5219a\u7684extend[2]=3\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\u4e3abcd\uff09</p> <p>\u5b9a\u4e49\u5b57\u7b26\u4e32b(\u957f\u4e3an)\u7684z\u51fd\u6570\uff1az[i]\u8868\u793ab[i~n]\u4e0eb\u81ea\u8eab\u7684LCP\u957f\u5ea6\u3002\u5982b='ababc'\uff0cz\u51fd\u6570\u4e3a[5 0 2 0 0]\u3002z[1]\u5b9e\u9645\u4e0a\u662f\u65e0\u610f\u4e49\u7684\uff0c\u4e00\u822c\u5b9a\u4e49\u5176\u4e3ab\u7684\u957f\u5ea6\u3002</p> <p>\u6c42z\u51fd\u6570\u7684\u7b97\u6cd5\uff1a</p> <p>\u6838\u5fc3\u601d\u60f3\u662f\u5728\u91c7\u7528\u66b4\u529b\u5339\u914d\u7684\u57fa\u7840\u4e0a\uff0c\u6c42z[i]\u524d\u5148\u521d\u59cb\u5316z[i]\u4e3a\u4e4b\u524d\u67d0\u4e2a\u5df2\u7ecf\u6c42\u51fa\u7684\u503c\uff0c\u7136\u540e\u518d\u66b4\u529b\u5339\u914d\u3002</p> <p>\u5047\u8bbe\u73b0\u5728\u6c42\u5230\u67d0\u4e2a\u4f4d\u7f6ei\uff0c\u8bb0\u5f55\u4e4b\u524d\u80fd\u8bbf\u95ee\u5230\u7684\u6700\u53f3\u4f4d\u7f6e\u4e3ar\uff0c\u5bf9\u5e94\u8bbf\u95ee\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u6807\u4e3al\u3002\u5219b\u4e2d\uff0cl~r\u4e0e1~r-l+1\u5bf9\u5e94\u5b50\u4e32\u76f8\u7b49\u3002\u8fd9\u610f\u5473\u7740i\u5f00\u59cb\u5904\u67d0\u4e00\u90e8\u5206\u548c1~r-l+1\u662f\u4e00\u6837\u7684\uff0c\u89c1\u4e0b\u56fe\u3002\u56e0\u6b64\u81f3\u5c11\u53ef\u4ee5\u4fdd\u8bc1z[i]\u6709z[i-l+1]\u90a3\u4e48\u591a\u3002\u5f53\u7136\u4e5f\u6709\u53ef\u80fdz[i-l+1]\u4f5c\u4e3ai\u5904\u7684\u521d\u59cb\u957f\u5ea6\u4f1a\u8d85\u51fa\u76ee\u524d\u5df2\u7ecf\u77e5\u9053\u7684\u6700\u53f3\u4f4d\u7f6e\uff0c\u56e0\u6b64\u5e94\u8be5\u9650\u5236\u5176\u4e0d\u80fd\u8d85\u8fc7r\uff08\u56e0\u4e3ar\u7684\u53f3\u8fb9\u6211\u4eec\u662f\u4e0d\u77e5\u9053\u7684\uff0c\u9700\u8981\u66b4\u529b\u5339\u914d\u5f97\u77e5\uff09\u3002</p> <p></p> <p>\u521d\u59cb\u5316\u4e4b\u540e\u76f4\u63a5\u66b4\u529b\u5339\u914d\u5373\u53ef\u3002\u53ef\u4ee5\u8bc1\u660e\u6b64\u79cd\u505a\u6cd5\u590d\u6742\u5ea6\u662fOn\u7684\u3002\uff08\u8bc1\u660e\u53c2\u89c1\u94fe\u63a5\uff09</p> <pre><code>void get_z(int n=b_l)\n{\n    int l=1,r=1;\n    z[1]=b_l; //undefined\n    for(int i=2;i&lt;=n;i++)\n    {\n        if(i&lt;=r)\n            z[i]=min(z[i-l+1],r-i+1);//init        \n        while (i+z[i]&lt;=n &amp;&amp; b[z[i]+1]==b[i+z[i]]) //i+z[i] is next position, so accessible pos is i+z[i]-1\n            z[i]++;\n        if(i+z[i]-1&gt;r)\n            l=i,r=i+z[i]-1;\n    }\n}\n</code></pre> <p>\u6c42extend\u7684\u7b97\u6cd5\uff1a\u548cz\u51fd\u6570\u5dee\u4e0d\u591a</p> <pre><code>void exkmp(int m=a_l,int n=b_l) //get extend array\n{\n    while(extend[1]&lt;=m &amp;&amp; a[1+extend[1]]==b[1+extend[1]]) extend[1]++;\n    int l=1,r=1;\n    for(int i=2;i&lt;=m;i++)\n    {\n        if(i&lt;=r)\n            extend[i]=min(z[i-l+1],r-i+1);\n        while (i+extend[i]&lt;=m &amp;&amp; b[extend[i]+1]==a[i+extend[i]]) \n            extend[i]++;\n        if(i+extend[i]-1&gt;r)\n            l=i,r=i+extend[i]-1;\n    }\n}\n</code></pre> <p>\u6a21\u5f0f\u5339\u914d\uff1a\u663e\u7136\u6c42\u51faextend\u6570\u7ec4\u540e\uff0cextend[i]=n\u5904\u610f\u5473\u7740\u5339\u914d\u6210\u529f\uff08\u4ecei\u5f00\u59cb\u7684\u4e00\u6bb5\u5b50\u4e32\u4e0eb\u5b8c\u5168\u91cd\u5408\uff09\u3002</p> <p>\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\uff1a\u5047\u8bbe\u5bf9\u4e8e\u5b57\u7b26\u4e32a\uff08\u957f\u4e3an\uff09\uff0c\u540ei+1\u5b57\u7b26\u6784\u6210\u7684\u5b50\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\u5df2\u7ecf\u6c42\u51fa\uff08\u8bbe\u4e3aans\uff09\uff0c\u73b0\u5728\u6211\u4eec\u6765\u6c42\u540ei\u4e2a\u5b57\u7b26\u4e2d\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\u3002\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u5728\u5b57\u7b26\u4e32\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5b57\u7b26c,\u4f7f\u5f97a:=c+a\u3002\u518d\u7528On\u7684\u65f6\u95f4\u6c42\u51fa\u65b0\u5b57\u7b26\u4e32\u7684z\u51fd\u6570\uff0c\u7136\u540e\u904d\u5386z[2~n]\uff0c\u8fd9\u4e4b\u4e2d\u6700\u5927\u7684\u503cz[j]\u5373\u4e3a\u65b0\u5b57\u7b26\u4e32\u7684\u6700\u957f\u91cd\u5408\u524d\u7f00\uff0c\u663e\u7136\u5c0f\u4e8e\u6b64\u957f\u5ea6\u7684\u65b0\u5b57\u7b26\u4e32\u524d\u7f00\u4e5f\u4f1a\u91cd\u5408\uff0c\u56e0\u6b64ans+=n-max(z[2~n])</p> <p>\u5b57\u7b26\u4e32\u538b\u7f29\uff1a\uff08\u5f85\u8865\u5145\uff09</p> <p>P5410 \u3010\u6a21\u677f\u3011\u6269\u5c55 KMP\uff08Z \u51fd\u6570\uff09</p> <p>\u6a21\u677f\u9898</p> <p>[P2375 NOI2014]\u52a8\u7269\u56ed</p> <p>\u9898\u610f\uff1a\u6c42\u5b57\u7b26\u4e32a\u7684num\u6570\u7ec4\uff0cnum[i]\u8868\u793a\u5b50\u4e32a[1~i]\u540e\u7f00\u4e0e\u524d\u7f00\u76f8\u540c\u4e14\u524d\u540e\u7f00\u4e92\u4e0d\u91cd\u53e0\u7684\u6570\u76ee\u3002\u5982\"abababa\",num[7]=2\uff0c\u56e0\u4e3a\"a\", \"aba\"\u4e3a\u76f8\u540c\u524d\u540e\u7f00\uff0c\u4f46\"ababa\"\u4e0d\u662f\uff0c\u56e0\u4e3a\u91cd\u53e0\u4e86\u3002</p> <p>\u89e3\u6cd5\uff1a\u8003\u8651\u5230a\u7684z\u51fd\u6570\u7684\u610f\u4e49\u4e3ai\u5f00\u59cb\u7684\u5b50\u4e32\u4e0e\u81ea\u8eab\u7684LCP\u957f\u5ea6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u66f4\u77ed\u7684\u957f\u5ea6\uff08\u8bbe\u6b64\u65f6\u7ec8\u70b9\u4e3aj\uff09\uff0ca[i~j]\u4e5f\u662fa\u7684\u524d\u7f00\u3002\u6bd4\u5982a=\"bbbbb\",z[3]=3\uff0c\u4e5f\u5373a[1~3]\u4e0ea[3~5]\u76f8\u540c\uff0c\u90a3\u4e48a[1~2]\u4e0ea[3~4], a[1]\u4e0ea[3]\u4e5f\u76f8\u540c\u3002</p> <p>\u56e0\u6b64\u5047\u5982\u6ca1\u6709\u4e0d\u80fd\u91cd\u53e0\u7684\u9650\u5236\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4f4d\u7f6ei\uff0c\u5176z[i]\u4f1a\u5bf9i~i+z[i]-1\u5904\u7684num\u90fd\u67091\u7684\u8d21\u732e\u3002\u8003\u8651\u4e0a\u4e0d\u80fd\u91cd\u53e0\u7684\u9650\u5236\uff0c\u56e0\u4e3az[i]\u53ef\u80fd\u5f88\u5927\u800c\u5bfc\u81f4\u516c\u5171\u524d\u7f00\u91cd\u53e0\uff0c\u56e0\u6b64\u5bf9\u4e8ez[i]&gt;=i\u7684\u90e8\u5206\u7684\u8d21\u732e\u4e0d\u4e88\u8003\u8651\u5373\u53ef\u3002\u4e5f\u5373z[i]\u5bf9i~min(i+z[i]-1,i+(i-1)-1)\u7684numm\u6709\u8d21\u732e\u3002</p> <p>\u6700\u540e\u5dee\u5206\u4e00\u4e0b\u518d\u7d2f\u52a0\u5dee\u5206\u8d21\u732e\u5373\u53ef\u3002\uff08\u5f53\u7136\u8fd9\u9898\u4f60\u4e5f\u53ef\u4ee5\u7528\u4e00\u822ckmp\u505a\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#cf1051e-vasya-and-big-integers","title":"CF1051E Vasya and Big Integers","text":"<p>\u9898\u610f\uff1a\u7ed9\u4e09\u4e2a\u5927\u6570a,L,R, \u6c42\u5c06a\u5212\u5206\u6210\u6bcf\u6bb5\u6784\u6210\u7684\u6570\u65e0\u524d\u5bfc\u96f6\u4e14\u5927\u5c0f\u4ecb\u4e8e[L,R]\u4e4b\u95f4\u7684\u65b9\u6848\u6570\uff08Mod 998244353\uff09</p> <p>\\(1\\le a\\le 1e(1e6), 0\\le L\\le R\\le 1e(1e6)\\)\uff0c\u4e5f\u5373\u4e0a\u9650\u6709\u5341\u4e07\u4f4d\u3002</p> <p>\u89e3\u6cd5\uff1a\u8bbe\\(dp[j]\\)\u8868\u793a\u4ee5j~j+1\u4e4b\u95f4\u4f5c\u4e3a\u4e00\u6bb5\u7684\u8fb9\u754c\uff0c\u5212\u5206\u7684\u65b9\u6848\u6570\u3002\u5219 $$ dp[j]=\\sum(dp[i]) $$ \u5176\u4e2di\u4e3a\u540c\u65f6\u6ee1\u8db3\u4e0b\u97623\u4e2a\u6761\u4ef6\u7684\u6240\u6709\u6b63\u6574\u6570\uff1a</p> <ol> <li>\\(0\\le i \\le j-1\\)</li> <li>\\(a[i+1]\\neq 0\\) \uff08\u9664\u975eL\u4ec5\u6709\u4e00\u4f4d\uff0c\u53c2\u89c1\u4e0b\u6587\u8ba8\u8bba\uff09</li> <li>\\(a[i+1 \\text{~} j]\\)\u6784\u6210\u7684\u6570\u5728[L,R]\u4e4b\u5185</li> </ol> <p>\u6761\u4ef62\u662f\u4e3a\u4e86\u9650\u5236\u6709\u524d\u5bfc\u96f6\u7684\u5212\u5206\u4e0d\u80fd\u88ab\u8f6c\u79fb\u3002\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\u4e0b\u8fd9\u6bb5\u80fd\u4ee50\u5f00\u5934\uff0c\u5c31\u662f\u8fd9\u6bb5\u6784\u6210\u7684\u6570\u672c\u8eab\u5c31\u662f0\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0bL=0\uff0c\u56e0\u6b64i=j-1\u8fd9\u79cd\u60c5\u51b5\u7684\u5212\u5206\u9700\u8981\u505a\u7279\u5224\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u6613\u53d1\u73b0\u6ee1\u8db3\u6761\u4ef6\u7684i\u662f\u8fde\u7eed\u7684\u3002\u8bbea[i+1~j]\u6784\u6210\u7684\u6570\u4f4dM\uff0c|M|\u4e3a\u4e00\u4e2a\u6570\u7684\u6570\u4f4d\u957f\u5ea6\uff0c\u5219\u663e\u7136|L|&lt;|M|&lt;|R|\u7684\u60c5\u51b5\u90fd\u6ee1\u8db3\u6761\u4ef63\uff0c\u552f\u72ec\u53d6\u7b49\u53f7\u5904\u9700\u8981\u6bd4\u8f83L\u6216\u8005R\u4e0eM\u7684\u5927\u5c0f\u65b9\u80fd\u786e\u5b9a\u5bf9\u5e94\u4f4d\u7f6e\u7684i\u662f\u5426\u6ee1\u8db3\u6761\u4ef63\u3002\u800c\u6570\u7684\u6bd4\u8f83\u53ef\u901a\u8fc7\u6bd4\u8f83\u4e24\u6570\u7684LCP\u540e\u4e00\u4f4d\u89e3\u51b3\u3002\u6c42\u51faL\u3001R\u7684z\u51fd\u6570\uff0c\u518d\u6c42\u51faa\u5173\u4e8eL\u3001R\u7684extend\u6570\u7ec4\u5373\u53ef\u3002\u5f53\u7136\u6700\u540e\u8981\u4fdd\u8bc1i\u6ee1\u8db3\u6761\u4ef61.</p> <p>\u8fde\u7eed\u7684\u4e00\u6bb5i\u7684\u8f6c\u79fb\u53ef\u901a\u8fc7\u4fdd\u5b58dp\u7684\u524d\u7f00\u548cdpsum\u5b9e\u73b0\uff0c\u4f46\u5f53a[j+1]=0\u65f6,\u5176\u4e0d\u5e94\u8be5\u88ab\u8ba1\u5165dpsum\u4e2d\uff0c\u4ee5\u514d\u7834\u574f\u6761\u4ef62.</p> <p>\u5177\u4f53\u5b9e\u73b0\u53c2\u89c1\u4ee3\u7801\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#ac","title":"AC\u81ea\u52a8\u673a","text":"<p>\uff08By hqh 20201031\uff09</p> <p>https://oi-wiki.org/string/ac-automaton/</p> <p>\u81ea\u52a8\u673a\u662f\u4e00\u79cd\u6709\u5411\u56fe\uff0c\u56fe\u4e0a\u7684\u7ed3\u70b9\u8868\u793a\u5904\u4e8e\u67d0\u79cd\u72b6\u6001\uff0c\u800c\u8fb9\u8868\u793a\u72b6\u6001\u7684\u8f6c\u79fb\u3002</p> <p>AC\u81ea\u52a8\u673a\u7684\u4e3b\u8981\u7528\u9014\u662f\u201c\u591a\u6a21\u5f0f\u5339\u914d\u201d\uff0c\u4e5f\u5373\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u6a21\u5f0f\u4e32\uff0c\u518d\u7ed9\u5b9a\u4e00\u4e2a\u4e3b\u4e32\uff0c\u8981\u6c42\u51fa\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <p>\u4e3b\u8981\u7684\u601d\u60f3\u662f\u5c06\u591a\u4e2a\u6a21\u5f0f\u4e32\u6784\u5efatrie\u6811\uff0c\u7136\u540e\u901a\u8fc7\u4fee\u6539trie\u6811\u7684\u4e00\u4e9b\u8fb9\uff0c\u6765\u5b9e\u73b0\u591a\u6a21\u5f0f\u5feb\u901f\u5339\u914d\u3002\u56e0\u6b64\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728trie\u6811\u4e0a\u8dd1kmp\u3002</p> <p>\u5bf9AC\u81ea\u52a8\u673a\u800c\u8a00\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7684\u72b6\u6001\u8868\u793a\u5f53\u524d\u591a\u6a21\u5f0f\u5339\u914d\u7684\u8fdb\u5ea6\uff08\u5728\u5339\u914d\u7ed3\u675f\u5904\uff0c\u5bf9\u5e94\u7ed3\u70b9\u62e5\u6709\u4e00\u4e2a\u5339\u914d\u5b8c\u6210\u6807\u8bc6\u7b26end[u]\u8868\u793a\u6210\u529f\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff09\uff1b\u8fb9\u662f\u5b57\u7b26\uff0c\u5f15\u5bfc\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002</p> <p>### fail\u6307\u9488</p> <p>\u6784\u5efa\u81ea\u52a8\u673a\u7684\u5173\u952e\u5728\u4e8efail\u6307\u9488\u3002\u6784\u5efa\u5b8c\u6210trie\u6811\u540e\uff0c\u6211\u4eec\u5229\u7528bfs\u6784\u5efafail\u6307\u9488\u3002</p> <p>fail\u6307\u9488\u4ee3\u8868\u7684\u610f\u4e49\u662f\u6307\u5411trie\u6811\u4e2d\u7684\u53e6\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e2a\u7ed3\u70b9\u6ee1\u8db3\u4ece\u6839\u8d70\u5230\u5bf9\u5e94\u7ed3\u70b9\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u662f\u5f53\u524d\u7ed3\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u540e\u7f00\u3002\u6bd4\u5982\u5f53\u524d\u7ed3\u70b9\u5bf9\u5e94\u5b57\u7b26\u4e32\u662fabaaa\uff0ctrie\u6811\u4e0a\u8fd8\u6709\u53e6\u4e00\u6761\u8def\u5f84\u8868\u793aaaa\uff0c\u5219\u5176fail\u6307\u5411\u6b64\u7ed3\u70b9\u3002</p> <p>\u5f53\u6211\u4eec\u5339\u914d\u8fc7\u7a0b\u4e2d\u5931\u914d\u65f6\uff08\u8d70\u5230\u67d0\u4e00\u4e2a\u7ed3\u70b9\u540e\uff0ctrie\u6811\u4e0a\u5bf9\u5e94\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u7ed3\u70b9\u4e0d\u5b58\u5728\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8df3\u5230fail\uff0c\u518d\u7ee7\u7eed\u5c1d\u8bd5\u5339\u914d\u3002\u8fd9\u76f8\u5f53\u4e8e\u629b\u5f03\u4e00\u90e8\u5206\u5f53\u524d\u6a21\u5f0f\u4e32\u524d\u7f00\u4f7f\u5f97\u5339\u914d\u80fd\u591f\u7ee7\u7eed\u8fdb\u884c\u3002</p> <p>\u5177\u4f53\u6784\u5efa\u65b9\u5f0f\u662f\u7528bfs\uff0c\u53d6\u51fa\u961f\u5934\u7ed3\u70b9u\uff0c\u7136\u540e\u904d\u5386\u6b64\u8282\u70b9\u7684\u63a5\u4e0b\u6765\u7684\u6240\u6709\u53ef\u80fd\u5b57\u7b26i\uff080~25\uff09\uff0c\u6309\u7167\u5982\u4e0b\u4ee3\u7801\u9012\u63a8\u5730\u66f4\u65b0\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684fail\u6307\u9488\uff1a</p> <pre><code>fail[trie[u][i]]=trie[fail[u]][i];\n</code></pre> <p>\u4e5f\u5373\u8ba9\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684fail\u6307\u9488\uff0c\u6307\u5411\u5f53\u524d\u7ed3\u70b9fail\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26i\u5bf9\u5e94\u7684\u7ed3\u70b9\u3002\u56e0\u4e3a\u662f\u7528bfs\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u66f4\u6d45\u7684\u7ed3\u70b9\u5df2\u7ecf\u88ab\u66f4\u65b0\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002</p> <p>\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1\u6587\u5934\u6240\u7ed9\u94fe\u63a5\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_73","title":"\u5b57\u5178\u56fe","text":"<p>\u4f7f\u7528fail\u6307\u9488\u5728\u5931\u914d\u65f6\u8df3\u8dc3\u5f88\u86cb\u75bc\uff0c\u56e0\u4e3a\u5982\u679c\u8df3\u4e86\u4e4b\u540e\u8fd8\u662f\u5931\u914d\u90a3\u4e48\u4f60\u8fd8\u662f\u5f97\u7ee7\u7eed\u4ecefail[u]\u7ee7\u7eed\u8df3\u5230fail[fail[u]]\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f</p> <p>\u6ce8\u610f\u5230\u5982\u679c\u5728u\u5904\u524d\u5f80i\u5b57\u7b26\u65f6\u5931\u914d\uff0c\u90a3\u4e48trie[u][i] \u5fc5\u7136\u672a\u5b9a\u4e49\uff0c\u6211\u4eec\u901a\u8fc7\u6539\u5199trie[u][i] \u4f7f\u5f97\u5176\u76f4\u63a5\u6307\u5411\u4e0b\u4e00\u4e2a\u4e0d\u5931\u914d\u7684fail\u5373\u53ef\u3002</p> <p>\u6bd4\u5982\uff1a</p> <pre><code>\u3002\u3002\u3002\n\uff08\u524d\u9762\u662fBFS\u53d6\u51fa\u961f\u5934u\u7ed3\u70b9\uff09\n\nfor(int i=0;i&lt;26;i++)\n        {\n            if(trie[u][i])\n            {\n                fail[trie[u][i]]=trie[fail[u]][i];\n                q.push(trie[u][i]);\n            }\n            else\n            {\n                trie[u][i]=trie[fail[u]][i];\n            }\n        }\n\u3002\u3002\u3002\n</code></pre> <p>\u4f7f\u7528<code>trie[u][i]=trie[fail[u]][i];</code> \u5728\u6c42fail\u7684\u540c\u65f6\u6539\u5199\u672a\u5b9a\u4e49trie\u6307\u9488\u5373\u53ef\u3002\u8fd9\u6837\uff0c\u5728\u5339\u914d\u65f6\u53ef\u4ee5\u76f4\u63a5\u4ee4<code>u=trie[u][i]</code>\uff08\u4e0d\u8bba\u662f\u5426\u5931\u914d\uff09\u3002</p> <p>\u8fd9\u6837\u4e4b\u540etrie\u5176\u5b9e\u5df2\u7ecf\u4e0d\u518d\u662f\u4e00\u68f5\u6811\uff0c\u800c\u662f\u4e00\u4e2a\u4f1a\u81ea\u6307\u7684\u56fe\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5b57\u5178\u56fe\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#last","title":"last\u4f18\u5316","text":"<p>\u4e8b\u5b9e\u4e0a\uff0c\u6c42\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u4e0d\u4ec5\u9700\u8981\u5728\u5b57\u5178\u56fe\u4e0a\u904d\u5386\uff0c\u800c\u4e14\u6bcf\u904d\u5386\u4e00\u4e2a\u7ed3\u70b9\u8fd8\u5f97\u8df3fail\uff08\u4e0d\u8bba\u5931\u914d\u4e0e\u5426\uff09\uff0c\u56e0\u4e3a\u4f60\u5e76\u4e0d\u77e5\u9053\u5f53\u524d\u5339\u914d\u4f4d\u7f6e\u6709\u591a\u5c11\u4e2a\u6a21\u5f0f\u4e32\u80fd\u5339\u914d\u3002</p> <p>\u6bd4\u5982\uff1a\u4e3b\u4e32abaaa\uff0c\u6a21\u5f0f\u4e32aaa\u3001baaa\uff1b\u5339\u914d\u5230\u4e3b\u4e32\u7684\u6700\u540e\u4e00\u4e2aa\u65f6\uff0c\u4f1a\u5728trie\u56fe\u4e0a\u7684baaa\u5904\uff0c\u4f46\u8fd8\u662f\u5f97\u8df3fail\uff0c\u8df3\u5230trie\u56fe\u4e0a\u7684aaa\u4e0a\uff0c\u624d\u80fd\u77e5\u9053\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e5f\u5728\u4e3b\u4e32\u6700\u540e\u4e00\u4e2aa\u5904\u6210\u529f\u5339\u914d\u3002</p> <p>\u8fd9\u4e2a\u505a\u6cd5\u5e26\u6765\u7684\u4ee3\u4ef7\u5176\u5b9e\u53ef\u4ee5\u6362\u6210\u53e6\u4e00\u79cd\u505a\u6cd5\u4ee5\u5f7b\u5e95\u6539\u5584\uff08\u89c1\u4e0b\u6587fail\u6811\uff09\uff0c\u4f46\u8fd9\u91cc\u5148\u8bf4\u660e\u53e6\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\u3002</p> <p>\u5728\u8df3fail\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u662f\u67d0\u4e00\u6a21\u5f0f\u4e32\u7684\u7ec8\u70b9\u3002\u800c\u5728\u5b57\u5178\u56fe\u6784\u5efa\u5b8c\u6bd5\u540e\uff0cfail\u6811\u5176\u5b9e\u5bf9\u5339\u914d\u800c\u8a00\u610f\u4e49\u5c31\u4e0d\u5927\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671bfail\u80fd\u76f4\u63a5\u8df3\u5230\u201c\u67d0\u4e2a\u6a21\u5f0f\u4e32\u201d\u7684\u7ed3\u5c3e\u3002\u6211\u4eec\u5f15\u5165last\u6570\u7ec4\uff0c\u5176\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u201c\u67d0\u4e2a\u6a21\u5f0f\u4e32\u201d\u7684\u7ed3\u5c3e\u3002</p> <p>\u6211\u4eec\u5728\u6784\u5efafail\u6307\u9488\u65f6\u6dfb\u52a0\u8fd9\u4e48\u4e00\u53e5\u8bdd\uff1a</p> <pre><code>...\n                fail[trie[u][i]]=trie[fail[u]][i];\n                last[trie[u][i]]=(id[fail[trie[u][i]]]==0)?(last[fail[trie[u][i]]]):(fail[trie[u][i]]); //\u6709\u6548\u5b57\u7b26\u4e32\u7ed3\u5c3e\n                q.push(trie[u][i]);\n\n...\n</code></pre> <p>id[u] \u8868\u793a\u7ed3\u70b9u\u4f5c\u4e3a\u67d0\u4e00\u6a21\u5f0f\u4e32\u7684\u7ed3\u5c3e\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7f16\u53f7\uff08\u5982\u679cu\u4e0d\u662f\u67d0\u4e00\u4e32\u7684\u7ed3\u5c3e\u8282\u70b9\uff0c\u90a3\u4e48\u5176\u4e3a0\uff09\u3002\u901a\u8fc7last\u7684\u9012\u63a8\u5373\u53ef\u6c42\u5f97last\u6570\u7ec4\u3002\u5728\u5339\u914d\u6c42\u89e3\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6539\u8df3last\u800c\u975efail\u5373\u53ef\u3002</p> <p>\u4f46\u8fd9\u4e48\u505a\u7684\u4f18\u5316\u4ec5\u4ec5\u53ea\u662f\u5e38\u6570\u4e0a\u7684\uff0c\u5982\u679c\u7ed9\u82e5\u5e72\u4e2a\u6a21\u5f0f\u4e32a\u3001aa\u3001aaa\u3001aaaa\u2026\u2026\uff0c\u90a3\u8fd8\u662f\u4f1a\u88ab\u5361\uff0c\u56e0\u6b64\u6211\u4eec\u5f15\u5165fail\u6811\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#fail","title":"fail\u6811","text":"<p>\u5c06\u6240\u6709\u7ed3\u70b9\u7684fail\u6307\u9488\u53cd\u8fc7\u6765\u63a5\uff0c\u5c06\u6784\u6210\u4e00\u4e2a\u4ee5trie\u56fe0\u7ed3\u70b9\u4e3a\u6839\u7684\u6811\uff0c\u6210\u4e3afail\u6811\u3002\u4ecefail\u6811\u5411\u4e0b\u8d70\uff0c\u76f8\u5f53\u4e8e\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u524d\u6dfb\u52a0\u524d\u7f00\u3002\u6bd4\u5982abb\uff0c\u4ecefail\u6811\u5411\u4e0b\u8d70\u5230fuabb\uff08\u5f53\u7136\u53ef\u80fd\u4f1a\u6709\u597d\u51e0\u4e2a\u5b69\u5b50\uff0c\u8fd9\u91cc\u53ea\u662f\u4e3e\u4e2a\u4f8b\u5b50\uff09\u3002</p> <p>\u6784\u5efa\u6b64\u6811\u4e5f\u5f88\u7b80\u5355\uff0c\u5728fail\u6307\u9488\u6784\u5efa\u5b8c\u6210\u540e\uff1a</p> <pre><code>    for(int i=1;i&lt;=total;i++)\n    {\n        adde(fail[i],i);\n    }\n</code></pre> <p>\u56de\u5230\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u4e4b\u524d\u6211\u4eec\u901a\u8fc7last\u6570\u7ec4\u8fdb\u884c\u4e86\u4f18\u5316\u3002\u73b0\u5728\u5229\u7528fail\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6811\u4e0a\u5dee\u5206\u7684\u65b9\u6cd5\uff0c\u6307\u5728\u5f53\u524d\u7ed3\u70b9u\u5904\u6dfb\u52a0\u4e00\u4e2a\u6807\u8bb01\uff0c\u8868\u793a\u81eau\u5230\u6839\u7684\u8def\u5f84\u90fd\u4f1a\u53d7\u6b64\u6807\u8bb0\u5f71\u54cd\u3002\u5339\u914d\u7ed3\u675f\u4e4b\u540e\u5bf9fail\u6811\u505adfs\u4ee5\u6c42\u51fa\u5dee\u5206\u7684\u76f8\u52a0\u503c\uff0c\u6700\u540e\u770b\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\uff0c\u6b64\u503c\u5c31\u662f\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <p>\u5f53\u7136fail\u6811\u8fd8\u6709\u5f88\u591a\u7528\u9014\uff0c\u9664\u4e86\u5dee\u5206\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u5176dfn+\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u3001\u6811\u94fe\u5256\u5206\u2026\u2026\u55ef\u3002</p> <p>P3808 \u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u7b80\u5355\u7248\uff09</p> <p>\u677f\u5b50\u9898\uff0c\u53ea\u7528\u6c42\u51fa\u51fa\u73b0\u7684\u6a21\u5f0f\u4e32\u800c\u4e0d\u9700\u8981\u7edf\u8ba1\u4e2a\u6570\uff0c\u76f4\u63a5\u8df3fail\u6307\u9488\u5b8c\u6210\u5339\u914d\u3002</p> <p>P3796 \u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09</p> <p>\u540c\u6837\u662f\u677f\u5b50\u9898\uff0c\u6c42\u51fa\u51fa\u73b0\u7684\u6a21\u5f0f\u4e32\u7684\u6b21\u6570\uff0c\u6539\u7528last\u6307\u9488\u8df3\u8dc3\u5373\u53ef\u3002</p> <p>P5357 \u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09</p> <p>\u9898\u610f\u548c\u52a0\u5f3a\u7248\u76f8\u540c\uff0c\u4f46\u9700\u8981\u7528fail\u6811+\u5dee\u5206\u624d\u80fd\u8fc7\uff08\u89c4\u907f\u6389\u5339\u914d\u65f6\u8df3\u4efb\u4f55\u6307\u9488\uff09\uff0c\u5177\u4f53\u505a\u6cd5\u4e0a\u6587\u5df2\u6709\u63cf\u8ff0</p> <p>Educational Codeforces Round 97 (Rated for Div. 2)G\uff1aDeath DBMS</p> <p>\u9898\u610f\uff1a\u7ed9\u4e00\u5806\u6a21\u5f0f\u4e32\uff08\u53ef\u80fd\u672c\u8d28\u76f8\u540c\uff0c\u4f46\u4ed6\u4eec\u7684\u7f16\u53f7\u4e0d\u540c\uff09\uff0c\u6bcf\u4e2a\u7f16\u53f7\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u521d\u59cb\u6743\u503c\u4e3a0\uff0c\u7136\u540e\u7ed9\u51fa\u4e24\u79cd\u64cd\u4f5c\uff1a\u7b2c\u4e00\u79cd\u64cd\u4f5c\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u51fa\u5176\u4e2d\u51fa\u73b0\u7684\u6a21\u5f0f\u4e32\u7684\u6700\u5927\u6743\u503c\uff1b\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u7ed9\u51fa\u4e24\u4e2a\u6570x y\uff0c\u8981\u5c06\u7b2cx\u4e2a\u6a21\u5f0f\u4e32\u7684\u6743\u503c\u6539\u4e3ay</p> <p>\u89e3\u6cd5\uff1a\u6ce8\u610f\u6b64\u9898\u4e2d\uff0c\u4e24\u4e2a\u672c\u8d28\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u6743\u503c\u3002</p> <p>\u4f7f\u7528ac\u81ea\u52a8\u673a\u6784\u5efa\u5b57\u5178\u56fe\uff0c\u90a3\u4e48\u201c\u4e24\u4e2a\u672c\u8d28\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u6743\u503c\u201d\u5c31\u76f8\u5f53\u4e8e\u5728\u5b57\u5178\u56fe\u7684\u7ed3\u70b9\u4e0a\u7ef4\u62a4\u591a\u4e2a\u6743\u503c\uff08\u4fee\u6539\u548c\u67e5\u8be2\u6700\u5927\u503c\uff09\u3002</p> <p>\u53ef\u4ee5\u5728\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u5f00\u4e2a\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u3002\u4f46\u4e3a\u4e86\u5b9e\u73b0\u65b9\u4fbf\uff0c\u8fd9\u91cc\u4f7f\u7528N\u4e2a\uff08N\u4e3a\u5b57\u5178\u56fe\u4e2d\u7ed3\u70b9\u4e2a\u6570\uff09multiset\u6765\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u7684\u591a\u4e2a\u6743\u503c\u3002</p> <p>\u5269\u4e0b\u7684\u5c31\u7b80\u5355\u4e86\u3002\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u7528ac\u81ea\u52a8\u673a\u5339\u914d\uff0c\u6bcf\u8d70\u5230\u4e00\u4e2a\u7ed3\u70b9\u8df3last\uff08\u8fd9\u9898\u7684\u6570\u636e\u8df3fail\u4f1at\uff09\uff0c\u7136\u540e\u6c42\u5bf9\u5e94\u7ed3\u70b9multiset\u4e2d\u503c\u7684\u6700\u5927\u503c\u3002\u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u5728\u5b57\u5178\u56fe\u4e0a\u627e\u5230\u5bf9\u5e94\u4e32\u540e\u4fee\u6539\u5bf9\u5e94multiset\uff08\u5220\u9664\u65e7\u7684\u6743\u503c\u5e76\u63d2\u5165\u65b0\u6743\u503c\uff09\u5373\u53ef</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_74","title":"\u540e\u7f00\u6570\u7ec4","text":"<p>\u540e\u7f00\u6570\u7ec4SA\uff1a\u5b57\u7b26\u4e32\u5404\u4e2a\u540e\u7f00\u7684\u6392\u540d\u5230\u4e0b\u6807\u7684\u6620\u5c04\u3002\u5982aabab\uff0c\u6309\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u540e\u7f00\u5206\u522b\u4e3aaabab\u3001ab\u3001abab\u3001b\u3001bab\uff0csa[1~5 ] =1 4 2 5 3</p> <p>\u6392\u540d\u6570\u7ec4RK\uff1a\u4ece\u67d0\u4e00\u4f4d\u7f6ei\u5f00\u59cb\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u6240\u6784\u6210\u7684\u540e\u7f00\uff0c\u5728\u6240\u6709\u540e\u7f00\u4e2d\u7684\u6392\u540d\u3002\u76f8\u5f53\u4e8eSA\u7684\u9006\u6620\u5c04\u3002</p> <p>\u6c42\u6cd5\uff1a\u500d\u589e\u6cd5\u3002\u6bcf\u6b21\u8003\u8651\u957f\u5ea6w\u4e3a1\u30012\u30014\u30018\u2026\u2026\uff08\u5230\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6700\u59272\u7684\u5e42\u6b21\u4e3a\u6b62\uff09\u7684\u5b50\u4e32\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u4f4d\u7f6ei\uff0c\u7528\u5176\u4f4d\u7f6ei\u7684sa\u5bf9\u5e94\u503c\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4f4d\u7f6e\u4e3ai+w\u7684sa\u5bf9\u5e94\u503c\u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff08\u5982\u679ci+w\u5927\u4e8en\u5c31\u770b\u6210\u65e0\u7a77\u5c0f\uff09\uff0c\u8fdb\u884c\u6392\u5e8f\u3002\u7531\u4e8e\u53ea\u6709\u4e24\u4e2a\u5173\u952e\u5b57\uff0c\u56e0\u6b64\u6392\u5e8f\u4f7f\u7528\u7ebf\u6027\u6392\u5e8f\u6cd5 \uff08\u6bd4\u5982\u8ba1\u6570\u6392\u5e8f\u6216\u8005\u57fa\u6570\u6392\u5e8f\uff0c\u4e0b\u6587\u4e2d\u4e3b\u8981\u91c7\u7528\u8ba1\u6570\u6392\u5e8f\uff0c\u56e0\u5176\u590d\u6742\u5ea6\u53ea\u548c\u503c\u57df\u6709\u5173\uff09\uff0c\u53ef\u5c06\u6c42SA\u7684\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u964d\u81f3O\uff08nlogn\uff09\u3002\u5177\u4f53\u53c2\u89c1\u4ee3\u7801\u3002</p> <p>\u53e6\u4e00\u79cd\u6c42\u6cd5\u662f\u7528\u540e\u7f00\u81ea\u52a8\u673a\u3002\u53c2\u89c1\u201c\u540e\u7f00\u81ea\u52a8\u673a\u201d\u4e00\u8282\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#height","title":"Height \u6570\u7ec4","text":"<p>\u542b\u4e49\uff1a\u7b2ci\u540d\u548c\u7b2ci-1\u540d(\u6ce8\u610f\u662f\u6392\u540d)\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6</p> <pre><code>height[i]=lcp(sa[i],sa[i-1])\n</code></pre> <p>\u5f15\u7406\uff1a\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u540e\u7f00\u5bf9\u5e94\u7684height\u503c\uff0c\u5927\u4e8e\u7b49\u4e8e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\uff08i-1\uff09\u7684height\u503c-1</p> <pre><code>height[rk[i]]&gt;=height[rk[i-1]]-1\n</code></pre> <p>\u6c42\u89e3\uff1a\u501f\u52a9\u4e0a\u9762\u7684\u5f15\u7406\u53ef\u5728On\u65f6\u95f4\u5185\u6c42\u51faheight\u6570\u7ec4\u3002</p> <pre><code>for (i = 1, k = 0; i &lt;= n; ++i) {\n  if (k) --k;\n  while (s[i + k] == s[sa[rk[i] - 1] + k]) ++k;\n  ht[rk[i]] = k;  // height\u592a\u957f\u4e86\u7f29\u5199\u4e3aht\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#height_1","title":"Height \u6570\u7ec4\u7684\u5e94\u7528","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#suffix-automatorsam","title":"\u540e\u7f00\u81ea\u52a8\u673a\uff08Suffix Automator\uff0cSAM\uff09","text":"<p>\u540e\u7f00\u81ea\u52a8\u673a\u662f\u80fd\u591f\u5339\u914d\u67d0\u4e2a\u5b57\u7b26\u4e32S\u7684\u6240\u6709\u540e\u7f00\u7684\u81ea\u52a8\u673a\u3002\u5c31\u662f\u8bf4\u53d6S\u7684\u4efb\u4f55\u4e00\u4e2a\u540e\u7f00\uff08\u5305\u62ecS\u81ea\u8eab\uff09\uff0c\u5728SAM\u4e2d\u4ece\u5f00\u59cb\u8282\u70b9t0\u8d70\uff0c\u80af\u5b9a\u90fd\u80fd\u8d70\u5230\u67d0\u4e00\u4e2a\u7ec8\u6b62\u72b6\u6001\u3002</p> <p>\u7b26\u5408\u8fd9\u4e2a\u6027\u8d28\u7684\u56fe\u662f\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5e76\u4e14\u6709\u5f88\u591a\u56fe\u90fd\u7b26\u5408\u4e0a\u9762\u7684\u8981\u6c42\u3002\u4f46SAM\u662f\u5176\u4e2d\u8282\u70b9\u6570\u91cf\u6700\u5c11\u7684\u4e00\u4e2a\uff08\u6781\u5c0f\u6027\uff09\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#endpossam","title":"endpos\u7b49\u4ef7\u7c7b\u3001SAM\u4e2d\u7684\u8282\u70b9\u610f\u4e49","text":"<p>\u5b57\u7b26\u4e32S=abcbc\u3002\u8003\u8651\u5b50\u4e32bc\u5728S\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff08endpos\u96c6\u5408\uff09\uff0c\u4e3a3\u30015\u3002\u5b50\u4e32c\u5728S\u4e2d\u7684\u7ec8\u6b62\u4f4d\u7f6e\u4e5f\u4e3a3\u30015\u3002\u50cf\u8fd9\u6837\u7ec8\u6b62\u4f4d\u7f6e\u96c6\u5408\u5b8c\u5168\u76f8\u540c\u7684S\u7684\u5b50\u4e32\u79f0\u4e3aendpos\u7b49\u4ef7\u7c7b\u3002</p> <p>\u5728SAM\u4e2d\uff0cSAM\u7684\u4e00\u4e2a\u8282\u70b9\u5c31\u4ee3\u8868\u4e00\u4e2aendpos\u7b49\u4ef7\u7c7b\u3002\u56e0\u6b64\u5982\u679c\u6709\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u5b50\u4e32bc\uff0c\u5219\u8fd9\u4e2a\u8282\u70b9\u4e5f\u4ee3\u8868\u5b50\u4e32c\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#len","title":"\u8282\u70b9\u7684\u6700\u957f\u4e32\u3001\u8282\u70b9\u7684len","text":"<p>\u663e\u7136\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u53ef\u80fd\u5305\u542b\u591a\u4e2aS\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u53d6\u5176\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\uff0c\u4f5c\u4e3a\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\u5bf9\u5e94\u8282\u70b9v\u7684\u6700\u957f\u4e32\uff0c\u5e76\u8bb0len\uff08v\uff09\u4e3a\u8fd9\u4e2a\u6700\u957f\u4e32\u7684\u957f\u5ea6\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#linkfather","title":"\u8282\u70b9\u7684link\uff08father\uff09","text":"<p>\u8282\u70b9\u7684\u6700\u957f\u4e32\u7684\u524d\u51e0\u4e2a\uff08\u6309\u7167\u957f\u5ea6\u9012\u51cf\u6765\u6570\uff09\u540e\u7f00\u90fd\u4f1a\u5728\u8fd9\u4e2a\u8282\u70b9\u6240\u5728\u7b49\u4ef7\u7c7b\u4e2d\u3002\u4f46\u53ef\u80fd\u4ece\u4e4b\u540e\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684\u540e\u7f00\u5c31\u90fd\u4e0d\u5728\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u4e86\u3002\u6211\u4eec\u8bb0\u4e0d\u5728\u5f53\u524d\u8282\u70b9\u7b49\u4ef7\u7c7b\u4e2d\u6700\u957f\u7684\u4e32\u4e3aB\uff0c\u5219B\u5bf9\u5e94\u53e6\u4e00\u4e2a\u7b49\u4ef7\u7c7bu\uff08\u5982\u679cB\u4e0d\u5b58\u5728\uff0c\u5c31\u4ee4u\u4e3aSAM\u7684\u8d77\u59cb\u8282\u70b9\uff09\u3002\u6211\u4eec\u4ee4link\uff08v\uff09=u\uff0c\u79f0\u4e3a\u540e\u7f00\u94fe\u63a5\u3002</p> <p>\u6240\u6709SAM\u4e2d\u7684\u8282\u70b9\uff08\u9664\u4e86\u8d77\u59cb\u8282\u70b9\uff09\u90fd\u6709\u540e\u7f00\u8fde\u63a5\u3002\u8fd9\u4e9b\u540e\u7f00\u8fde\u63a5\u6784\u6210\u4e00\u9897\uff08\u6709\u5411\uff09\u6811\uff0c\u4ece\u53f6\u5b50\u6307\u5230\u6811\u6839\u3002\u79f0\u4e4b\u4e3a\u540e\u7f00\u94fe\u63a5\u6811\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_75","title":"\u540e\u7f00\u94fe\u63a5\u6811\u3001\u7ec8\u70b9\u8282\u70b9","text":"<p>\u5de6\u56fe\u662f\u5b57\u7b26\u4e32S=abcbc\u7684\u540e\u7f00\u81ea\u52a8\u673a\uff08SAM\uff09\uff0c\u53f3\u56fe\u4e3a\u5176\u540e\u7f00\u94fe\u63a5\u6811\u3002</p> <p>\u5b57\u7b26\u4e32S\u7684\u6240\u6709\u524d\u7f00\u5728\u81ea\u52a8\u673a\u4e2d\u4e5f\u5bf9\u5e94\u7740\u4e0d\u540c\u7684\u8282\u70b9\u3002\u4ece\u521d\u59cb\u72b6\u6001t0\u5f00\u59cb\u6309\u7167\u5b57\u7b26\u4e32S\u8d70\uff0c\u6240\u7ecf\u8fc7\u7684\u8282\u70b9\u88ab\u79f0\u4e3a\u7ec8\u70b9\u8282\u70b9\u3002\u5982\u53f3\u56fe\u4e2d\u7684a\u3001ab\u3001abc\u3001abcb\u3001abcbc\u3002\uff08\u6ce8\u610f\u548c\u7ec8\u6b62\u72b6\u6001\u533a\u5206\uff09</p> <p>\u5b9a\u4e49\u6bcf\u4e2a\u8282\u70b9\u7684\u7ec8\u70b9\u96c6\u5408\uff1a\u6bcf\u4e2a\u8282\u70b9\u7684\u7ec8\u70b9\u96c6\u5408\u7b49\u4e8e\u5176 \u5b50\u6811 \u5185\u6240\u6709\u7ec8\u70b9\u8282\u70b9\u5bf9\u5e94\u7684\u7ec8\u70b9\u7684\u96c6\u5408\u3002\u6bd4\u5982b\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6709ab\u3001abcb\u8282\u70b9\uff0cb\u7684\u7ec8\u70b9\u96c6\u5408\u5c31\u662fab\u3001abcb\u8282\u70b9\u3002</p> <ul> <li>\u5982\u679c\u8282\u70b9 A \u662f B \u7684\u7956\u5148\uff0c\u5219\u8282\u70b9 A \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u8282\u70b9 B \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684 \u540e\u7f00 \u3002</li> <li>S\u7684\u524d\u7f00\u5b50\u4e32s1(1,p) s2(1,q)\u5bf9\u5e94\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\uff0c\u662f\u4e24\u4e32\u5bf9\u5e94\u8282\u70b9u\u3001v\u7684LCA\u5bf9\u5e94\u5b57\u7b26\u4e32\u3002</li> <li>\u8282\u70b9len\u7684\u5927\u5c0f\u968f\u7740\u6df1\u5ea6\u9012\u589e\u800c\u4e0d\u4e0b\u964d\u3002</li> <li> <p>\u540e\u7f00\u94fe\u63a5\u6811\u4e2d\u7684\u975e\u53f6\u5b50\u8282\u70b9\u5bf9\u5e94\u7684\u6700\u957f\u4e32\uff0c\u8fd9\u4e2a\u6700\u957f\u4e32\u76f8\u5f53\u4e8e\u4ece\u5176\u7ec8\u70b9\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7ec8\u70b9\u7684\u4e0b\u6807\u5f80\u524d\u53d6\u8fd9\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684len\u4e2a\u957f\u5ea6\uff08\u5305\u542b\u8fd9\u4e2a\u5f00\u59cb\u53d6\u7684\u4f4d\u7f6e\uff09\u7684\u5b57\u7b26\u7ec4\u6210\u3002</p> </li> <li> <p>\u540e\u7f00\u94fe\u63a5\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u5c31\u662f\u7ec8\u70b9\u8282\u70b9\u3002\u4f46\u53cd\u8fc7\u6765\u4e0d\u4e00\u5b9a\u6210\u7acb\uff08\u5982S=ababa\uff0caba\u662f\u524d\u7f00\uff0c\u4f46aba\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u6709\u66f4\u957f\u7684ababa\u4f5c\u4e3a\u5176\u513f\u5b50\uff09\u3002\u8fd9\u662f\u7531\u4e8e\u5176\u4ed6\u51fa\u73b0\u53ea\u6709\u4e00\u6b21\u7684\u975e\u524d\u7f00\u4e32\u90fd\u88ab\u5305\u542b\u5728\u67d0\u4e00\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u524d\u7f00\u4e32\u4e2d\u4e86\u3002\u6362\u53e5\u8bdd\u8bf4\u5982\u679cbab\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u90a3\u4e48\uff08\u4ece\u5934\u5230\uff09...bab\u4e5f\u80af\u5b9a\u53ea\u51fa\u73b0\u4e00\u6b21\u3002</p> </li> <li>\u8bbe\u6240\u6709\u7ec8\u70b9\u8282\u70b9\u7684siz\u4e3a1\u3002\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cbbfs\uff0c\u7d2f\u52a0siz\uff0c\u975e\u53f6\u5b50\u8282\u70b9\u7684siz\u503c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7ec8\u70b9\u96c6\u5408\u5927\u5c0f\uff0c\u4e5f\u5373\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u6700\u957f\u4e32\u51fa\u73b0\u7684\u6b21\u6570\u3002\uff08\u540e\u9762\u6a21\u677f\u9898\u4f1a\u7528\u5230\uff09</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_76","title":"\u6784\u5efa\u65b9\u6cd5","text":"<p>\u6b65\u9aa4\u6709\u70b9\u9ebb\u70e6\uff08\u5176\u5b9e\u8fd8\u597d\uff09\uff0c\u53c2\u89c1https://oi-wiki.org/string/sam/</p> <ul> <li>\u72b6\u6001\u6570\u4e0d\u4f1a\u8d85\u8fc72n-1</li> <li>\u8f6c\u79fb\u6570\u4e0d\u4f1a\u8d85\u8fc73n-4</li> <li>\u6784\u5efa\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u7ea7\u522b</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_77","title":"\u5e94\u7528","text":"<ol> <li>\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32P\u662f\u5426\u5728S\u4e2d\u51fa\u73b0\uff1a    \u76f4\u63a5\u4ece\u8d77\u70b9\u8d70\uff0c\u4e2d\u9014\u9047\u5230\u67d0\u4e2a\u5b57\u6bcd\u8d70\u4e0d\u4e0b\u53bb\u4e86\u5c31\u8bf4\u660e\u6ca1\u51fa\u73b0</li> <li>\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\uff1a    \u6709\u5411\u65e0\u73af\u56fe\u52a8\u6001\u89c4\u5212\u3002\u6216\u8005\u7528len\uff08i\uff09-len\uff08link\uff08i\uff09\uff09\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u6c42\u548c\u3002\uff08\u8fd9\u4e2a\u5f0f\u5b50\u662f\u76f8\u5f53\u4e8e\u8fd9\u4e2a\u72b6\u6001\u5bf9\u6574\u4e2a\u4e32S\u7684\u4e0d\u91cd\u590d\u5b50\u4e32\u8d21\u732e\uff09</li> <li>\u6c42\u6240\u6709\u4e0d\u540c\u5b50\u4e32\u603b\u957f\u5ea6</li> </ol>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_78","title":"\u6742\u9879\u3001\u5947\u6280\u6deb\u5de7","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#vectorset","title":"vector\u3001set\u7684\u5408\u5e76","text":"<p>1\uff09\u5728a\u540e\u9762\u63d2\u5165b\uff0c\u65b9\u6cd5\u4e3a</p> <p>a.insert(a.end(),b,begin(),b.end());</p> <p>2\uff09\u5728a\u7684\u524d\u9762\u63d2\u5165b\uff0c\u65b9\u6cd5\u4e3a</p> <p>a.insert(a.begin(),b,begin(),b.end());</p> <p>\u5408\u5e76set:</p> <p>a.insert(b,begin(),b.end());</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_79","title":"\u4ea4\u4e92\u9898","text":"<p>CF Global Round 9 F. Integer Game</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nlong long a[4],p1,p2;\nint main()\n{\n    ios::sync_with_stdio(false);\n    for(int i=1;i&lt;=3;i++) cin&gt;&gt;a[i];\n    cout&lt;&lt;\"First\"&lt;&lt;endl;\n    cout&lt;&lt;(long long)1e11&lt;&lt;endl;\n    cout.flush();\n\n    cin&gt;&gt;p1;\n    a[p1]+=(long long)1e11;\n    long long temp=2*a[p1];\n    for(int i=1;i&lt;=3;i++)\n    {\n        if(i!=p1) temp-=a[i];\n    }\n    cout&lt;&lt;temp&lt;&lt;endl;\n    cout.flush();\n\n    cin&gt;&gt;p2;\n    a[p2]+=temp;\n    cout&lt;&lt;a[p2]-a[p1]&lt;&lt;endl;//d=c-a=(2c-a)-c=a[p2]-a[p1]\n    cout.flush();\n    return 0;\n}\n</code></pre> <p>CF 669 1407C \u2014 Chocolate Bunny</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\nint n,a[10100];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin&gt;&gt;n;\n    int pos=1;\n    for(int i=2;i&lt;=n;i++)\n    {\n        int x,y;\n        cout&lt;&lt;\"? \"&lt;&lt;pos&lt;&lt;\" \"&lt;&lt;i&lt;&lt;endl;\n        cout.flush();\n        cin&gt;&gt;x;\n\n        cout&lt;&lt;\"? \"&lt;&lt;i&lt;&lt;\" \"&lt;&lt;pos&lt;&lt;endl;\n        cout.flush();\n        cin&gt;&gt;y;\n\n        if(x&lt;y)\n        {\n            a[i]=y;\n        }\n        else\n        {\n            a[pos]=x;\n            pos=i;\n        }\n    }\n    a[pos]=n;\n    cout&lt;&lt;\"! \";\n    for(int i=1;i&lt;=n;i++)\n    {\n        cout&lt;&lt;a[i]&lt;&lt;\" \";\n    }\n    cout&lt;&lt;endl;\n    cout.flush();\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#priority_queue","title":"priority_queue","text":"<p>\u5f53\u7136\u4e5f\u80fd\u91cd\u8f7d\u8fd0\u7b97\u7b26\u641e\u5b9a</p> <pre><code>//\u5347\u5e8f\u961f\u5217\uff0c\u5c0f\u9876\u5806\npriority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;\n//\u964d\u5e8f\u961f\u5217\uff0c\u5927\u9876\u5806\npriority_queue &lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt;q;\n//\u5bf9\u4e8elonglong\ngreater&lt;long long&gt;()\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_80","title":"\u52a8\u6001\u5206\u914d\u4e8c\u7ef4\u6570\u7ec4\u5185\u5b58","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint allsum(int *a,int n,int m)\n{\n    int (*b)[m]=(int(*)[m]) a;//\u8f6c\u6362\u4e3a\u6570\u7ec4\u6307\u9488\n    int sum=0;\n    for(int i=0;i&lt;n;i++)\n        for(int j=0;j&lt;m;j++)\n            sum+=b[i][j];//\u7edf\u8ba1\u7b54\u6848\n    return sum;\n}\n\nint n,m;\nint main()\n{\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    int (*a)[m]=(int(*)[m]) calloc(n*m,sizeof(int));//\u6309\u7167\u5927\u5c0f\u5206\u914d\u6570\u7ec4\u5185\u5b58\n    for(int i=0;i&lt;n;i++)\n        for(int j=0;j&lt;m;j++)\n            scanf(\"%d\",&amp;a[i][j]);//\u8f93\u5165\n\n    printf(\"%d\",allsum(&amp;a[0][0],n,m));\n    free(a);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_81","title":"\u81ea\u7136\u6570\u5e42\u548c","text":"<p>https://zh.wikipedia.org/wiki/%E7%AD%89%E5%B9%82%E6%B1%82%E5%92%8C $$ \\sum_{i=1}^{n} i^{0} =n\\</p> <p>\\sum_{i=1}^{n} i^{1} = \\frac{n(n+1)}{2} = \\frac{1}{2}n^2 +\\frac{1}{2} n \\</p> <p>\\sum_{i=1}^{n} i^{2} = \\frac{n(n+1)(2n+1)}{6} = \\frac{1}{3}n^3 + \\frac{1}{2}n^2 + \\frac{1}{6}n\\</p> <p>\\sum_{i=1}^{n} i^{3} = \\left[\\frac{n(n+1)}{2}\\right]^{2} = \\frac{1}{4}n^4 + \\frac{1}{2}n^3 + \\frac{1}{4}n^2\\</p> <p>\\sum_{i=1}^{n} i^{4} = \\frac{n(n+1)(2n+1)(3n^2+3n-1)}{30} = \\frac{1}{5}n^5 + \\frac{1}{2}n^4 + \\frac{1}{3}n^3 - \\frac{1}{30}n\\</p> <p>\\sum_{i=1}^{n} i^{5} = \\frac{n<sup>{2}(n+1)</sup>n^2\\}(2n^2+2n-1)}{12} = \\frac{1}{6}n^6 + \\frac{1}{2}n^5 + \\frac{5}{12}n^4 - \\frac{1}{12</p> <p>\\sum_{i=1}^{n} i^{6} = \\frac{n(n+1)(2n+1)(3n<sup>4+6n</sup>3-3n+1)}{42} = \\frac{1}{7}n^7 + \\frac{1}{2}n^6 + \\frac{1}{2}n^5 - \\frac{1}{6}n^3 + \\frac{1}{42}n\\</p> <p>\\sum_{i=1}^{n} i^{7} = \\frac{n<sup>2(n+1)</sup>2(3n<sup>4+6n</sup>3-n^2-4n+2)}{24} = \\frac{1}{8}n^8 + \\frac{1}{2}n^7 + \\frac{7}{12}n^6 - \\frac{7}{24}n^4 + \\frac{1}{12}n^2\\</p> <p>\\sum_{i=1}^{n} i^{8} = \\frac{n(n+1)(2n+1)(5n<sup>6+15n</sup>5+5n<sup>4-15n</sup>3-n<sup>2+9n-3)}{90}=\\frac{1}{9}n</sup>9 + \\frac{1}{2}n^8 + \\frac{2}{3}n^7 - \\frac{7}{15}n^5 + \\frac{2}{9}n^3 - \\frac{1}{30}n\\</p> <p>\\sum_{i=1}^{n} i^{9} = \\frac{n<sup>2(n+1)</sup>2(n<sup>2+n-1)(2n</sup>4+4n<sup>3-n</sup>2-3n+3)}{20}=\\frac{1}{10}n<sup>{10}+\\frac{1}{2}n</sup>9+\\frac{3}{4}n<sup>8-\\frac{7}{10}n</sup>6+\\frac{1}{2}n<sup>4-\\frac{3}{20}n</sup>2\\</p> <p>\\sum_{i=1}^{n} i^{10} = \\frac{n(n+1)(2n+1)(n<sup>2+n-1)(3n</sup>6+9n<sup>5+2n</sup>4-11n<sup>3+3n</sup>2+10n-5)}{66}=\\frac{1}{11}n<sup>{11}+\\frac{1}{2}n</sup>n}+\\frac{5}{6<sup>9-n</sup>7+n<sup>5-\\frac{1}{2}n</sup>3+\\frac{5}{66}n\\</p> <p>\\sum_{i=0}^{n} i^{m-1} = \\sum_{k=0}^m  S_k^m n<sup>k\uff0c\u5176\u4e2dS_0</sup>m = 0\uff0cS_m^m = \\frac{1}{m}\uff0c\u7576m\u2212k\u70ba\u5927\u65bc1\u7684\u5947\u6578\u6642\uff0cS_k^m = 0\\</p> <p>\\sum_{i=0}^{n} i^m = {1\\over{m+1}}\\sum_{i=0}^m{m+1\\choose{i}} B_i (n+1)^{m+1-i},(B_i\u4e3a\u4f2f\u52aa\u5229\u6570)\\</p> <p>\\displaystyle \\sum_{i=1}^n i^{m+1} = \\sum_{k=0}^m  L_k^m \\binom{n+k+1}{m+2},\\left(L_k^m = \\sum_{r=0}^k (-1)^r \\binom{m+2}{r} (k+1-r)^{m+1}\\right)\\ $$</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#python","title":"Python \u91cd\u5b9a\u5411\u8f93\u51fa\u8f93\u5165","text":"<pre><code>import sys\nsys.stdin=open(\"l_in.txt\",\"r\")\nsys.stdout=open(\"l_out2.txt\",\"w\")\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#atan2yx","title":"atan2(y,x)","text":"<p>\u8fd9\u4e2a\u51fd\u6570\u5b9a\u4e49\u5728cmath\u91cc\uff0c\u8fd4\u56de\u4e00\u4e2a\u70b9(x,y)\u7684\u6781\u89d2\uff0c\u503c\u57df\u5728\\((-\\pi,\\pi]\\)\u4e4b\u95f4\u3002</p> <p>\u4e3b\u8981\u7528\u4e8e\u6781\u89d2\u6392\u5e8f\u7b49\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#_82","title":"\u8f93\u5165\u4e00\u884c","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#cingetlinechar-m-int-size","title":"cin.getline(char *m, int size)","text":"<p>\u8f93\u5165\u6700\u591am\u4e2a\u5b57\u7b26\u5230\u5730\u5740m\u5904\u5f00\u59cb\u7684\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\u5982\u679c\u4e4b\u524d\u7528cin\u8bfb\u5165\u7684\u8bdd\u8981\u901a\u8fc7\u7279\u6b8a\u624b\u6bb5\u6d88\u9664\u4e4b\u524d\u7684\u6362\u884c\u7b26\uff0c\u4e0b\u540c\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#getlinecinstr","title":"getline(cin,*str)","text":"<p>\u4ece\u6d41\u4e2d\u8bfb\u5165\u5230str\u4e2d</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#char-fgetschar-str-int-cnt-stdfile-stream","title":"char fgets(char str, int cnt, std::FILE* stream)","text":"<p>\u4ece\u6d41\u4e2d\uff08\u6587\u4ef6\u6d41\uff0c\u6216stdin\uff09\u8bfb\u5165\u6700\u591acnt\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u5230str\u4e2d\u3002</p> <p>ps\uff1a\u4e0b\u9762\u7684\u64cd\u4f5c\u53ef\u4ee5\u79fb\u9664\u591a\u4f59\u7684\u7a7a\u767d\u7b26</p> <pre><code>cin&gt;&gt;ws\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/OI%E6%9D%82%E7%AC%94%E8%AE%B0/#1","title":"\u5feb\u901f\u8ba1\u7b97\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570","text":"<p>\uff08https://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html\uff09</p> <pre><code>int BitCount5(unsigned int n)\n{\n    unsigned int tmp = n - ((n &gt;&gt;1) &amp;033333333333) - ((n &gt;&gt;2) &amp;011111111111);\n    return ((tmp + (tmp &gt;&gt;3)) &amp;030707070707) %63;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/","title":"STL\u6574\u7406","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#pbds","title":"pbds\u548c\u5176\u4ed6","text":"<p>\u53c2\u8003\uff1ahttps://oi-wiki.org/lang/pb-ds/</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_1","title":"\u5e73\u8861\u6811","text":"<p>\u53c2\u8003\uff1a</p> <ul> <li> <p>https://blog.csdn.net/weixin_30593443/article/details/99322952</p> </li> <li> <p>https://www.luogu.com.cn/blog/Chanis/gnu-pbds</p> </li> </ul> <p>pbds\u4e2d\u7684\u5e73\u8861\u6811\u4e0eSTL\u4e2d\u7684set\u7c7b\u4f3c\uff0c\u4f46\u652f\u6301\u67e5\u8be2\u4e0b\u6807\u7b49\u64cd\u4f5c\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_2","title":"\u5934\u6587\u4ef6\u3001\u547d\u540d\u7a7a\u95f4","text":"<pre><code>#include &lt;ext/pb_ds/assoc_container.hpp&gt;\n#include &lt;ext/pb_ds/tree_policy.hpp&gt;\n//\u6216\u8005\u76f4\u63a5\u7528\n#include &lt;bits/extc++.h&gt;\nusing namespace __gnu_pbds;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_3","title":"\u5b9a\u4e49","text":"<pre><code>tree&lt;pair&lt;int ,int&gt;,null_type,less&lt;pair&lt;int ,int&gt; &gt;,rb_tree_tag,tree_order_statistics_node_update&gt; t;//\u7ea2\u9ed1\u6811\n</code></pre> <p>\u6a21\u7248\u53c2\u6570\uff1a</p> <ol> <li>\u6570\u636e\u7c7b\u578b</li> <li>\u56fa\u5b9a\u662fnull_type,\u65e0\u6620\u5c04</li> <li>\u6bd4\u8f83\u51fd\u6570\uff1a\u4e00\u822c\u7528\u6a21\u677f\u7c7bless\u6216\u8005greater, greater\u662f\u5c0f\u6839\u5806\uff08\u5347\u5e8f\u961f\u5217\uff09\uff0c\u53ef\u80fd\u9700\u8981\u91cd\u8f7d\u7ed3\u6784\u4f53\u7684\u5927\u4e8e\u53f7</li> <li>\u6811\u7684\u7c7b\u578b\uff1a\u4e00\u822c\u7528rb_tree_tag(\u7ea2\u9ed1\u6811)\uff0c\u5176\u4ed6\u8fd8\u6709splay_tree_tag\uff08\u4f46\u636e\u8bf4\u5bb9\u6613T\uff09</li> <li>\u66f4\u65b0\u65b9\u5f0f\uff1a\u56fa\u5b9a\u662ftree_order_statistics_node_update</li> </ol>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_4","title":"\u5e38\u7528\u65b9\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tsize","title":"t.size()","text":"<p>\u8fd4\u56de\u5927\u5c0f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tbegin-tend","title":"t.begin() t.end()","text":"<p>\u8fd4\u56de\u8d77\u59cb\u548c\u672b\u5c3e\u8fed\u4ee3\u5668</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tnode_begin-tnode_end","title":"t.node_begin() t.node_end()","text":"<p>\u8fd4\u56de\u6307\u5411\u6811\u6839/\u6811\u672b\u5c3e\u7684\u8fed\u4ee3\u5668</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tinsertx","title":"t.insert(x)","text":"<p>\u63d2\u5165\u503c\uff0c\u4f46\u63d2\u5165\u91cd\u590d\u7684\u503c\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u5f71\u54cd\u3002\u8981\u60f3\u63d2\u5165\u91cd\u590d\u503c\uff0c\u8bf7\u5c06\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u4e3apair\u5e76\u6539\u53d8\u7b2c\u4e8c\u4e0b\u6807\uff08\u63a8\u8350\u505a\u6cd5\u662f\u7b2c\u4e8c\u4e0b\u6807\u5c31\u7528i\u4e4b\u7c7b\u7684\u72ec\u4e00\u65e0\u4e8c\u7684\u6570\u6765\u8868\u793a\uff09\u3002\uff08\u4f3c\u4e4e\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5f88\u8be1\u5f02\u7684\u5bf9\u8c61\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#terasex-teraseit","title":"t.erase(x) / t.erase(it)","text":"<p>\u5220\u9664\u503c/\u6307\u9488\u6307\u5411\u7684\u503c\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#torder_of_keyx","title":"t.order_of_key(x)","text":"<p>\u7531\u503c\u627e\u4e0b\u6807\uff08\u4e0b\u6807\u4ece0\u8ba1\u6570\uff0c\u4e0b\u540c\uff09\uff0c\u8fd4\u56de\u4e0b\u6807\u3002\u5982\u679cx\u672c\u6765\u4e0d\u5b58\u5728\u4e8e\u5e73\u8861\u6811\u4e4b\u4e2d\uff0c\u90a3\u4e48\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u7279\u522b\u5730\uff0c\u5982\u679cx\u6bd4\u4efb\u4f55\u5143\u7d20\u90fd\u5927\uff0c\u8fd4\u56de\u503c\u4e0et.size()\u76f8\u7b49</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tfind_by_orderx","title":"t.find_by_order(x)","text":"<p>\u7531\u503c\u627e\u5bf9\u8c61\uff0c\u8fd4\u56de\u6307\u5411\u6539\u503c\u7684\u6307\u9488\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tjoint2","title":"t.join(t2)","text":"<p>\u5c06\u540c\u7c7b\u578b\u7684\u6811t2\u5408\u5e76\u5230t\u4e2d\uff0c\u4f46\u5982\u679ct2\u548ct\u6709\u76f8\u540c\u5143\u7d20\u4f1a\u7529\u51fa\u5f02\u5e38\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tsplitvt2","title":"t.split(v,t2)","text":"<p>\u5c06t\u4e2d\u5c0f\u4e8e\u7b49\u4e8ev\u7684\u5143\u7d20\u585e\u5165b\u4e2d\uff0c\u5269\u4f59\u5143\u7d20\u7559\u5728t\u4e2d\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tlower_boundx","title":"t.lower_bound(x)","text":"<p>\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u5b83\u7684\u6307\u9488\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#tupper_boundx","title":"t.upper_bound(x)","text":"<p>\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8ex\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u5b83\u7684\u6307\u9488\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_5","title":"\u4f7f\u7528\u4f8b\u5b50","text":"<p>2020CCPC Qinhuangdao E</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#include &lt;ext/pb_ds/tree_policy.hpp&gt;\n#include &lt;ext/pb_ds/assoc_container.hpp&gt;\nusing namespace __gnu_pbds;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\nint T;\npair&lt;int ,int&gt; li[N];\nint p;\n\ntree&lt;pair&lt;int ,int&gt;,null_type,less&lt;pair&lt;int ,int&gt; &gt;,rb_tree_tag,tree_order_statistics_node_update&gt; t;//\u7ea2\u9ed1\u6811\n\nint n,rat;\n\nbool check()\n{\n    auto it=--t.end();\n    if(li[it-&gt;second].second==it-&gt;first) return false;\n    return true;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        t.clear();\n        p=0;\n        cin&gt;&gt;n&gt;&gt;rat;\n        for(int i=1;i&lt;=n;i++)\n        {\n            cin&gt;&gt;li[i].first&gt;&gt;li[i].second;\n            t.insert({li[i].first,i});\n        }\n\n        int ans=0;\n        while (check())\n        {\n            auto it=--t.end();\n            int pass_sc=ceil(it-&gt;first*(0.01*rat));\n            auto findit=t.lower_bound({pass_sc,0});\n            int tempans=t.order_of_key(*findit); //\u5c0f\u4e8epass_sc\u7684\u6570\u6570\u91cf\n\n            ans=max(ans,n-tempans);\n\n            pair&lt;int,int&gt; newval{li[it-&gt;second].second,it-&gt;second};\n            t.erase(it);\n            t.insert(newval);\n        }\n        auto it=--t.end();\n        int pass_sc=ceil(it-&gt;first*(0.01*rat));\n        auto findit=t.lower_bound({pass_sc,0});\n        int tempans=t.order_of_key(*findit); //\u5c0f\u4e8epass_sc\u7684\u6570\u6570\u91cf\n\n        ans=max(ans,n-tempans);\n\n        pair&lt;int,int&gt; newval{li[it-&gt;second].second,it-&gt;second};\n        t.erase(it);\n        t.insert(newval);\n\n\n        cout&lt;&lt;\"Case #\"&lt;&lt;_&lt;&lt;\": \";\n        cout&lt;&lt;ans&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_6","title":"\u4f18\u5148\u961f\u5217","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_7","title":"\u5934\u6587\u4ef6\u3001\u547d\u540d\u7a7a\u95f4","text":"<pre><code>#include&lt;ext/pb_ds/priority_queue.hpp&gt;\n\u6216\u8005\n#include&lt;bits/extc++.h&gt;\nusing namespace __gnu_pbds;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_8","title":"\u5b9a\u4e49","text":"<pre><code>priority_queue&lt;int,greater&lt;int&gt;,pairing_heap_tag&gt; q;\n</code></pre> <p>\u6a21\u7248\u53c2\u6570\uff1a</p> <ol> <li> <p>\u6570\u636e\u7c7b\u578b\uff1a</p> </li> <li> <p>\u6bd4\u8f83\u51fd\u6570\uff1agreater\u662f\u5c0f\u6839\u5806\uff0c\u9ed8\u8ba4\u5927\u6839\u5806</p> </li> <li> <p>\u5806\u7c7b\u578b\uff1a    pairing_heap_tag\uff1a\u914d\u5bf9\u5806\uff08\u5e38\u7528\uff09</p> </li> </ol> <p>binary_heap_tag\uff1a\u4e8c\u53c9\u5806</p> <p>binomial_heap_tag\uff1a\u4e8c\u9879\u5806</p> <p>rc_binomial_heap_tag\uff1a\u5197\u4f59\u8ba1\u6570\u4e8c\u9879\u5806</p> <p>thin_heap_tag\uff1a \u9664\u4e86\u5408\u5e76\u7684\u590d\u6742\u5ea6\u90fd\u548c Fibonacci \u5806\u4e00\u6837\u7684\u4e00\u4e2a tag</p> <ol> <li>Allocator\uff1a\u7a7a\u95f4\u914d\u7f6e\u5668</li> </ol>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_9","title":"\u5e38\u7528\u65b9\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qpushx","title":"q.push(x)","text":"<p>\u63d2\u5165\u5143\u7d20</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qpop","title":"q.pop()","text":"<p>\u5f39\u51fa\u5806\u9876\u5143\u7d20</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qtop","title":"q.top()","text":"<p>\u5806\u9876\u5143\u7d20</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qsize","title":"q.size()","text":"<p>\u5927\u5c0f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qempty","title":"q.empty()","text":"<p>\u5224\u65ad\u662f\u5426\u4e3a\u7a7a</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qmodifyitx","title":"q.modify(it,x)","text":"<p>\u4fee\u6539\u8fed\u4ee3\u5668\u6307\u5411\u4f4d\u7f6e\u7684\u503c\u4e3ax</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qeraseit","title":"q.erase(it)","text":"<p>\u5220\u9664\u8fed\u4ee3\u5668it\u6307\u5411\u4f4d\u7f6e\u7684\u503c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#qjoinq2","title":"q.join(q2)","text":"<p>\u5c06q2\u5806\u4e2d\u7684\u5185\u5bb9\u5408\u5e76\u5230q\u4e2d\uff0c\u5e76\u6e05\u7a7aq2</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_10","title":"\u4f7f\u7528\u4f8b\u5b50","text":"<p>HDU5575 Discover Water Tank 2015\u4e0a\u6d77\u73b0\u573a\u8d5bD\u9898 \uff08\u6811\u5f62dp\uff0c\u5e76\u67e5\u96c6\uff0c\u5de6\u504f\u6811\uff09</p> <pre><code>// shuigang\n\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n\n#include &lt;ext/pb_ds/priority_queue.hpp&gt;\n// using namespace __gnu_pbds;\n\ntypedef long long ll;\nconst int N = 3e5 + 10;\nconst int Inf = 1e9;\nint T;\n\nint n, m;\nint h[N];\nstruct B\n{\n    int h, id;\n    int l, r;\n    bool operator&lt;(const B &amp;b) const\n    {\n        if (h != b.h)\n            return h &lt; b.h;\n        return id &lt; b.id;\n    }\n} baffle[N];\n\nstruct Q\n{\n    int x, y, z;\n\n    bool operator&lt;(const Q &amp;b) const\n    {\n        if (y != b.y)\n            return y &lt; b.y;\n        return z &gt; b.z; //  1 1 1 0 0\n    }\n\n    bool operator&gt;(const Q &amp;b) const\n    {\n        if (y != b.y)\n            return y &gt; b.y;\n        return z &lt; b.z; //  1 1 1 0 0\n    }\n};\n\nint dp[N][2];\n\nusing PQ = __gnu_pbds::priority_queue&lt;Q, std::greater&lt;Q&gt;, __gnu_pbds::pairing_heap_tag&gt;;\n\nPQ qq[N];\n\nstruct Unionfindset\n{\n    // local\n    int fa[N]; //fa,sz\uff1a\u7236\u4eb2\u548c\u79e9\u7684\u5927\u5c0f\n\n    //\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    void init(int n)\n    {\n        for (int i = 1; i &lt;= n; i++)\n        {\n            fa[i] = i;\n        }\n    }\n\n    //\u53d6\u5f97\u7236\u4eb2\u5e76\u8def\u5f84\u538b\u7f29\n    int getfa(int x)\n    {\n        if (fa[x] == x)\n            return x;\n        return fa[x] = getfa(fa[x]);\n    }\n\n    //\u5408\u5e76x\u3001y\n    int merge(int x, int y)\n    {\n        int x_fa = getfa(x), y_fa = getfa(y);\n        if (x_fa == y_fa)\n            return -1;\n        fa[x_fa] = y_fa;\n\n        return y_fa;\n    }\n\n    //\u68c0\u67e5\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\n    bool check(int x, int y) { return getfa(x) == getfa(y); }\n} ufs;\n\nvoid clear()\n{\n    for (int i = 1; i &lt;= n; i++)\n    {\n        while (qq[i].size())\n            qq[i].pop();\n        dp[i][0] = dp[i][1] = 0;\n        baffle[i]=baffle[0];\n    }\n    h[0] = h[n] = Inf;\n    ufs.init(n);\n}\n\nstd::pair&lt;int, std::pair&lt;int,int_least16_t&gt;&gt; cal(int id, PQ &amp;pq, int limit) // dp[.][0] dp[.][1]\n{\n    std::vector&lt;Q&gt; vec; //stack\n    int no_water = 0, yes_water = 0;\n    while (pq.size() &amp;&amp; pq.top().y + 0.5 &lt;= limit)\n    {\n        vec.emplace_back(pq.top());\n        if (pq.top().z == 0)\n            no_water++;\n        else\n            yes_water++;\n        pq.pop();\n    }\n\n    std::reverse(vec.begin(),vec.end());\n\n    int ans = no_water;\n    int yes_water2 = 0, no_water2=no_water;\n    while (vec.size())\n    {\n        auto top = vec.back();\n        vec.pop_back();\n        yes_water2 += (top.z == 1);\n        no_water2 -= (top.z == 0);\n        while (vec.size() &amp;&amp; vec.back().y == top.y)\n        {\n            yes_water2 += (vec.back().z == 1);\n            no_water2 -= (vec.back().z == 0);\n            vec.pop_back();\n        }\n        ans = std::max(ans, yes_water2 + no_water2);\n    }\n    return {ans, {yes_water,no_water}};\n}\n\nvoid pre1()\n{\n    std::vector&lt;int&gt; vec;\n    vec.emplace_back(Inf);\n    for (int i = 1; i &lt;= n - 1; i++)\n    {\n        while (vec.size() &amp;&amp; vec.back() &lt;= baffle[i].h)\n        {\n            vec.pop_back();\n        }\n        baffle[i].l = vec.back();\n        vec.emplace_back(baffle[i].h);\n    }\n}\n\nvoid pre2()\n{\n    std::vector&lt;int&gt; vec;\n    vec.emplace_back(Inf);\n    for (int i = n - 1; i &gt;= 1; i--)\n    {\n        while (vec.size() &amp;&amp; vec.back() &lt; baffle[i].h)\n        {\n            vec.pop_back();\n        }\n        baffle[i].r = vec.back();\n        vec.emplace_back(baffle[i].h);\n    }\n}\n\nvoid pre3()\n{\n    for (int i = 1; i &lt;= n; i++)\n    {\n        int lim = std::min(h[i - 1], h[i]);\n        auto calval = cal(i, qq[i], lim);\n        dp[i][0] = calval.first;\n        dp[i][1] = calval.second.first;\n    }\n}\n\nvoid dpdp()\n{\n    std::sort(baffle + 1, baffle + n);\n\n    for (int i = 1; i &lt;= n - 1; i++) //baffle\n    {\n        int lfa = ufs.getfa(baffle[i].id);\n        int rfa = ufs.getfa(baffle[i].id + 1);\n        int ans0, ans1;\n\n        qq[lfa].join(qq[rfa]);\n        ufs.merge(rfa,lfa);\n\n        auto calval = cal(lfa, qq[lfa], std::min(baffle[i].l, baffle[i].r));\n\n        ans1=calval.second.first+dp[lfa][1]+dp[rfa][1];\n        ans0=dp[lfa][0]+dp[rfa][0]+calval.second.second;\n        ans0=std::max(ans0,dp[lfa][1]+dp[rfa][1]+calval.first);\n\n        dp[lfa][0]=ans0;\n        dp[lfa][1]=ans1;\n    }\n}\n\nint main()\n{\n    scanf(\"%d\", &amp;T);\n    for (int _ = 1; _ &lt;= T; _++)\n    {\n        scanf(\"%d%d\", &amp;n, &amp;m);\n        clear();\n        for (int i = 1; i &lt;= n - 1; i++)\n        {\n            scanf(\"%d\", &amp;h[i]);\n            baffle[i] = {h[i], i};\n        }\n\n        for (int i = 1; i &lt;= m; i++)\n        {\n            int x, y, z;\n            scanf(\"%d\", &amp;x);\n            scanf(\"%d\", &amp;y);\n            scanf(\"%d\", &amp;z);\n            qq[x].push({x, y, z});\n        }\n\n        pre1();\n        pre2();\n        pre3();\n        dpdp();\n\n        // std::cout&lt;&lt;std::max(dp[1][0],dp[1][1])&lt;&lt;'\\n';\n        printf(\"Case #%d: %d\\n\",_,std::max(dp[1][0],dp[1][1]));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#rope","title":"rope","text":"<p>\u5757\u72b6\u6570\u7ec4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n\\sqrt n)\\)</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_11","title":"\u5934\u6587\u4ef6\u3001\u547d\u540d\u7a7a\u95f4","text":"<pre><code>#include &lt;ext/rope&gt;\nusing namespace __gnu_cxx;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_12","title":"\u5b9a\u4e49","text":"<pre><code>rope&lt;char&gt; r;\n</code></pre> <p>\u6a21\u7248\u53c2\u6570\uff1a</p> <ol> <li>\u6570\u636e\u7c7b\u578b</li> </ol>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_13","title":"\u5e38\u7528\u65b9\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#rinsertpos-s-len","title":"r.insert(pos, s[], len)","text":"<p>\u5728r\u7684pos\u5904\u63d2\u5165\u957f\u5ea6\u4e3alen\u7684s</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#rappends-len","title":"r.append(s[], len)","text":"<p>\u5728r\u7684\u672b\u5c3e\u5904\u63d2\u5165s\u957f\u5ea6\u4e3alen\u7684\u90e8\u5206</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#rsubstrpos-len","title":"r.substr(pos, len)","text":"<p>\u53d6\u5f97r\u7684\u81eapos\u5f00\u59cb\u957f\u5ea6\u4e3alen\u7684\u5b50\u5e8f\u5217\uff08\u8fd4\u56de\u503c\u4ecd\u4e3arope\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#ratindex","title":"r.at(index)","text":"<p>\u8bbf\u95ee\u4e0b\u6807index\u5904\u7684\u503c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#rerasepos-len","title":"r.erase(pos, len)","text":"<p>\u5220\u9664pos\u5f00\u59cb\u957f\u5ea6\u4e3alen\u7684\u90e8\u5206</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#rcopypos-len-s","title":"r.copy(pos, len, s[])","text":"<p>\u4ecerope\u7684\u4e0b\u6807pos\u5f00\u59cb\u7684len\u4e2a\u6570\u7528\u6570\u7ec4s\u4ee3\u66ff\uff0c\u5982\u679cpos\u540e\u7684\u4f4d\u6570\u4e0d\u591f\u5c31\u8865\u8db3</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#rreplacepos-s","title":"r.replace(pos, s[])","text":"<p>\u4ecerope\u7684\u4e0b\u6807pos\u5f00\u59cb\u66ff\u6362\u6210\u6570\u7ec4s\uff0cs\u7684\u957f\u5ea6\u4e3a\u4ecepos\u5f00\u59cb\u66ff\u6362\u7684\u4f4d\u6570\uff0c\u5982\u679cpos\u540e\u7684\u4f4d\u6570\u4e0d\u591f\u5c31\u8865\u8db3</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_14","title":"\u4f7f\u7528\u4f8b\u5b50","text":"<p>P4008 [NOI2003] \u6587\u672c\u7f16\u8f91\u5668 <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\n#include &lt;algorithm&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\n#include &lt;ext/rope&gt;\nusing namespace std;\nusing namespace __gnu_cxx;\ntypedef long long ll;\nconst int N=3e7+10;\nrope&lt;char&gt; r;\nint T;\nchar op[20],s[N];\n\ntemplate &lt;typename T&gt; inline void read(T &amp;x)\n{\n    char c;\n    int sgn=1;\n    x=0;\n    c=getchar();\n    while (c&gt;'9' &amp;&amp; c&lt;'0')\n    {\n        if(c=='-') sgn=-1;\n        c=getchar();\n    }\n    while (c&lt;='9' &amp;&amp; c&gt;='0')\n    {\n        x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c-'0');\n        c=getchar();\n    }\n    x*=sgn;\n}\n\ntemplate &lt;typename T&gt; inline void print(T x)\n{\n    if(x&lt;0) {putchar('-');x=-x;}\n    if (x&gt;9)\n    {\n        print(x/10);\n    }\n    putchar(x%10+'0');\n}\n\nvoid readstring(char s[],int len)\n{\n    for(int i=0;i&lt;len;i++)\n    {\n        s[i] = '\\0';\n        while (s[i] &lt; 32 || 126 &lt; s[i])\n            s[i] = getchar();\n    }\n    s[len]='\\0';\n}\n\nint main()\n{\n    scanf(\"%d\",&amp;T);\n    int pos=0;\n    while (T--)\n    {\n        while(!isalpha(op[0]=getchar()));\n        while(isalpha(getchar()));\n        \n        int len;\n        if(op[0]=='I')\n        {\n            read(len);\n            readstring(s,len);\n            r.insert(pos,s);\n        }\n        else if(op[0]=='M')\n        {\n            read(pos);\n        }\n        else if(op[0]=='D')\n        {\n            read(len);\n            r.erase(pos,len);\n        }\n        else if(op[0]=='G')\n        {\n            read(len);\n            for(int i=pos;i&lt;pos+len;i++)\n                putchar(r.at(i));\n            putchar('\\n');\n        }\n        else if(op[0]=='P')\n        {\n            pos--;\n        }\n        else if(op[0]=='N')\n        {\n            pos++;\n        }\n    }\n    \n\n    return 0;\n}\n</code></pre></p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#stl","title":"STL","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bitset","title":"bitset","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_15","title":"\u5934\u6587\u4ef6\u3001\u5b9a\u4e49","text":"<pre><code>#include &lt;bitset&gt;\n\nbitset&lt;1000000&gt; bs(12);\nstring s=\"1010\"; // or char s[]=\"1010\"\nbitset&lt;1000000&gt; bs(s);\n</code></pre> <p>\u6a21\u7248\u53c2\u6570\uff1a 1. bitset\u7684\u4f4d\u6570\u5927\u5c0f</p> <p>\u6784\u9020\u65b9\u6cd5\uff1a</p> <p>\u63a5\u53d7\u6570\u5b57\u300101\u5b57\u7b26\u4e32\u4f5c\u4e3a\u521d\u59cb\u5316\u53c2\u6570\u3002\u524d\u9762\u5168\u75280\u8865\u5145\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_16","title":"\u5e38\u7528\u65b9\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_17","title":"\u4f4d\u8fd0\u7b97\u64cd\u4f5c\u7b26\u3001\u76f8\u7b49\u4e0e\u4e0d\u7b49\u5224\u65ad\u7b26","text":"<p>\u5305\u62ec<code>&amp; | ~ ^ &lt;&lt; &gt;&gt; == !=</code>\uff0c\u4ee5\u53ca\u5bf9\u5e94\u4f4d\u8fd0\u7b97\u64cd\u4f5c\u7b26\u7684\u81ea\u8eab\u64cd\u4f5c\u7b26\u3002</p> <p><code>&lt;&lt; &gt;&gt;</code>\u540e\u63a5\u6574\u578b\u6570\u5b57\u3002</p> <pre><code>bitset&lt;4&gt; foo (string(\"1001\"));\nbitset&lt;4&gt; bar (string(\"0011\"));\n\ncout &lt;&lt; (foo^=bar) &lt;&lt; endl;       // 1010 (foo\u5bf9bar\u6309\u4f4d\u5f02\u6216\u540e\u8d4b\u503c\u7ed9foo)\ncout &lt;&lt; (foo&amp;=bar) &lt;&lt; endl;       // 0010 (\u6309\u4f4d\u4e0e\u540e\u8d4b\u503c\u7ed9foo)\ncout &lt;&lt; (foo|=bar) &lt;&lt; endl;       // 0011 (\u6309\u4f4d\u6216\u540e\u8d4b\u503c\u7ed9foo)\n\ncout &lt;&lt; (foo&lt;&lt;=2) &lt;&lt; endl;        // 1100 (\u5de6\u79fb\uff12\u4f4d\uff0c\u4f4e\u4f4d\u8865\uff10\uff0c\u6709\u81ea\u8eab\u8d4b\u503c)\ncout &lt;&lt; (foo&gt;&gt;=1) &lt;&lt; endl;        // 0110 (\u53f3\u79fb\uff11\u4f4d\uff0c\u9ad8\u4f4d\u8865\uff10\uff0c\u6709\u81ea\u8eab\u8d4b\u503c)\n\ncout &lt;&lt; (~bar) &lt;&lt; endl;           // 1100 (\u6309\u4f4d\u53d6\u53cd)\ncout &lt;&lt; (bar&lt;&lt;1) &lt;&lt; endl;         // 0110 (\u5de6\u79fb\uff0c\u4e0d\u8d4b\u503c)\ncout &lt;&lt; (bar&gt;&gt;1) &lt;&lt; endl;         // 0001 (\u53f3\u79fb\uff0c\u4e0d\u8d4b\u503c)\n\ncout &lt;&lt; (foo==bar) &lt;&lt; endl;       // false (0110==0011\u4e3afalse)\ncout &lt;&lt; (foo!=bar) &lt;&lt; endl;       // true  (0110!=0011\u4e3atrue)\n\ncout &lt;&lt; (foo&amp;bar) &lt;&lt; endl;        // 0010 (\u6309\u4f4d\u4e0e\uff0c\u4e0d\u8d4b\u503c)\ncout &lt;&lt; (foo|bar) &lt;&lt; endl;        // 0111 (\u6309\u4f4d\u6216\uff0c\u4e0d\u8d4b\u503c)\ncout &lt;&lt; (foo^bar) &lt;&lt; endl;        // 0101 (\u6309\u4f4d\u5f02\u6216\uff0c\u4e0d\u8d4b\u503c)\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_18","title":"\u7d22\u5f15\u8fd0\u7b97\u7b26","text":"<p>\u53ef\u8bbf\u95eebitset\u4e2d\u7684\u4f4d\u3002\u4f4d\u662f\u4ece\u4f4e\u5230\u9ad8\u5b58\u7684\u3002</p> <pre><code>    bitset&lt;4&gt; foo (\"1011\");\n\n    cout &lt;&lt; foo[0] &lt;&lt; endl;\u3000\u3000//1\n    cout &lt;&lt; foo[1] &lt;&lt; endl;\u3000\u3000//1\n    cout &lt;&lt; foo[2] &lt;&lt; endl;\u3000\u3000//0\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bscount","title":"bs.count()","text":"<p>\u7edf\u8ba1bs\u4e2d1\u7684\u4e2a\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bssize","title":"bs.size()","text":"<p>bs\u7684\u5927\u5c0f\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bstestint-x","title":"bs.test(int x)","text":"<p>\u7b49\u4ef7\u4e8e <code>bs[x] == 1</code></p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bsany","title":"bs.any()","text":"<p>bs\u4e2d\u67091\u5219\u4e3a\u771f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bsnone","title":"bs.none()","text":"<p>bs\u4e2d\u51680\u5219\u4e3a\u771f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bsall","title":"bs.all()","text":"<p>bs\u4e2d\u51681\u5219\u4e3a\u771f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bsflipint-x","title":"bs.flip(int x)","text":"<p>\u53cd\u8f6cbs\u7684\u7b2cx\u4f4d\uff08\u4ece0\u8ba1\u6570\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bssetbssetint-xint-val","title":"bs.set()\u3001bs.set(int x,[int val])","text":"<p>\u5c06x\u5904\u7684\u503c\u8bbe\u4e3aval\u3002val\u7f3a\u7701\u65f6\u8bbe\u4e3a1\u3002\u53c2\u6570\u5168\u7f3a\u7701\u65f6\u5219\u5168\u90e8\u7f6e\u4e3a\u4e00\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bsresetint-x","title":"bs.reset([int x])","text":"<p>\u5c06x\u5904\u7684\u503c\u8bbe\u4e3a0\u3002x\u7f3a\u7701\u65f6\u5168\u8bbe\u4e3a0\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bsto_string-bsto_ulong-bsto_ullong","title":"bs.to_string(), bs.to_ulong(), bs.to_ullong()","text":"<p>\u8fd4\u56debs\u5bf9\u5e94\u7684string\u3001unsigned long\u3001unsigned longlong\u6570\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#list","title":"list","text":"<p>\u7ebf\u6027\u53cc\u5411\u94fe\u8868\u3002 https://blog.csdn.net/weixin_39115615/article/details/88768386</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_19","title":"\u5934\u6587\u4ef6\u3001\u5b9a\u4e49","text":"<pre><code>#include &lt;list&gt;\n\nint ar[] = {75,23,65,42,13};\nlist&lt;int&gt; l1(ar, ar+5); //\u4f7f\u7528\u6570\u7ec4\u521d\u59cb\u5316\uff0c\u6307\u5b9a\u8d77\u59cb\u4e0e\u7ed3\u675f\u6307\u9488\nlist&lt;int&gt; l2(2,100);\n</code></pre> <p>\u6a21\u7248\u53c2\u6570\uff1a 1. list\u4e2d\u8282\u70b9\u7c7b\u578b</p> <p>\u6784\u9020\u65b9\u6cd5\uff1a \u53ef\u7528\u5df2\u5b58\u5728\u6570\u7ec4\u6216\u8005\u6307\u5b9a\u521d\u59cb\u503c\u8fdb\u884c\u521d\u59cb\u5316\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_20","title":"\u5e38\u7528\u65b9\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lbegin-lend-lrbegin-lrend","title":"l.begin(), l.end(), l.rbegin(), l.rend()","text":"<p>\u8fd4\u56de\u5bf9\u5e94\u7684\u8d77\u59cb\u8282\u70b9\u3001\u7ed3\u5c3e\u8282\u70b9\u8fed\u4ee3\u5668\u3002</p> <p>\u5f53l\u4e3a\u7a7a\u65f6\u8fd4\u56de0.</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lempty","title":"l.empty()","text":"<p>l\u4e3a\u7a7a\u65f6\u4e3a\u771f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lsize-lmax_size","title":"l.size(), l.max_size()","text":"<p>l\u7684\u5927\u5c0f\uff0c\u6700\u5927\u53ef\u5bb9\u7eb3\u5927\u5c0f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lfront-lback","title":"l.front(), l.back()","text":"<p>\u8fd4\u56del\u7684\u9996\u5c3e\u5143\u7d20\u7684\u503c\u7684\u5f15\u7528</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lassigninputiterator-first-inputiterator-last","title":"l.assign(InputIterator first, InputIterator last)","text":"<p>\u4f7f\u7528\u8d77\u59cb\u3001\u7ed3\u675f\u8fed\u4ee3\u5668\u4e3al\u8d4b\u503c\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lpush_front-lpush_back-lpop_front-lpop_back","title":"l.push_front(), l.push_back(), l.pop_front(), l.pop_back()","text":"<p>\u663e\u7136</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#linsert-iterator-position-size_type-n-const-value_type-val-linsert-iterator-position-inputiterator-first-inputiterator-last","title":"l.insert (iterator position, [size_type n] ,const value_type&amp; val), l.insert (iterator position, InputIterator first, InputIterator last);","text":"<p>\u5728position\uff08l\u7684\u8fed\u4ee3\u5668\uff09\u540e\u63d2\u5165\u503c\u3002\u6307\u5b9a\u4e86n\u65f6\uff0c\u6307\u5b9a\u63d2\u5165\u591a\u5c11\u4e2a\u503c\u3002</p> <p>\u6307\u5b9a\u7684\u662f\u5176\u4ed6\u5bb9\u5668\u7684\u9996\u5c3e\u8fed\u4ee3\u5668\u65f6\uff0c\u5c06\u8fd9\u90e8\u5206\u6240\u6709\u5185\u5bb9\u63d2\u5165\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#leraseiterator-position-lerase-iterator-first-iterator-last","title":"l.erase(iterator position), l.erase (iterator first, iterator last)","text":"<p>\u79fb\u9664l\u4e2d\u5bf9\u5e94\u8fed\u4ee3\u5668\u5904\u7684\u5143\u7d20</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lswaplist-y","title":"l.swap(list &amp;y)","text":"<p>\u4ea4\u6362l\u3001y\u4e24\u4e2alist</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lclear","title":"l.clear()","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lsplice-iterator-position-list-x-iterator-first-iterator-last","title":"l.splice (iterator position, list&amp; x, [iterator first, [iterator last]])","text":"<p>\u5c06\u5217\u8868x\u4e2d\u7684\u6240\u6709\u5143\u7d20\u79fb\u5230\u5f53\u524dlist\u4e2d\uff0c\u4ece\u5f53\u524d\u5217\u8868\u7684position\u6307\u5411\u7684\u4f4d\u7f6e\u4e4b\u540e\u5f00\u59cb\u3002x\u4e2d\u5bf9\u5e94\u5185\u5bb9\u88ab\u79fb\u9664\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lremoveconst-value_type-val-lremove_ifpredicate-pred","title":"l.remove(const value_type&amp; val), l.remove_if(Predicate pred)","text":"<p>\u4ecelist\u4e2d\u5220\u9664\u6240\u6709\u503c\u4e3aval\u7684\u5143\u7d20\u3002pred\u53ef\u4ee5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2aclass\uff0c\u4f46\u5b83\u9700\u8981\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u4e14\u53c2\u6570\u7c7b\u578b\u8ddflist\u4e2d\u5b58\u50a8\u5143\u7d20\u7c7b\u578b\u76f8\u540c\uff0c\u6ee1\u8db3\u6761\u4ef6\u5c31\u8fd4\u56detrue</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#luniquebinarypredicate-binary_pred","title":"l.unique([BinaryPredicate binary_pred])","text":"<p>\u53ea\u80fd\u5220\u9664\u76f8\u90bb\u7684\u91cd\u590d\u5143\u7d20\uff0c\u7136\u540e\u4fdd\u7559\u7b2c\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64\u8fd9\u4e2a\u51fd\u6570\u53ea\u5bf9\u6392\u597d\u5e8f\u7684list\u6709\u7528\u3002</p> <p>binary_pred\u53ef\u4ee5\u662f\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662fclass\uff0c\u4f46\u5b83\u9700\u8981\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u4e14\u7c7b\u578b\u8ddflist\u4e2d\u5b58\u50a8\u7684\u503c\u7c7b\u578b\u76f8\u540c\uff0c\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u5c31\u8fd4\u56detrue</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lmergelist-x-compare-comp","title":"l.merge(list &amp;x, [Compare comp])","text":"<p>\u6709\u5e8f\u5f52\u5e76\uff1a\u5c06\u5217\u8868x\u4e2d\u7684\u5143\u7d20\u6309\u9ed8\u8ba4\u7684\u987a\u5e8f\u79fb\u5165\u5f53\u524d\u5217\u8868\u5f53\u4e2d\uff0c\u6b64\u65f6\u5217\u8868x\u4e3a\u7a7a\uff0c\u5f53\u524d\u5217\u8868\u4ecd\u4e3a\u6709\u5e8f\u5217\u8868\u3002\u6ce8\u610f\u8c03\u7528\u65f6\u5fc5\u987b\u4fdd\u8bc1l,x\u7684\u6709\u5e8f\u6027\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lsortcompare-comp","title":"l.sort([Compare comp])","text":"<p>\u6392\u5e8f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lreverse","title":"l.reverse()","text":"<p>\u9006\u5e8f</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#vector","title":"vector","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_21","title":"\u5b9a\u4e49\u4e0e\u521d\u59cb\u5316","text":"<pre><code>vector &lt;int&gt; a(10); //\u6307\u5b9a\u5927\u5c0f10\uff0c\u5168\u521d\u59cb\u5316\u4e3a0\nvector &lt;int&gt; a(10,100) //\u6307\u5b9a10\u4e2a\u503c\u662f100\u7684vec\nvector &lt;int&gt; a(b.begin(),b.end()) //\u8fed\u4ee3\u5668\u521d\u59cb\u5316\nvector &lt;int&gt; a(b) //\u4f7f\u7528\u5176\u4ed6\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#_22","title":"\u5e38\u7528\u65b9\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#afront-aback","title":"a.front(), a.back()","text":"<p>\u8fd4\u56de\u5bf9\u5e94\u5f15\u7528</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#ainsertvectoriterator-itvalue_type-val-ainsertvectoriterator-itint-cntvalue_type-val","title":"a.insert(VectorIterator it,value_type val), a.insert(VectorIterator it,int cnt,value_type val)","text":"<p>\u5728it\u4e4b\u540e\u63d2\u5165val\uff0c\u6307\u5b9acnt\u65f6\u63d2\u5165cnt\u4e2aval</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#acapacity","title":"a.capacity()","text":"<p>\u8fd4\u56dea\u5728\u5185\u5b58\u4e2d\u603b\u5171\u53ef\u4ee5\u5bb9\u7eb3\u7684\u5143\u7d20\u4e2a\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#aresizeuint-sizevalue_type-val","title":"a.resize(uint size,[value_type val])","text":"<p>\u8c03\u6574\u5143\u7d20\u5c3a\u5bf8\uff0c\u5982\u679c\u591a\u4e86\u5219\u7528val\u8865\u5145</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#aswapvector-b","title":"a.swap(vector b)","text":"<p>\u5c06a\u4e0eb\u4ea4\u6362\uff1a(2021 \u725b\u5ba2\u591a\u6821) <pre><code>void vec_del(vector&lt;int&gt;&amp;x) {vector&lt;int&gt;t; t.clear();x.swap(t);}\n\n//\u91ca\u653e\u5185\u5b58\nvec_del(f);\n</code></pre></p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#string","title":"string","text":"<p>https://blog.csdn.net/yzl_rex/article/details/7839379</p> <pre><code>//string\u51fd\u6570\u7528\u6cd5\u8be6\u89e3\uff01\u9644\u4ee3\u7801\uff0c\u5199\u5177\u4f53\u7684\u7528\u6cd5\uff01 \n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt; \nusing namespace std;\n\n\nint main()\n{\n    //1.string\u7c7b\u91cd\u8f7d\u8fd0\u7b97\u7b26operator&gt;&gt;\u7528\u4e8e\u8f93\u5165\uff0c\u540c\u6837\u91cd\u8f7d\u8fd0\u7b97\u7b26operator&lt;&lt;\u7528\u4e8e\u8f93\u51fa\u64cd\u4f5c\n    string str1;\n    cin &gt;&gt; str1;//\u5f53\u7528cin&gt;&gt;\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u8f93\u5165\u7684\u65f6\u5019\uff0c\u9047\u5230\u7a7a\u683c\u7684\u5730\u65b9\u5c31\u505c\u6b62\u5b57\u7b26\u4e32\u7684\u8bfb\u53d6\u8f93\u5165 \n    cout &lt;&lt; str1 &lt;&lt; endl;\n    cin.get();//\u8fd9\u4e2a\u7684\u4f5c\u7528\u5c31\u662f\u8bfb\u53d6cin&gt;&gt;\u8f93\u5165\u7684\u7ed3\u675f\u7b26\uff0c\u4e0d\u7528\u5bf9getline\u7684\u8f93\u5165\u4ea7\u751f\u5f71\u54cd\uff01 \n    getline(cin, str1);//\u5b57\u7b26\u4e32\u7684\u884c\u8f93\u5165\n    cout &lt;&lt; str1 &lt;&lt; endl; \n\n\n    //2.string\u7c7b\u7684\u6784\u9020\u51fd\u6570 \n    string str2 = \"aaaaa\";//\u6700\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u521d\u59cb\u5316 \n    cout &lt;&lt; str2 &lt;&lt; endl; \n\n    char *s = \"bbbbb\";\n    string str3(s);//\u7528c\u5b57\u7b26\u4e32s\u521d\u59cb\u5316 \n    cout &lt;&lt; str3 &lt;&lt; endl;\n\n    char ch = 'c';\n    string str4(5, ch);//\u7528n\u4e2a\u5b57\u7b26ch\u521d\u59cb\u5316 \n    cout &lt;&lt; str4 &lt;&lt; endl; \n\n    //3.string\u7c7b\u7684\u5b57\u7b26\u64cd\u4f5c\n    string str5 = \"abcde\"; \n    ch = str5[3];//operator[]\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u4e32\u4e2d\u7b2cn\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e \n    cout &lt;&lt; ch &lt;&lt; endl; \n\n    string str6 = \"abcde\";\n    ch = str6.at(4);//at()\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u4e32\u4e2d\u7b2cn\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e,\u5e76\u4e14\u63d0\u4f9b\u8303\u56f4\u68c0\u67e5\uff0c\u5f53\u8d8a\u754c\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff01  \n    cout &lt;&lt; ch &lt;&lt; endl; \n\n    //4.string\u7684\u7279\u6027\u63cf\u8ff0\n    string str7 = \"abcdefgh\";\n    int size;\n    size = str7.capacity();//\u8fd4\u56de\u5f53\u524d\u5bb9\u91cf \n    cout &lt;&lt; size &lt;&lt; endl; \n    size = str7.max_size();//\u8fd4\u56destring\u5bf9\u8c61\u4e2d\u53ef\u5b58\u653e\u7684\u6700\u5927\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \n    cout &lt;&lt; size &lt;&lt; endl; \n    size = str7.size();//\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5927\u5c0f \n    cout &lt;&lt; size &lt;&lt; endl; \n    size = str7.length();//\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \n    cout &lt;&lt; size &lt;&lt; endl; \n    bool flag;\n    flag = str7.empty();//\u5224\u65ad\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a \n    cout &lt;&lt; flag &lt;&lt; endl;\n    int len = 10; \n    str7.resize(len, ch);//\u628a\u5b57\u7b26\u4e32\u5f53\u524d\u5927\u5c0f\u7f6e\u4e3alen\uff0c\u5e76\u7528\u5b57\u7b26ch\u586b\u5145\u4e0d\u8db3\u7684\u90e8\u5206 \n    cout &lt;&lt; str7 &lt;&lt; endl; \n\n    //5.string\u7684\u8d4b\u503c\n    string str8;\n    str8 = str7;//\u628a\u5b57\u7b26\u4e32str7\u8d4b\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32\n    cout &lt;&lt; str8 &lt;&lt; endl;\n    str8.assign(str7);//\u628a\u5b57\u7b26\u4e32str7\u8d4b\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32 \n    cout &lt;&lt; str8 &lt;&lt; endl; \n    str8.assign(s);//\u7528c\u7c7b\u578b\u5b57\u7b26\u4e32s\u8d4b\u503c \n    cout &lt;&lt; str8 &lt;&lt; endl; \n    str8.assign(s, 2);//\u7528c\u7c7b\u578b\u5b57\u7b26\u4e32s\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26\u8d4b\u503c \n    cout &lt;&lt; str8 &lt;&lt; endl; \n    str8.assign(len, ch);//\u7528len\u4e2a\u5b57\u7b26ch\u8d4b\u503c\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32 \n    cout &lt;&lt; str8 &lt;&lt; endl; \n    str8.assign(str7, 0, 3);//\u628a\u5b57\u7b26\u4e32str7\u4e2d\u4ece0\u5f00\u59cb\u76843\u4e2a\u5b57\u7b26\u8d4b\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32 \n    cout &lt;&lt; str8 &lt;&lt; endl; \n    string str9 = \"0123456789\";\n    str8.assign(str9.begin(), str9.end());//\u628a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u5b57\u7b26\u8d4b\u7ed9\u5b57\u7b26\u4e32 \n    cout &lt;&lt; str8 &lt;&lt; endl; \n\n    //6.string\u7684\u8fde\u63a5\n    string str10;\n    str10 += str9;//\u628a\u5b57\u7b26\u4e32str9\u8fde\u63a5\u5230\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e \n    cout &lt;&lt; str10 &lt;&lt; endl;\n    str10.append(s);//\u628ac\u7c7b\u578b\u5b57\u7b26\u4e32s\u8fde\u63a5\u5230\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e \n    cout &lt;&lt; str10 &lt;&lt; endl; \n    str10.append(s, 2);//\u628ac\u7c7b\u578b\u5b57\u7b26\u4e32s\u7684\u524d2\u4e2a\u5b57\u7b26\u8fde\u63a5\u5230\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e \n    cout &lt;&lt; str10 &lt;&lt; endl; \n    str10.append(str9.begin(), str9.end());//\u628a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u4e00\u6bb5\u5b57\u7b26\u8fde\u63a5\u5230\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e \n    cout &lt;&lt; str10 &lt;&lt; endl; \n    str10.push_back('k');//\u628a\u4e00\u4e2a\u5b57\u7b26\u8fde\u63a5\u5230\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e \n    cout &lt;&lt; str10 &lt;&lt; endl; \n\n    //7.string\u7684\u6bd4\u8f83\n    flag = (str9 == str10);//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49 \n    cout &lt;&lt; flag &lt;&lt; endl;\n    flag = (str9 != str10);//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e0d\u76f8\u7b49 \n    cout &lt;&lt; flag &lt;&lt; endl; \n    flag = (str9 &gt; str10);//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5927\u4e8e\u5173\u7cfb \n    cout &lt;&lt; flag &lt;&lt; endl;\n    flag = (str9 &lt; str10);//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u5c0f\u4e8e\u5173\u7cfb \n    cout &lt;&lt; flag &lt;&lt; endl;\n    flag = (str9 &gt;= str10);//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u5927\u4e8e\u7b49\u4e8e\u5173\u7cfb \n    cout &lt;&lt; flag &lt;&lt; endl;\n    flag = (str9 &lt;= str10);//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u5426\u4e3a\u5c0f\u4e8e\u7b49\u4e8e\u5173\u7cfb \n    cout &lt;&lt; flag &lt;&lt; endl; \n\n    //\u4ee5\u4e0b\u76843\u4e2a\u51fd\u6570\u540c\u6837\u9002\u7528\u4e8ec\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u5728compare\u51fd\u6570\u4e2d&gt;\u65f6\u8fd4\u56de1\uff0c&lt;\u65f6\u8fd4\u56de-1\uff0c=\u65f6\u8fd4\u56de0 \n    flag = str10.compare(str9);//\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\uff0c\u901a\u8fc7ASCII\u7684\u76f8\u51cf\u5f97\u51fa\uff01 \n    cout &lt;&lt; flag &lt;&lt; endl; \n    flag = str10.compare(6, 12, str9);//\u6bd4\u8f83str10\u5b57\u7b26\u4e32\u4ece6\u5f00\u59cb\u768412\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e0estr9\u7684\u5927\u5c0f \n    cout &lt;&lt; flag &lt;&lt; endl;\n    flag = str10.compare(6, 12, str9, 3, 5);//\u6bd4\u8f83str10\u5b57\u7b26\u4e32\u4ece6\u5f00\u59cb\u768412\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e0estr9\u5b57\u7b26\u4e32\u4ece3\u5f00\u59cb\u76845\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u7684\u5927\u5c0f \n    cout &lt;&lt; flag &lt;&lt; endl; \n\n    //8.string\u7684\u5b57\u4e32\n    string str11;\n    str11 = str10.substr(10, 15);//\u8fd4\u56de\u4ece\u4e0b\u680710\u5f00\u59cb\u768415\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 \n    cout &lt;&lt; str11 &lt;&lt; endl; \n\n    //9.string\u7684\u4ea4\u6362\n    str11.swap(str10);//\u4ea4\u6362str11\u4e0estr10\u7684\u503c \n    cout &lt;&lt; str11 &lt;&lt; endl; \n\n    //10.string\u7684\u67e5\u627e\uff0c\u67e5\u627e\u6210\u529f\u65f6\u8fd4\u56de\u6240\u5728\u4f4d\u7f6e\uff0c\u5931\u8d25\u65f6\u8fd4\u56destring::npos\u7684\u503c\uff0c\u5373\u662f-1 \n    string str12 = \"abcdefghijklmnopqrstuvwxyz\";\n    int pos;\n    pos = str12.find('i', 0);//\u4ece\u4f4d\u7f6e0\u5f00\u59cb\u67e5\u627e\u5b57\u7b26i\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl;\n    pos = str12.find(\"ghijk\", 0);//\u4ece\u4f4d\u7f6e0\u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32\u201cghijk\u201d\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str12.find(\"opqrstuvw\", 0, 4);//\u4ece\u4f4d\u7f6e0\u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32\u201copqrstuvw\u201d\u524d4\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str12.rfind('s', string::npos);//\u4ece\u5b57\u7b26\u4e32str12\u53cd\u5411\u5f00\u59cb\u67e5\u627e\u5b57\u7b26s\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str12.rfind(\"klmn\", string::npos);//\u4ece\u5b57\u7b26\u4e32str12\u53cd\u5411\u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32\u201cklmn\u201d\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl;\n    pos = str12.rfind(\"opqrstuvw\", string::npos, 3);//\u4ecestring::pos\u5f00\u59cb\u4ece\u540e\u5411\u524d\u67e5\u627e\u5b57\u7b26\u4e32s\u4e2d\u524dn\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5728\u5f53\u524d\u4e32\u4e2d\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n\n    string str13 = \"aaaabbbbccccdddeeefffggghhhiiijjjkkllmmmandjfaklsdfpopdtwptioczx\";\n    pos = str13.find_first_of('d', 0);//\u4ece\u4f4d\u7f6e0\u5f00\u59cb\u67e5\u627e\u5b57\u7b26d\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str13.find_first_of(\"eefff\", 0);//\u4ece\u4f4d\u7f6e0\u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32\u201ceeefff\u201c\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str13.find_first_of(\"efff\", 0, 3);//\u4ece\u4f4d\u7f6e0\u5f00\u59cb\u67e5\u627e\u5f53\u524d\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5728\u5b57\u7b26\u4e32\u201defff\u201c\u7684\u524d3\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u6570\u7ec4\u91cc\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl;\n    pos = str13.find_first_not_of('b', 0);//\u4ece\u5f53\u524d\u4e32\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u5728\u4e32s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str13.find_first_not_of(\"abcdefghij\", 0);//\u4ece\u5f53\u524d\u4e32\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u5728\u4e32s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str13.find_first_not_of(\"abcdefghij\", 0, 3);//\u4ece\u5f53\u524d\u4e32\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u5728\u7531\u5b57\u7b26\u4e32\u201dabcdefghij\u201d\u7684\u524d3\u4e2a\u5b57\u7b26\u6240\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u4f4d\u7f6e \n    cout &lt;&lt; pos &lt;&lt; endl; \n    //\u4e0b\u9762\u7684last\u7684\u683c\u5f0f\u548cfirst\u7684\u4e00\u81f4\uff0c\u53ea\u662f\u5b83\u4ece\u540e\u9762\u68c0\u7d22\uff01 \n    pos = str13.find_last_of('b', string::npos);\n    cout &lt;&lt; pos &lt;&lt; endl;\n    pos = str13.find_last_of(\"abcdef\", string::npos);\n    cout &lt;&lt; pos &lt;&lt; endl;\n    pos = str13.find_last_of(\"abcdef\", string::npos, 2);\n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str13.find_last_not_of('a', string::npos);\n    cout &lt;&lt; pos &lt;&lt; endl; \n    pos = str13.find_last_not_of(\"abcdef\", string::npos);\n    cout &lt;&lt; pos &lt;&lt; endl;\n    pos = str13.find_last_not_of(\"abcdef\", string::npos, 3);\n    cout &lt;&lt; pos &lt;&lt; endl;\n\n    //11.string\u7684\u66ff\u6362 \n    string str14 = \"abcdefghijklmn\";\n    str14.replace(0, 3, \"qqqq\");//\u5220\u9664\u4ece0\u5f00\u59cb\u76843\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u57280\u5904\u63d2\u5165\u5b57\u7b26\u4e32\u201cqqqq\u201d \n    cout &lt;&lt; str14 &lt;&lt; endl; \n    str14.replace(0, 3, \"vvvv\", 2);//\u5220\u9664\u4ece0\u5f00\u59cb\u76843\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u57280\u5904\u63d2\u5165\u5b57\u7b26\u4e32\u201cvvvv\u201d\u7684\u524d2\u4e2a\u5b57\u7b26 \n    cout &lt;&lt; str14 &lt;&lt; endl; \n    str14.replace(0, 3, \"opqrstuvw\", 2, 4);//\u5220\u9664\u4ece0\u5f00\u59cb\u76843\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u57280\u5904\u63d2\u5165\u5b57\u7b26\u4e32\u201copqrstuvw\u201d\u4ece\u4f4d\u7f6e2\u5f00\u59cb\u76844\u4e2a\u5b57\u7b26 \n    cout &lt;&lt; str14 &lt;&lt; endl; \n    str14.replace(0, 3, 8, 'c');//\u5220\u9664\u4ece0\u5f00\u59cb\u76843\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u57280\u5904\u63d2\u51658\u4e2a\u5b57\u7b26 c \n    cout &lt;&lt; str14 &lt;&lt; endl; \n    //\u4e0a\u9762\u7684\u4f4d\u7f6e\u53ef\u4ee5\u6362\u4e3a\u8fed\u4ee3\u5668\u7684\u4f4d\u7f6e\uff0c\u64cd\u4f5c\u662f\u4e00\u6837\u7684\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u518d\u91cd\u590d\u4e86\uff01 \n\n    //12.string\u7684\u63d2\u5165\uff0c\u4e0b\u9762\u7684\u4f4d\u7f6e\u5904\u4ea6\u53ef\u4ee5\u7528\u8fed\u4ee3\u5668\u7684\u6307\u9488\u8868\u793a\uff0c\u64cd\u4f5c\u662f\u4e00\u6837\u7684 \n    string str15 = \"abcdefg\";\n    str15.insert(0, \"mnop\");//\u5728\u5b57\u7b26\u4e32\u76840\u4f4d\u7f6e\u5f00\u59cb\u5904\uff0c\u63d2\u5165\u5b57\u7b26\u4e32\u201cmnop\u201d \n    cout &lt;&lt; str15 &lt;&lt; endl; \n    str15.insert(0, 2, 'm');//\u5728\u5b57\u7b26\u4e32\u76840\u4f4d\u7f6e\u5f00\u59cb\u5904\uff0c\u63d2\u51652\u4e2a\u5b57\u7b26m \n    cout &lt;&lt; str15 &lt;&lt; endl; \n    str15.insert(0, \"uvwxy\", 3);//\u5728\u5b57\u7b26\u4e32\u76840\u4f4d\u7f6e\u5f00\u59cb\u5904\uff0c\u63d2\u5165\u5b57\u7b26\u4e32\u201cuvwxy\u201d\u4e2d\u7684\u524d3\u4e2a\u5b57\u7b26 \n    cout &lt;&lt; str15 &lt;&lt; endl;\n    str15.insert(0, \"uvwxy\", 1, 2);//\u5728\u5b57\u7b26\u4e32\u76840\u4f4d\u7f6e\u5f00\u59cb\u5904\uff0c\u63d2\u5165\u4ece\u5b57\u7b26\u4e32\u201cuvwxy\u201d\u76841\u4f4d\u7f6e\u5f00\u59cb\u76842\u4e2a\u5b57\u7b26 \n    cout &lt;&lt; str15 &lt;&lt; endl; \n\n    //13.string\u7684\u5220\u9664\n    string str16 = \"gfedcba\";\n    string::iterator it;\n    it = str16.begin();\n    it++;\n    str16.erase(it);//\u5220\u9664it\u6307\u5411\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u5220\u9664\u540e\u8fed\u4ee3\u5668\u7684\u4f4d\u7f6e \n    cout &lt;&lt; str16 &lt;&lt; endl;\n    str16.erase(it, it+3);//\u5220\u9664it\u548cit+3\u4e4b\u95f4\u7684\u6240\u6709\u5b57\u7b26\uff0c\u8fd4\u56de\u5220\u9664\u540e\u8fed\u4ee3\u5668\u7684\u4f4d\u7f6e \n    cout &lt;&lt; str16 &lt;&lt; endl; \n    str16.erase(2);//\u5220\u9664\u4ece\u5b57\u7b26\u4e32\u4f4d\u7f6e3\u4ee5\u540e\u7684\u6240\u6709\u5b57\u7b26\uff0c\u8fd4\u56de\u4f4d\u7f6e3\u524d\u9762\u7684\u5b57\u7b26 \n    cout &lt;&lt; str16 &lt;&lt; endl; \n\n    //14.\u5b57\u7b26\u4e32\u7684\u6d41\u5904\u7406\n    string str17(\"hello,this is a test\");\n    istringstream is(str17);\n    string s1,s2,s3,s4;\n    is&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3&gt;&gt;s4;//s1=\"hello,this\",s2=\"is\",s3=\"a\",s4=\"test\"\n    ostringstream os;\n    os&lt;&lt;s1&lt;&lt;s2&lt;&lt;s3&lt;&lt;s4;\n    cout&lt;&lt;os.str() &lt;&lt; endl;\n\n    system(\"pause\");\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#stlstd-algorithm","title":"\u6709\u5173STL\u7684\u51fd\u6570(std\uff0c algorithm)","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#sort-reverse","title":"sort, reverse","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#finditerator-it1iterator-it2type-val","title":"find(Iterator it1,Iterator it2,type val)","text":"<p>\u8fd4\u56deval\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u6307\u9488\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de\u5c3e\u6307\u9488</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#nth_numberrandomaccessiterator-first-randomaccessiterator-nthrandomaccessiterator-last-compare-comp","title":"nth_number(RandomAccessIterator first, RandomAccessIterator nth,RandomAccessIterator last, [Compare comp])","text":"<p>\u4fdd\u6301nth\u8fed\u4ee3\u5668\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u5c31\u662f\u6574\u4e2a\u5e8f\u5217\u7684\u7b2cn\u4e2a\u6570\u3002\u5176\u5de6\u8fb9\u7684\u6570\u5c0f\u4e8e\u5b83\uff0c\u53f3\u8fb9\u7684\u6570\u5927\u4e8e\u5b83\u3002\uff08\u6ce8\u610f\u5728\u8fd9\u4e4b\u540enth\u6307\u5411\u7684\u6570\u5c31\u53ef\u80fd\u53d8\u4e86\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#lower_bound-upper_bound-forwarditerator-first-forwarditerator-last-const-t-val-compare-comp","title":"lower_bound / upper_bound (ForwardIterator first, ForwardIterator last, const T&amp; val, [Compare comp]);","text":"<p>\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\uff08upperbound\u5bf9\u5e94\u7684\u662f\u5927\u4e8e\uff09val\u7684\u6307\u9488\u3002\u5982\u679c\u5168\u4e0d\u7b26\u5408\uff0c\u8fd4\u56delast\u3002</p> <pre><code>template &lt;class ForwardIterator, class T&gt;\n  ForwardIterator lower_bound (ForwardIterator first, ForwardIterator last, const T&amp; val)\n{\n  ForwardIterator it;\n  iterator_traits&lt;ForwardIterator&gt;::difference_type count, step;\n  count = distance(first,last);\n  while (count&gt;0)\n  {\n    it = first; step=count/2; advance (it,step);\n    if (*it&lt;val) {                 // or: if (comp(*it,val)), for version (2)\n      first=++it;\n      count-=step+1;\n    }\n    else count=step;\n  }\n  return first;\n}\n// http://www.cplusplus.com/reference/algorithm/lower_bound/\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/STL%E6%95%B4%E7%90%86/#bool-next_permutation-forwarditerator-first-forwarditerator-last","title":"bool next_permutation (ForwardIterator first, ForwardIterator last)","text":"<p>\u4f7f\u5f97first\u5230last\u4e4b\u95f4\u7684\u5e8f\u5217\u53d8\u4e3a\u4e0b\u4e00\u4e2a\u5168\u6392\u5217</p> <ul> <li>\u5728\u4f7f\u7528\u524d\u9700\u8981\u5347\u5e8f\u6392\u5e8f</li> <li>\u5f53\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u6392\u5217\u65f6\uff08\u5168\u4e3a\u964d\u5e8f\uff09\uff0c\u8fd4\u56defalse</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main()\n{\n    string s(\"afgcbed\");\n    string::iterator p = find(s.begin(), s.end(), 'c');\n    if (p!= s.end())\n        cout &lt;&lt; p - s.begin() &lt;&lt; endl;  //\u8f93\u51fa 3\n    sort(s.begin(), s.end());\n    cout &lt;&lt; s &lt;&lt; endl;  //\u8f93\u51fa abcdefg\n    next_permutation(s.begin(), s.end());\n    cout &lt;&lt; s &lt;&lt; endl; //\u8f93\u51fa abcdegf\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/","title":"\u5b66\u4e0d\u6765Python","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_1","title":"\u4e00\u4e9b\u524d\u8a00","text":"<p>\u4e4b\u6240\u4ee5\u4e0b\u51b3\u5fc3\u5199\u8fd9\u4e2a\u7cfb\u5217\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e48\u957f\u4e45\u4ee5\u6765\u6211\u5b66Python\u90fd\u662f\u5728\u9700\u8981\u4f7f\u7528\u65f6\u4e34\u65f6\u53c2\u8003\u7684\u7f51\u4e0a\u7684\u6559\u7a0b\uff0c\u52a0\u4e0a\u6211\u81ea\u5df1\u4ee5\u524d\u5e76\u6ca1\u6709\u8bb0\u5f55\u81ea\u5df1\u5b66\u4e60\u5185\u5bb9\u7684\u4e60\u60ef\uff0c\u56e0\u800c\u5bfc\u81f4\u6211Python\u5b66\u7684\u4e1c\u897f\u90fd\u76f8\u5f53\u96f6\u6563\u4e14\u534a\u540a\u5b50\u3002\u56e0\u6b64\u6211\u5199\u8fd9\u4e2a\u7cfb\u5217\u4e3b\u8981\u4e5f\u662f\u8981\u7ed9\u81ea\u5df1\u5b66\u8fc7\u7684\u4e1c\u897f\u505a\u4e00\u4e2a\u5f52\u7eb3\u65b9\u4fbf\u4ee5\u540e\u81ea\u5df1\u67e5\u9605\u3002</p> <p>\u603b\u6240\u5468\u77e5\uff0cPython\u7684\u8bed\u6cd5\u7b80\u5355\uff0c\u56e0\u6b64\u88ab\u5404\u79cd\u201c\u673a\u6784\u201d\u7528\u6765\u5f53\u505a\u7f16\u7a0b\u7684\u5165\u95e8\u8bed\u8a00\u3002\u7136\u800c\u5b9e\u9645\u4e0a\u5982\u679c\u6ca1\u6709\u63a5\u89e6\u8fc7\u7f16\u7a0b\u4e14\u4e0d\u4e86\u89e3Python\u80cc\u540e\u7684\u4e00\u4e9b\u673a\u5236\u7684\u8bdd\uff0c\u8fd9\u95e8\u8bed\u8a00\u5176\u5b9e\u975e\u5e38\u96be\u5b66\u2014\u2014\u5b83\u7684\u5751\u592a\u591a\u4e86\u3002\u8fd9\u4e5f\u662f\u6211\u5b66\u8fd9\u95e8\u8bed\u8a00\u8fc7\u7a0b\u4e2d\u7684\u611f\u609f\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7cfb\u5217\u4e5f\u662f\u4e3a\u4e86\u603b\u7ed3\u4e00\u4e0b\u5b83\u7684\u4e00\u4e9b\u5751\u4ee5\u514d\u6211\u4ee5\u540e\u518d\u8e29\uff08\u5f53\u7136\u4e5f\u4ec5\u9650\u4e8e\u6211\u7684\u80fd\u529b\u8303\u56f4\u5185\u4e86\uff09\u3002\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u51b3\u5b9a\u7ed9\u8fd9\u4e2a\u7cfb\u5217\u53d6\u540d\u53eb\u201c\u5b66\u4e0d\u6765Python\u201d\u3002</p> <p>\u6700\u540e\uff0c\u6211\u5bf9\u6211\u81ea\u5df1\u6525\u5199\u6587\u7ae0\u7684\u6c34\u5e73\u6ca1\u591a\u5c11\u81ea\u4fe1\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u5199\u7684\u4e1c\u897f\u4e0d\u4e00\u5b9a\u9002\u5408\u7ed9\u522b\u4eba\u770b\uff0c\u751a\u81f3\u4e8e\u8bf4\u662f\u5f53\u505a\u201c\u6559\u7a0b\u201d\u2014\u2014\u8fd9\u4e2a\u7cfb\u5217\u5e94\u8be5\u8bf4\u662f\u4e00\u4e2a\u5199\u7ed9\u6211\u81ea\u5df1\u770b\u7684\u201c\u6559\u7a0b\u201d\uff0c\u5f53\u7136\u6211\u4f1a\u5c3d\u91cf\u628a\u6211\u60f3\u7ed9\u81ea\u5df1\u770b\u7684\u5185\u5bb9\u5199\u6210\u5176\u4ed6\u4eba\u4e5f\u80fd\u770b\u61c2\u7684\u5f62\u5f0f\u3002\u8fd9\u4e2a\u7cfb\u5217\u4e5f\u4f1a\u53c2\u8003\u4e00\u4e9b\u7f51\u4e0a\u6bd4\u8f83\u6709\u540d\u7684\u6559\u7a0b\uff08\u6bd4\u5982liaoxuefeng\u548cPython\u5b98\u7f51\u7684\u6559\u7a0b\uff09\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u4e5f\u4f1a\u7ed9\u51fa\u53c2\u8003\u94fe\u63a5\u3002\u53e6\u5916\uff0c\u7531\u4e8e\u6211\u6c34\u5e73\u6709\u9650\uff0c\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u4f1a\u8be6\u7ec6\u5730\u8bf4\u660e\u8fd9\u4e2a\u8bed\u8a00\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ec6\u8282\uff0c\u66f4\u591a\u7684\u65f6\u5019\u53ea\u662f\u505c\u7559\u5728\u201c\u80fd\u7528\u5c31\u884c\u201d\u7684\u6c34\u5e73\uff0c\u6587\u4e2d\u6240\u8bf4\u7684\u5185\u5bb9\u4e5f\u672a\u5fc5100%\u51c6\u786e\uff0c\u8fd8\u8bf7\u89c1\u8c05\u3002</p> <p>\u5982\u679c\u6587\u4e2d\u6709\u9519\u8bef\u65e0\u4efb\u6b22\u8fce\u6307\u51fa\u3002\u90a3\u4e48\u6700\u540e\u5c31\u8bf7\u591a\u6307\u6559\u4e86\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_2","title":"\u57fa\u7840\u8bed\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#python_1","title":"\u57fa\u672c\u6982\u5ff5\u548cPython\u7684\u7279\u5f81","text":"<p>Python\u662f\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff1a\u5728Python\u4e2d\uff0c\u4efb\u4f55\u7684\u7c7b\u578b\uff08\u5982\u4e0b\u6587\u63d0\u5230\u7684\u6570\u5b57\u3001\u5b57\u7b26\u4e32\uff09\u90fd\u662f\u67d0\u79cd\u7c7b\u3002</p> <p>\u7c7b\uff1a\u4e00\u79cd\u62bd\u8c61\u7684\u7c7b\u578b\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u6307\u4ee3\u4e00\u7c7b\u6709\u8be6\u7ec6\u5b9a\u4e49\u7684\u4e8b\u7269\u3002\u4f8b\u5982\uff0c\u6570\u5b66\u4e0a\u7684\u96c6\u5408\uff08\u4e00\u7c7b\u4e8b\u7269\uff09\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u79cd\u7c7b\u3002\u4eba\u7c7b\u4e5f\u662f\u4e00\u79cd\u7c7b\u3002</p> <p>\u5b9e\u4f8b\u3001\u5bf9\u8c61\uff1a\u7c7b\u4e2d\u7684\u67d0\u4e2a\u7279\u5b9a\u7684\u5b9e\u4f53\u79f0\u4e3a\u5b9e\u4f8b\uff0c\u4e5f\u5373\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u96c6\u5408{1,2,3}\u662f\u96c6\u5408\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u53e6\u4e00\u4e2a\u96c6\u5408{5,6,7}\u53c8\u662f\u96c6\u5408\u7684\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u3002\u67d0\u4e2a\u7279\u5b9a\u7684\u4eba\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u4eba\u7c7b\u201d\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u5f53\u7136\u6570\u5b66\u4e0a\u7684\u96c6\u5408\u672c\u8eab\u4e0d\u662f\u6570\u636e\u7ed3\u6784\uff0c\u4e0b\u6587\u4e2d\u4f1a\u63d0\u5230Python\u4e2d\u7684\u4e00\u79cd\u7c7b\u578b\u53ebset\uff0c\u5b83\u5c31\u662f\u6570\u5b66\u96c6\u5408\u5728Python\u4e2d\u7684\u5b9e\u73b0\uff0c\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u6210\u5458\uff1a\u4e00\u4e2a\u7c7b\u4e2d\u5305\u542b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7edf\u79f0\u4e3a\u6210\u5458\u3002</p> <p>\u5c5e\u6027\uff1a\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u6240\u62e5\u6709\u7684\u5c5e\u6027\u6709\u54ea\u4e9b\u3002\u4f8b\u5982\uff0c\uff08\u6709\u9650\uff09\u96c6\u5408\u62e5\u6709\u5927\u5c0f\u8fd9\u4e2a\u5c5e\u6027\uff0c {1,2}\u8fd9\u4e2a\u96c6\u5408\u4f5c\u4e3a\u96c6\u5408\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5927\u5c0f\u8fd9\u4e2a\u5c5e\u6027\u7684\u503c\u662f2\u3002\u4eba\u7c7b\u62e5\u6709\u8eab\u9ad8\u8fd9\u4e2a\u5c5e\u6027\uff0c\u800c\u67d0\u4e2a\u7279\u5b9a\u7684\u4eba\u8eab\u9ad8\u662f172cm\u5c31\u662f\u8fd9\u4e2a\u7279\u5b9a\u7684\u4eba\u5728\u8eab\u9ad8\u8fd9\u4e2a\u5c5e\u6027\u4e0a\u7684\u503c\u3002</p> <p>\u65b9\u6cd5\uff1a\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u6240\u80fd\u505a\u7684\u64cd\u4f5c\uff08\u901a\u5e38\u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u548c\u5b9e\u4f8b\u672c\u8eab\u6709\u5173\uff09\u6709\u54ea\u4e9b\u3002\u4f8b\u5982\uff0c\u96c6\u5408\u7c7b\u5b9a\u4e49\u4e86\u53d6\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5220\u9664\u67d0\u5143\u7d20\u7b49\u64cd\u4f5c\uff08\u8fd9\u4e9b\u64cd\u4f5c\u5c31\u662f\u65b9\u6cd5\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u96c6\u5408\uff5b1\uff0c2\uff0c3\uff5d\uff0c\u5b83\u53ef\u4ee5\u4e0e\u53e6\u4e00\u4e2a\u96c6\u5408\uff5b5\uff0c6\uff0c7\uff5d\u53d6\u5e76\u96c6\u3001\u4ea4\u96c6\u4ece\u800c\u5f97\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u96c6\u5408\u4e2d\u67d0\u4e00\u7279\u5b9a\u5143\u7d20\u5f97\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\uff08\u4f8b\u5982\u5220\u63893\u5c31\u53ef\u4ee5\u5f97\u5230\uff5b1\uff0c2\uff5d\uff09\u3002</p> <p>\u53d8\u91cf\uff1a\u7ed1\u5b9a\u5230\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u7684\u6307\u9488\uff08\u5728Python\u610f\u4e49\u4e0b\uff09\u3002\u4f8b\u5982\u4ee4a=10\uff0c\u90a3\u4e48\u5c31\u8bf4a\u6307\u5411\u4e8610\u3002</p> <p>\u51fd\u6570\uff1a\u4e00\u7cfb\u5217\u5df2\u7ecf\u5c01\u88c5\u597d\u4e86\u7684\u4ee3\u7801\u5757\uff0c\u63a5\u53d7\u7279\u5b9a\u53c2\u6570\u5e76\u6267\u884c\uff08\u4e5f\u5373\u8c03\u7528\uff09\u540e\u5373\u53ef\u8fd4\u56de\u7ed3\u679c\uff08\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u53ea\u662f\u8fd0\u884c\u800c\u4e0d\u8fd4\u56de\u7ed3\u679c\uff09\u3002</p> <p>Python\u662f\u5f31\u7c7b\u578b\u7684\u8bed\u8a00\uff1a\u8981\u5b9a\u4e49\u53d8\u91cf\uff0c\u53ea\u9700\u8981\u7ed9\u5b83\u8d4b\u503c\u4e00\u4e2a\u76f8\u5e94\u7c7b\u578b\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5373\u53ef\u3002\u4e0d\u9700\u8981\u7279\u522b\u6307\u660e\u5176\u7c7b\u578b\u3002</p> <p>Python\u4f9d\u8d56\u7f29\u8fdb\u533a\u5206\u4ee3\u7801\u5757\uff1a\u4f18\u70b9\u662f\u5927\u591a\u6570\u65f6\u5019\u4e0d\u9700\u8981\u6253\u82b1\u62ec\u53f7\u548c\u5206\u53f7\u6765\u533a\u5206\u4ee3\u7801\u5757\u548c\u4e00\u884c\u7684\u7ed3\u675f\uff0c\u7f3a\u70b9\u5c31\u662fPython\u5bf9\u7f29\u8fdb\u7684\u8981\u6c42\u6781\u5176\u4e25\u683c\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_3","title":"\u57fa\u672c\u6570\u636e\u7c7b\u578b","text":"<p>Python\u4e2d\u6709\u51e0\u79cd\u57fa\u672c\u6700\u5e38\u7528\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u662f\u5bf9\u8c61\u3002\u4e0b\u9762\u4f1a\u5bf9\u8fd9\u4e9b\u7c7b\u578b\u505a\u4e00\u4e9b\u8f83\u4e3a\u8be6\u7ec6\u7684\u8bf4\u660e\u3002</p> \u7c7b\u578b \u4f8b\u5b50 \u8bf4\u660e \u6574\u6570\uff08int\uff09 123 \u9ad8\u7cbe\u5ea6\u5927\u6574\u6570 \u6d6e\u70b9\u6570\uff08float\uff09 114.514,1.0,1e18 \u5b57\u7b26\u4e32\uff08str\uff09 \"TML104\" \u5e03\u5c14\u503c\uff08bool\uff09 True,False \u4ee5\u5927\u5199\u5f00\u5934\uff0c\u53ea\u6709\u4e24\u4e2a\u5408\u6cd5\u7684\u503c \u590d\u6570 1+2j"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_4","title":"\u6574\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_5","title":"\u5341\u8fdb\u5236","text":"<p>\u4e00\u822c\u5730\uff0c\u968f\u4fbf\u8f93\u5165\u67d0\u4e2a\u5341\u8fdb\u5236\u6570\u5c31\u662f\u6574\u6570\u4e86\u3002\u4f46\u4ed6\u4eec\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u524d\u5bfc\u96f6\u3002</p> <pre><code>a=123456\nb=-1123\nc=0\n</code></pre> <p>\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528\u4e0b\u5212\u7ebf\u5206\u5272\u6570\u5b57\uff0cPython\u4f1a\u8ba4\u4e3a\u4ed6\u4eec\u662f\u8fde\u5728\u4e00\u8d77\u7684\u3002</p> <pre><code>a=114_514\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_6","title":"\u5176\u4ed6\u8fdb\u5236","text":"<p>\u5728\u5bf9\u5e94\u8fdb\u5236\u7684\u6570\u524d\u52a0\u4e0a\u201c0b\u201d\u3001\u201c0o\u201d\u3001\u201c0x\u201d\uff0c\u5c31\u53ef\u4ee5\u4ee5\u4e8c\u3001\u516b\u3001\u5341\u8fdb\u5236\u8868\u793a\u522b\u7684\u6574\u6570\u3002</p> <pre><code>a=0b11\nb=-0x3f\nc=0o12\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_7","title":"\u6d6e\u70b9\u6570","text":"<p>\u53ef\u4ee5\u76f4\u89c2\u5730\u7406\u89e3\uff1a\u5e26\u6709\u5c0f\u6570\u70b9\u7684\u6570\u5c31\u662f\u6d6e\u70b9\u6570\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u6765\u8868\u793a\u6d6e\u70b9\u6570\uff0c\u5f62\u5982\u201cxey\u201d\uff0c\u7b49\u4ef7\u4e8e\\(x\\cdot 10^y\\)</p> <pre><code>a=1.0\nb=3e9\nc=38e38\nd=1e-12\n</code></pre> <p>\u8fd9\u91cc\\(b=3*10^9\\)\uff0c\\(c=3.8*10^{39},d=1*10^{-12}\\)\uff0c\u4f46\u8981\u6ce8\u610f\u4ed6\u4eec\u90fd\u662f\u6d6e\u70b9\u6570\u3002</p> <ul> <li>\u6ce8\u610f\u533a\u5206\uff1a1\u548c1.0\u662f\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6570\uff0c\u524d\u8005\u662f\u6574\u6570\uff08int\uff09\u3001\u540e\u8005\u662f\u6d6e\u70b9\u6570\uff08float\uff09\uff0c\u4e0b\u6587\u4e2d\u7684\u9664\u6cd5\u8fd0\u7b97\u4f1a\u6d89\u53ca\u5230\u8fd9\u70b9\u3002</li> </ul> <p>\u5982\u679c\u5c0f\u6570\u4ee50.\u5f00\u5934\uff0c\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u63890\u3002\u4e0b\u9762\u7684a\u7b49\u4e8e-0.03\u3002</p> <pre><code>a=-.03\n</code></pre> <p>\u7531\u4e8e\u8ba1\u7b97\u673a\u4fdd\u5b58\u6d6e\u70b9\u6570\u7684\u5f62\u5f0f\u5b58\u5728\u4e00\u5b9a\u7684\u201c\u7f3a\u9677\u201d\u5bfc\u81f4\u8fd0\u7b97\u53ef\u80fd\u4f1a\u5b58\u5728\u7cbe\u5ea6\u95ee\u9898\uff0c\u56e0\u6b64\u80fd\u7528\u6574\u6570\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u7528\u6574\u6570\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_8","title":"\u5b57\u7b26\u4e32","text":"<p>\u5176\u5b9e\u8fd9\u73a9\u610f\u5e94\u8be5\u4e0d\u7b97\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e86\u2026\u2026\u56e0\u4e3a\u5b57\u7b26\u4e32\u4e8b\u5b9e\u4e0a\u62e5\u6709\u4e00\u4e9b\u9ad8\u7ea7\u7279\u6027\uff0c\u4ee5\u540e\u4f30\u8ba1\u4f1a\u5f00\u4e00\u8282\u4e13\u95e8\u8bf4\u660e\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u662f\u5148\u63d0\u4e00\u5634\u3002</p> <p>\u4f7f\u7528\u4e00\u5bf9\u534a\u89d2\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5305\u88f9\u7684\u5185\u5bb9\u662f\u5355\u884c\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u4e09\u5bf9\u534a\u89d2\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5305\u88f9\u7684\u5185\u5bb9\u662f\u591a\u884c\u5b57\u7b26\u4e32\u3002</p> <pre><code>a=\"Hello,world\"\nb='''R1\nR2\nR3\n'''\n</code></pre> <p>\u6ce8\u610f\u8d4b\u503c\u7684\u65f6\u5019\u591a\u884c\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u4e09\u4e2a\u5f15\u53f7\u5fc5\u987b\u8981\u548c\u53d8\u91cf\u540c\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u53d8\u6210\u4e0b\u6587\u4e2d\u7684\u6ce8\u91ca\u7684\u5199\u6cd5\u4e86\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_9","title":"\u5e03\u5c14\u503c","text":"<p>\u8fd9\u4e2a\u5c31\u6ca1\u4ec0\u4e48\u597d\u8bf4\u660e\u7684\u4e86\u3002\u5e03\u5c14\u503c\u53ea\u6709\u4e24\u79cd\u53d6\u503c\uff1aTrue\u3001False\uff0c\u6ce8\u610f\u4e0d\u50cfC\u8bed\u8a00\uff0c\u8fd9\u91cc\u5b83\u4eec\u5f00\u5934\u9996\u5b57\u6bcd\u5fc5\u987b\u8981\u5927\u5199\u3002</p> <pre><code>a=True\nb=False\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_10","title":"\u590d\u6570","text":"<p>\u8fd9\u4e2a\u7c7b\u578b\u4e0d\u600e\u4e48\u5e38\u7528\uff0c\u8fd9\u91cc\u53ea\u662f\u63d0\u4e00\u4e0b\u3002\u7528\"a+bj\"\u6765\u6784\u9020\u4e00\u4e2a\u590d\u6570\uff0c\u4e5f\u53ef\u4ee5\u7528complex(\"a+bj\")\u4ee5\u5b57\u7b26\u4e32\u6765\u6784\u9020\u590d\u6570\u3002</p> <pre><code>a=complex(\"1+2j\")\nb=1+2j\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_11","title":"\u53d8\u91cf\u548c\u7b80\u5355\u8d4b\u503c","text":"<p>\u4f7f\u7528\u7b49\u4e8e\u53f7\u6765\u7ed9\u53d8\u91cf\u8d4b\u503c\u3002\u4e0a\u6587\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4f8b\u5b50\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u540c\u65f6\u5bf9\u591a\u4e2a\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u6837abc\u4e09\u4e2a\u53d8\u91cf\u5c31\u90fd\u662f10\uff1a</p> <pre><code>a=b=c=10\n</code></pre> <p>python\u4e2d\u7684\u53d8\u91cf\u4e0e\u5176\u8bf4\u662f\u53d8\u91cf\uff0c\u4e0d\u5982\u8bf4\u662f\u67d0\u79cd\u201c\u6307\u9488\u201d\u2014\u2014\u5b83\u7684\u672c\u8d28\u5176\u5b9e\u662f\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\uff08\u4e5f\u5c31\u662f\u4f20\u9012\u5f15\u7528\uff09\u3002\u8fd9\u4e2a\u6982\u5ff5\u5bf9\u7406\u89e3\u540e\u9762\u7684\u5217\u8868\u7b49\u53ef\u53d8\u7c7b\u578b\u4f1a\u6709\u5e2e\u52a9\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_12","title":"\u5220\u9664","text":"<p>\u7ed9\u53d8\u91cfa\u8d4b\u503c\u540e\uff0c\u53ef\u4ee5\u7528del\u8bed\u53e5\u5220\u9664\u53d8\u91cfa\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u8fd9\u6837a\u5c31\u91cd\u65b0\u56de\u5230\u672a\u5b9a\u4e49\u7684\u72b6\u6001\u4e86\u3002</p> <pre><code>a=[3,4,5]\ndel a\na #NameError: name 'a' is not defined\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_13","title":"\u57fa\u672c\u8fd0\u7b97","text":"<p>\u4e0b\u6587\u4e2d\u5c06\u4f1a\u5217\u51fa\u6bd4\u8f83\u5e38\u7528\u7684\u8fd0\u7b97\uff0c\u4e0d\u4f1a\u5217\u51fa\u6240\u6709\u8fd0\u7b97\uff08\u56e0\u4e3a\u592a\u591a\u4e86\u6211\u81ea\u5df1\u90fd\u4e0d\u4f1a= =\uff09\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_14","title":"\u4ee3\u6570\u8fd0\u7b97\u7b26\u8fd0\u7b97","text":"<p>\u4e0b\u6587\u4e2d\u793a\u4f8b\u7b49\u53f7\u53f3\u4fa7\u8868\u793a\u8fd0\u7b97\u7ed3\u679c\u3002</p> <p>\u9664\u975e\u6709\u7279\u6b8a\u8bf4\u660e\uff0c\u4e0b\u8868\u4e2d\u7b26\u53f7\u7686\u4e3a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e14\u6d6e\u70b9\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u5747\u53ef\u53c2\u4e0e\u8fd0\u7b97 $$ \\begin{array} {|}  \\hline { \u8fd0\u7b97                 }&amp;{ \u7b26\u53f7             }&amp;{ \u7279\u6b8a\u8bf4\u660e                                                     }&amp;{ \u793a\u4f8b                                                         }\\  \\hline { \u52a0\u6cd5                 }&amp;{ +                }&amp;{ \u5bf9\u4e8e\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u5bf9\u8c61\u6b64\u7b26\u53f7\u6709\u7279\u6b8a\u7528\u9014                       }&amp;{ 1+2 =3\\ [3]+[4] =[3,4]\\ \"13\"+\"222\" =\"13222\"          }\\  \\hline { \u51cf\u6cd5                 }&amp;{ -                }&amp;{                                                              }&amp;{ 1-2 =-1                                                      }\\  \\hline { \u4e58\u6cd5                 }&amp;{ }&amp;{ \u5bf9\u4e8e\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u5bf9\u8c61\u6b64\u7b26\u53f7\u6709\u7279\u6b8a\u7528\u9014                       }&amp;{ 12 =2\\ \"13\"5 =\"1313131313\"\\ [3,4]2 =[3,4,3,4] }\\  \\hline { \u6574\u6570\u9664\u6cd5\uff08\u5730\u677f\u9664\u6cd5\uff09 }&amp;{ //               }&amp;{ \u8fd4\u56de\u6574\u6570\u503c\uff08\u5411\u4e0b\u53d6\u6574\uff0c\u4e5f\u5373\u8d1f\u6570\u65b9\u5411\u53d6\u6574\uff09\\\u9664\u4ee50\u4f1a\u629b\u51faZeroDivisionError\u5f02\u5e38 }&amp;{ 3//4 =0\\ -3//4 =-1                                       }\\  \\hline { \u6d6e\u70b9\u6570\u9664\u6cd5           }&amp;{ /                }&amp;{ \u8fd4\u56de\u6d6e\u70b9\u6570\u503c\uff0c\u9664\u4ee50\u4f1a\u629b\u51faZeroDivisionError\u5f02\u5e38               }&amp;{ 3//4 =0.75                                                   }\\  \\hline { \u53d6\u6a21                 }&amp;{ \\%                }&amp;{ a\\%b\u7684\u7ed3\u679c\u4e3aa-(a//b)b\uff0c\u9664\u4ee50\u4f1a\u629b\u51faZeroDivisionError\u5f02\u5e38;\\\u5bf9\u5b57\u7b26\u4e32\u5bf9\u8c61\u6709\u7279\u6b8a\u7528\u9014\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff09;\\\u6ce8\u610f\uff1a\u6839\u636e\u8fd9\u4e2a\u516c\u5f0f\uff0c\u4f60\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u5bf9\u6d6e\u70b9\u6570\u53d6\u6a21 }&amp;{ 4\\%3 =1\\ 4\\%-3 =-2\\ -4\\%3 =2\\ -4\\%-3 =-1\\ 4.2\\%3.0 =1.2000000000000002 }\\  \\hline { \u4e58\u65b9                 }&amp;{ pow(a,b) \u6216 ab }&amp;{                                                              }&amp;{ 43 =64\\ 2*0.5 =1.4142135623730951                    }\\\\ \\hline \\end{array}\\ $$</p> \u8fd0\u7b97 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u52a0\u6cd5 + \u5bf9\u4e8e\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u5bf9\u8c61\u6b64\u7b26\u53f7\u6709\u7279\u6b8a\u7528\u9014 1+2 =3[3]+[4] =[3,4]\"13\"+\"222\" =\"13222\" \u51cf\u6cd5 - 1-2 =-1 \u4e58\u6cd5 * \u5bf9\u4e8e\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u5bf9\u8c61\u6b64\u7b26\u53f7\u6709\u7279\u6b8a\u7528\u9014 12 =2\"13\"5 =\"1313131313\"[3,4]*2 =[3,4,3,4] \u6574\u6570\u9664\u6cd5\uff08\u5730\u677f\u9664\u6cd5\uff09 // \u8fd4\u56de\u6574\u6570\u503c\uff08\u5411\u4e0b\u53d6\u6574\uff0c\u4e5f\u5373\u8d1f\u6570\u65b9\u5411\u53d6\u6574\uff09\uff0c\u9664\u4ee50\u4f1a\u629b\u51faZeroDivisionError\u5f02\u5e38 3//4 =0-3//4 =-1 \u6d6e\u70b9\u6570\u9664\u6cd5 / \u8fd4\u56de\u6d6e\u70b9\u6570\u503c\uff0c\u9664\u4ee50\u4f1a\u629b\u51faZeroDivisionError\u5f02\u5e38 3//4 =0.75 \u53d6\u6a21 % a%b\u7684\u7ed3\u679c\u4e3aa-(a//b)*b\uff0c\u9664\u4ee50\u4f1a\u629b\u51faZeroDivisionError\u5f02\u5e38\uff1b\u5bf9\u5b57\u7b26\u4e32\u5bf9\u8c61\u6709\u7279\u6b8a\u7528\u9014\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff09\uff1b\u6ce8\u610f\uff1a\u6839\u636e\u8fd9\u4e2a\u516c\u5f0f\uff0c\u4f60\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u5bf9\u6d6e\u70b9\u6570\u53d6\u6a21 4%3 =14%-3 =-2-4%3 =2-4%-3 =-14.2%3.0 =1.2000000000000002 \u4e58\u65b9 pow(a,b) \u6216 a**b 43 =6420.5 =1.4142135623730951"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_15","title":"\u5e03\u5c14\u903b\u8f91\u8fd0\u7b97","text":"<p>\u53c2\u4e0e\u8fd0\u7b97\u7684\u901a\u5e38\u662f\u5e03\u5c14\u503c\u3002</p> \u8fd0\u7b97 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u6216 a or y True or False = True \u4e0e a and b True or False = False \u975e not a \u5355\u76ee\u8fd0\u7b97\u7b26 not False =True"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_16","title":"\u6bd4\u8f83\u8fd0\u7b97","text":"<p>\u53c2\u4e0e\u8fd0\u7b97\u7684\u901a\u5e38\u662f\u5e03\u5c14\u503c\u3002\u5f53\u7136\uff0c\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u7b49\u4e5f\u53ef\u6bd4\u8f83\u5927\u5c0f\uff0c\u4f46\u4e0d\u7b49\u53f7\u4e24\u8fb9\u4e00\u822c\u5f97\u662f\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u3002</p> \u8fd0\u7b97 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u5c0f\u4e8e &lt; \u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\uff1a\u6309\u5b57\u5178\u5e8f\u6bd4\u8f83\uff0c\u4e0b\u540c \u5c0f\u4e8e\u7b49\u4e8e &lt;= \u5927\u4e8e &gt; \u5927\u4e8e\u7b49\u4e8e &gt;= \u7b49\u4e8e == \uff08\u901a\u5e38\u662f\uff09\u5224\u65ad\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u7684\u5b9a\u4e49\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bf9\u8c61\u800c\u8a00\u53ef\u80fd\u4e0d\u540c\uff1b\u7279\u522b\u5730\uff0c\u7531\u4e8e\u6d6e\u70b9\u6570\u7cbe\u5ea6\u95ee\u9898\uff0c\u5bf9\u6d6e\u70b9\u6570\u4f7f\u7528\u6b64\u7b26\u53f7\u5e94\u5f53\u614e\u91cd \u5bf9\u8c61\u6807\u8bc6 is \u4e24\u4e2a\u5bf9\u8c61\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff08\u8fd9\u91cc\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u610f\u601d\u5927\u81f4\u662f\u4ed6\u4eec\u7684\u5185\u5b58\u5730\u5740\u5b8c\u5168\u4e00\u6837\uff09\u65f6\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse 1 is 1 =True[1] is [1] =False \u5426\u5b9a\u5bf9\u8c61\u6807\u8bc6 is not \u4e0a\u4e00\u6761\u7684\u5426\u5b9a\u5f62\u5f0f \u6210\u5458\u68c0\u6d4b\u8fd0\u7b97 in \u6216 not in \u68c0\u6d4ba\u662f\uff08\u4e0d\u662f\uff09b\u7684\u4e00\u4e2a\u6210\u5458\u3002\uff08\u6216\u8005\u8bf4a\u662f\u5426\u5728b\u91cc\uff09\uff1b\u7279\u522b\u5730\uff0c\u5bf9\u5b57\u5178\u6765\u8bf4a\u662fb\u7684\u952e\u65f6\u8fd4\u56deTrue 3 in [1,3] =True5 in [1,3] =False <p>is\u7684\u4f7f\u7528\u548c\u5bf9\u8c61\u7684id\u6709\u5173\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u8be6\u7ec6\u8bf4\u660e\u3002</p> <p>\u53e6\u5916\uff0cpython\u4e2d\u8fd8\u53ef\u4ee5\u628a\u51e0\u4e2a\u6bd4\u8f83\u7b26\u53f7\u8fde\u7740\u5199\uff1a<code>a&lt;x&lt;=b</code>\uff0c\u8fd9\u79cd\u5199\u6cd5\u5c31\u7ed3\u679c\u800c\u8a00\u7b49\u4ef7\u4e8e<code>a&lt;x and x&lt;=b</code>\uff0c\u4f46x\u7684\u503c\u53ea\u4f1a\u6c42\u89e3\u4e00\u6b21\u3002\u6b64\u5916\uff0c<code>a&lt;x&gt;b</code>\u4e5f\u7b49\u4ef7\u4e8e<code>a&lt;x and x&gt;b</code>\uff0ca\u548cb\u4e4b\u95f4\u4e0d\u4f1a\u8fdb\u884c\u6bd4\u8f83\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_17","title":"\u4f4d\u8fd0\u7b97","text":"<p>\u4f4d\u8fd0\u7b97\u901a\u5e38\u5728\u6574\u6570\u4e0b\u8fdb\u884c\u3002\u7531\u4e8epython\u4e2d\u7684\u6574\u6570\u662f\u5927\u6574\u6570\uff0c\u505a\u4e0b\u9762\u7684\u8fd0\u7b97\u76f8\u5f53\u4e8e\u5bf9\u65e0\u7a77\u4e2a\u4e8c\u8fdb\u5236\u8865\u7801\u4f4d\u505a\u8fd0\u7b97\uff08\u5f53\u7136\u5b9e\u9645\u5b9e\u73b0\u7684\u65f6\u5019\u4e0d\u53ef\u80fd\u662f\u8fd9\u6837\uff0c\u8fd9\u4e48\u8bf4\u53ea\u662f\u65b9\u4fbf\u7406\u89e3\uff09</p> \u8fd0\u7b97 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u6309\u4f4d\u6216 | -3 | -4 =-3 \u6309\u4f4d\u4e0e &amp; -3&amp;-4 =1 \u6309\u4f4d\u5f02\u6216 ^ -3^-4 =1 \u6309\u4f4d\u53d6\u53cd ~a \u7b49\u4ef7\u4e8e\u8fd4\u56de-a-1 ~-3=2 \u5de6\u79fb a&lt;&lt;b \u7b26\u53f7\u4f4d\u4e0d\u4f1a\u79fb\u52a8\uff0c\u591a\u51fa\u6765\u7684\u4f4d\u75280\u586b\u5145\uff1b\u7b49\u4ef7\u4e8e\u4e58\u4ee52\u7684b\u6b21\u65b9 22&lt;&lt;3 =176 \u53f3\u79fb a&gt;&gt;b \u7b26\u53f7\u4f4d\u4e0d\u4f1a\u79fb\u52a8\uff0c\u51cf\u5c11\u7684\u4f4d\u88ab\u820d\u53bb\uff1b\u7b49\u4ef7\u4e8e\u5730\u677f\u9664\u4ee52\u7684b\u6b21\u65b9 22&gt;&gt;3 =2"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_18","title":"\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u51fd\u6570","text":"<p>\u7c7b\u578b\u8f6c\u6362\u975e\u5e38\u7075\u6d3b\uff0c\u4e0a\u6587\u63d0\u5230\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u51e0\u4e4e\u90fd\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u590d\u6570\u7b49\u3002</p> <p>\u8fd9\u4e9b\u8f6c\u6362\u975e\u5e38\u91cd\u8981\uff0c\u8f93\u5165\u6570\u5b57\u9700\u8981\u4f9d\u8d56\u8fd9\u4e9b\u8f6c\u6362\u7528\u7684\u51fd\u6570\u3002</p> \u8fd0\u7b97 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u6574\u6570\u8f6c\u6362 int(a) \u6d6e\u70b9\u6570\u8f6c\u6362\u6210\u5c0f\u6570\u65f6\u662f\u5411\u96f6\u53d6\u6574 int(-2.5) =-2 \u6d6e\u70b9\u6570\u8f6c\u6362 float(a) float(-1) =-1.0 \u590d\u6570\u8f6c\u6362 complex(re,im) \u6216 complex(string) re\u662f\u5b9e\u90e8\u3001im\u662f\u865a\u90e8\uff1b\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528a+bj\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u590d\u6570 complex(1,2)complex(\"1+2j\") \u5b57\u7b26\u4e32\u8f6c\u6362 str(a) str(12345) =\"12345\" \u5e03\u5c14\u503c\u8f6c\u6362 bool(a) \u5bf9\u6574\u6570\u6765\u8bf4\uff0c\u53ea\u8981\u4e0d\u662f0\uff0c\u5c31\u8fd4\u56deTrue\uff1b\u5bf9\u5b57\u7b26\u4e32\u6765\u8bf4\uff0c\u53ea\u8981\u975e\u7a7a\uff0c\u5c31\u8fd4\u56deTrue\uff1b\u5176\u4ed6\u7c7b\u578b\u4e5f\u53ef\u7c7b\u63a8 bool(-1) =Truebool(0)=False"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_19","title":"\u57fa\u672c\u51fd\u6570\u8fd0\u7b97","text":"<p>\u4e0b\u9762\u7684\u8fd0\u7b97\u7406\u8bba\u4e0a\u5c5e\u4e8e\u4ee3\u6570\u8fd0\u7b97\uff0c\u4f46\u4f7f\u7528\u65f6\u5f62\u5982\u8c03\u7528\u51fd\u6570\uff08\u4e8b\u5b9e\u4e0a\u4ed6\u4eec\u672c\u8d28\u4e0a\u5c31\u662f\u51fd\u6570\uff09\uff0c\u56e0\u6b64\u5355\u72ec\u5217\u51fa\u3002</p> \u8fd0\u7b97 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u4e58\u65b9 pow(a,b) \u6216 a**b \uff08\u4e0a\u6587\u5df2\u6709\u8be6\u7ec6\u8bf4\u660e\uff09 \u7edd\u5bf9\u503c abs(a) abs(-3) =3 \u5e26\u4f59\u9664\u6cd5 divmod(a,b) \u8fd4\u56de\u4e8c\u5143\u7ec4(a//b, a%b) div(4,3) =(1,1)"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_20","title":"\u8fd0\u7b97\u4f18\u5148\u7ea7","text":"<p>\u53c2\u89c1\uff1a</p> <p>https://docs.python.org/zh-cn/3/reference/expressions.html#operator-precedence</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_21","title":"\u6ce8\u91ca","text":"<p>\u7528#\u5f00\u5934\u7684\u4e00\u884c\u4ee3\u7801\u8868\u793a\u6ce8\u91ca\u3002\u4e5f\u53ef\u4ee5\u7528\u5355\u72ec\u7684\u591a\u884c\u5b57\u7b26\u4e32\u8868\u793a\u6ce8\u91ca\u3002</p> <pre><code># note\n\n\"\"\"\n other note\n\"\"\"\n</code></pre> <p>\u591a\u884c\u6ce8\u91ca\u4f1a\u5728\u540e\u6587\u7684\u51fd\u6570\u4e2d\u7528\u5230\uff0c\u8d77\u5230\u7c7b\u4f3c\u4e8e\u51fd\u6570\u4f5c\u7528\u6587\u6863\u7684\u4f5c\u7528\u3002</p> <p>\u5355\u884c\u6ce8\u91ca\u6709\u65f6\u4e5f\u6709\u53e6\u4e00\u4e2a\u4f5c\u7528\u3002\u5982\u679c\u4f60\u5728\u4f60\u7684py\u6587\u4ef6\u5f00\u5934\u52a0\u4e0a\u8fd9\u4e48\u4e00\u53e5\u6ce8\u91ca\uff1a</p> <pre><code># coding: utf-8\n</code></pre> <p>\u90a3\u4e48\u6574\u4e2a\u6587\u4ef6\u5c06\u4f1a\u88ab\u7f16\u7801\u4e3autf-8\u540e\u6267\u884c\u3002</p> <p>\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u5f88\u4e0d\u81ea\u7136\uff0c\u56e0\u4e3a\u4e00\u822c\u5370\u8c61\u4e2d\u6ce8\u91ca\u9664\u4e86\u7ed9\u4eba\u770b\u4ee5\u5916\u5c31\u6ca1\u4ec0\u4e48\u522b\u7684\u7528\u5904\u4e86\uff0c\u4f46\u5728\u8fd9\u91cc\u5b83\u786e\u5b9e\u5f71\u54cd\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\uff08\u4f60\u53ef\u4ee5\u628a\u4e0a\u9762\u7684utf-8\u6362\u6210\u522b\u7684\u968f\u4fbf\u4ec0\u4e48\u4e1c\u897f\uff0c\u7136\u540e\u8fd0\u884c\u7684\u65f6\u5019\u4f1a\u62a5\u9519\uff09\u3002\u4e8b\u5b9e\u4e0a\u5b98\u65b9\u6587\u6863\u628a\u8fd9\u79cd\u64cd\u4f5c\u53eb\u505aEncoding declarations\uff0c\u5b83\u662f\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u524d\u4e24\u884c\u6ce8\u91ca\u5b9e\u73b0\u7684\uff0c\u4f5c\u7528\u5c31\u662f\u6211\u4eec\u63d0\u5230\u7684\u6539\u53d8\u7f16\u7801\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u79cd\u7279\u6b8a\u7684\u5199\u6cd5\u53ea\u5bf9\u5f00\u5934\u524d\u4e24\u884c\u6ce8\u91ca\u6709\u7528\u3002</p> <p>\u6709\u6ca1\u6709\u522b\u7684\u7c7b\u4f3c\u5199\u6cd5\u53ef\u4ee5\u4f7f\u5f97\u6ce8\u91ca\u6539\u53d8\u8fd0\u884c\u7684\u884c\u4e3a\u5462\uff1f\u636e\u6211\u6240\u77e5\u4e5f\u5c31\u53ea\u6709\u8fd9\u4e00\u4e2a\u4e86\uff0c\u81f3\u4e8e\u522b\u7684\u6709\u6ca1\u6709\u2026\u2026\u6211\u4e5f\u4e0d\u77e5\u9053\uff08\u9003\uff09</p> <p>\u53e6\u5916\u6211\u7684\u5199\u6cd5\u5e76\u4e0d\u662f\u5b98\u65b9\u63a8\u8350\u7684\u5199\u6cd5\uff0c\u5982\u679c\u771f\u7684\u8981\u7528\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff08\u4e0a\u6587\u7684\u94fe\u63a5\u5df2\u7ecf\u7ed9\u51fa\uff09\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_22","title":"\u63a7\u5236\u53f0\u4e0a\u7684\u8f93\u5165\u548c\u8f93\u51fa","text":"<p>\u5728\u63a7\u5236\u53f0\u8f93\u5165\u8f93\u51fa\uff0c\u4e3b\u8981\u4f9d\u9760input\u548cprint\u4e24\u4e2a\u51fd\u6570\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#print","title":"print","text":"<p>\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u7c7b\u578b\uff1bprint\u51fd\u6570\u4f1a\u628a\u4ed6\u4eec\u81ea\u52a8\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\u540e\u8f93\u51fa\uff1b</p> <p>\u4e5f\u53ef\u4ee5\u7528\u9017\u53f7\u5206\u9694\u6765\u540c\u65f6\u8f93\u51fa\u591a\u4e2a\u5185\u5bb9\uff0c\u4ed6\u4eec\u4e4b\u95f4\u4f1a\u7528\u7a7a\u683c\u5206\u9694\u3002</p> <p>print\u9ed8\u8ba4\u4ee5\u4e00\u4e2a\u6362\u884c\u7b26(\\n)\u7ed3\u5c3e\uff0c\u53ef\u4ee5\u6539\u53d8print\u51fd\u6570\u7684end\u5173\u952e\u5b57\u53c2\u6570\u4e3a\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u6539\u53d8\u7ed3\u5c3e\uff0c\u4f8b\u5982\u5c06\u5b83\u6539\u6210\u4e00\u4e2a\u7a7a\u4e32end=''\uff0c\u5c31\u53ef\u4ee5\u8ba9\u5b83\u4e0d\u6362\u884c\u3002</p> <pre><code>a=b=15\nprint(a,b,\"Yes\")\nprint(a,end='')\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#input","title":"input","text":"<p>\u8c03\u7528\u6b64\u51fd\u6570\u540e\uff0c\u5c06\u4f1a\u5728\u63a7\u5236\u53f0\u8bfb\u5165\u4e00\u884c\u952e\u76d8\u8f93\u5165\uff08\u4e0d\u5305\u62ec\u6362\u884c\u7b26\u53f7\uff09\uff0c\u5e76\u8fd4\u56de\u5b57\u7b26\u4e32\u3002</p> <p>\u4e5f\u53ef\u4ee5\u7ed9input\u4f20\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u6837\u5728\u8bfb\u5165\u524d\u4f1a\u5148\u8f93\u51fa\u4e00\u884c\u5b57\u7b26\u4e32\u63d0\u793a\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\u3002\uff08\u5927\u591a\u6570\u65f6\u5019\u8fd9\u4e2a\u529f\u80fd\u6bd4\u8f83\u9e21\u808b\u7528\u4e0d\u4e0a\uff09</p> <pre><code>a=input('123\\n')\n</code></pre> <p>\u8981\u60f3\u8f93\u5165\u6574\u6570\u3001\u6d6e\u70b9\u6570\uff0c\u9700\u8981\u7528\u4e0a\u6587\u63d0\u5230\u7684\u7c7b\u578b\u8f6c\u6362\u51fd\u6570\uff0c\u4ee5\u6574\u6570\u4e3a\u4f8b</p> <pre><code>a=int(input())\n</code></pre> <p>\u5f53\u7136\u8fd9\u6837\u6bcf\u6b21\u6bcf\u884c\u53ea\u80fd\u8f93\u5165\u4e00\u4e2a\u6570\u3002\u5982\u679c\u4f60\u5e0c\u671b\u6bcf\u884c\u8f93\u5165\u82e5\u5e72\u4e2a\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u6570\uff08\u4f8b\u5982\u4e09\u4e2a\uff09\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a</p> <pre><code>a,b,c=map(int,input().split())\n</code></pre> <p>input().split()\u5c06\u4f1a\u628a\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u6309\u7167\u7a7a\u683c\u5206\u9694\u6210\u82e5\u5e72\u5b57\u7b26\u4e32\uff0c\u6700\u540e\u6309\u987a\u5e8f\u585e\u8fdb\u4e00\u4e2a\u5217\u8868\u4e2d\u5e76\u8fd4\u56de\u6539\u5217\u8868\u3002map\u53ef\u4ee5\u4ee5\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570(\u7b2c\u4e00\u4e2a\u53c2\u6570)\uff0c\u5c06\u4e00\u4e2a\u5217\u8868\uff08\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff09\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8f93\u5165\u5230\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u8fd4\u56de\u6620\u5c04\u540e\u7684\u7ed3\u679c\uff0c\u6700\u540e\u518d\u901a\u8fc7\u89e3\u5305\u8bed\u6cd5\u9010\u4e2a\u8d4b\u503c\u5230a\u3001b\u3001c\u4e09\u4e2a\u53d8\u91cf\u4e2d\u3002\u5173\u4e8e\u6d89\u53ca\u5230\u7684\u5217\u8868\u3001\u5b57\u7b26\u4e32\u65b9\u6cd5\u7b49\u4e4b\u540e\u4f1a\u8be6\u7ec6\u8bf4\u660e\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u8bfb\u5165\u6570\u91cf\u4e0d\u5b9a\u7684\u6574\u6570\u5e8f\u5217\uff08\u5e76\u5f97\u5230\u4e00\u4e2a\u5217\u8868\uff09\uff0c\u6709\u4e24\u79cd\u5199\u6cd5\uff1a</p> <pre><code>L1=list(map(int,input().split()))\nL2=[int(x) for x in input().split()]\n</code></pre> <p>\u7b2c\u4e00\u79cd\u505a\u6cd5\u662f\u901a\u8fc7\u5c06map\u5bf9\u8c61\u901a\u8fc7list\u7c7b\u578b\u8f6c\u6362\u51fd\u6570\u8f6c\u6362\u6210\u5217\u8868\u540e\u5b9e\u73b0\u7684\uff08\u6ce8\u610fmap\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u4e0d\u76f4\u63a5\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u662f\u4e00\u4e2amap\u5bf9\u8c61\uff09\u3002\u7b2c\u4e8c\u79cd\u505a\u6cd5\u7528\u5230\u4e86\u5217\u8868\u751f\u6210\u5f0f\u7684\u7279\u6027\uff0c\u4e4b\u540e\u4f1a\u8be6\u7ec6\u8bf4\u660e\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_23","title":"\u6742\u9879","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#pass","title":"pass","text":"<p>\u4f7f\u7528pass\u53ef\u4ee5\u5728\u672c\u5e94\u8f93\u5165\u4ee3\u7801\u7684\u5730\u65b9\u5360\u4f4d\uff0c\u5176\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u3002\u4f8b\u5982\u4f60\u53ef\u4ee5\u8fd9\u4e48\u5b9a\u4e49\u201c\u7a7a\u51fd\u6570\u201d\uff1a</p> <pre><code>def Func():\n    pass\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_24","title":"\u5206\u53f7","text":"<p>\u4f7f\u7528\u5206\u53f7\u53ef\u4ee5\u201c\u538b\u884c\u201d\u2014\u2014\u5c06\u672c\u6765\u9700\u8981\u5199\u6210\u591a\u884c\u7684\u4ee3\u7801\u5199\u5728\u4e00\u884c</p> <pre><code>a=1;b=2;c=3;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_25","title":"\u53cd\u659c\u6760\u7eed\u884c\u7b26","text":"<p>\u4f7f\u7528\u53cd\u659c\u6760\u53ef\u4ee5\u5c06\u4e00\u884c\u62c6\u6210\u82e5\u5e72\u884c\uff0c\u4f46\u8981\u6ce8\u610f\u53cd\u659c\u6760\u540e\u9762\u4e0d\u80fd\u6709\u522b\u7684\u4e1c\u897f\u3002</p> <pre><code>print(input().split(\\\n))\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_26","title":"\u5e38\u7528\u6570\u636e\u7ed3\u6784\u7b80\u4ecb","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_27","title":"\u53ef\u53d8\u5bf9\u8c61\u3001\u4e0d\u53ef\u53d8\u5bf9\u8c61","text":"<p>\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff1a\u5bf9\u8c61\u4e00\u65e6\u521b\u5efa\uff0c\u5bf9\u8c61\u4e2d\u5185\u5bb9\u5c31\u4e0d\u53ef\u518d\u6539\u53d8\uff0c\u53ea\u80fd\u7528\u8fd9\u4e2a\u5bf9\u8c61\u53bb\u521b\u5efa\u53e6\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u3002\u5982\u6574\u6570\u3001\u5b57\u7b26\u4e32\u7b49\u3002</p> <p>\u53ef\u53d8\u5bf9\u8c61\uff1a\u5bf9\u8c61\u4e2d\u7684\u5185\u5bb9\u5728\u521b\u5efa\u540e\u4ecd\u7136\u662f\u53ef\u53d8\u7684\u3002\u5982\u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6574\u6570\u7684\u8fd0\u7b97\u5176\u5b9e\u662f\u5728\u7b97\u5b8c\u4e4b\u540e\u65b0\u5efa\u4e86\u4e00\u4e2a\u6574\u6570\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5728\u539f\u6709\u5bf9\u8c61\u57fa\u7840\u4e0a\u4fee\u6539\u503c\u3002\u5b57\u7b26\u4e32\u7b49\u4e5f\u540c\u7406\uff0c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\u7b49\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u65b0\u751f\u6210\u4e86\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002\u800c\u5bf9\u4e8e\u53ef\u53d8\u5bf9\u8c61\u800c\u8a00\u5c31\u672a\u5fc5\u4e86\uff0c\u53ef\u80fd\u6709\u4e9b\u65b9\u6cd5\u662f\u6539\u53d8\u539f\u6765\u5bf9\u8c61\u7684\uff0c\u53ef\u80fd\u6709\u4e9b\u662f\u8fd4\u56de\u65b0\u5bf9\u8c61\u7684\u3002</p> <p>\u8981\u60f3\u770b\u4e24\u4e2a\u53d8\u91cf\u6240\u6307\u5411\u7684\u5bf9\u8c61\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528id\u51fd\u6570\u67e5\u770b\u5bf9\u8c61\u7684\u5730\u5740\u3002\u53ea\u6709\u5730\u5740\u5b8c\u5168\u76f8\u540c\uff0c\u4e24\u4e2a\u5bf9\u8c61\u624d\u76f8\u540c\uff0c\u8fd9\u70b9\u5df2\u5728\u4e4b\u524d\u5bf9is\u7684\u8bf4\u660e\u4e2d\u63d0\u5230\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_28","title":"\u5217\u8868","text":"<p>\u5217\u8868\u7c7b\u4f3c\u4e8eC\u4e2d\u7684vector\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u5b83\u66f4\u63a5\u8fd1\u5e7f\u4e49\u8868\u3002</p> <ul> <li>\u5217\u8868\u662f\u53ef\u53d8\u7684\uff1a\u8868\u53ef\u4ee5\u81ea\u7531\u5730\u589e\u52a0\u3001\u5220\u9664\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u6539\u53d8\u5217\u8868\u4e2d\u67d0\u4e2a\u7279\u5b9a\u4f4d\u7f6e\u5143\u7d20\u7684\u503c\uff0c\u957f\u5ea6\u4e0d\u5b9a\u3002</li> <li>\u8868\u4e2d\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u4f55\u5bf9\u8c61\uff08\u6bd4\u5982\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u53e6\u4e00\u4e2a\u5217\u8868\u7b49\u7b49\uff09\uff0c\u8868\u4e2d\u5143\u7d20\u751a\u81f3\u53ef\u4ee5\u662f\u81ea\u5df1\u3002</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_29","title":"\u65b0\u5efa\u5217\u8868","text":"<pre><code>a=[] #\u7a7a\u5217\u8868\nb=[1,2,3,[4,5,6]] #\u6709\u521d\u59cb\u503c\u7684\u5217\u8868\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u53e6\u4e00\u4e2a\u5217\u8868\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5217\u8868\u662f\u5d4c\u5957\u7684\nc=list(\"abc\") #\u4f7f\u7528\u5176\u4ed6\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6784\u9020\u65b0\u5217\u8868\n</code></pre> <p>list\u51fd\u6570\u662f\u6784\u9020\u4e00\u4e2a\u65b0\u5217\u8868\u7528\u7684\u51fd\u6570\u3002\u5982\u679c\u4e0d\u4f20\u5165\u53c2\u6570\u90a3\u4e48\u5c06\u4f1a\u8fd4\u56de\u7a7a\u5217\u8868\uff08\u56e0\u6b64<code>a=list()</code>\u548c<code>a=[]</code>\u6548\u679c\u4e00\u6837\uff09\uff0c\u5982\u679c\u4f20\u5165\u4e86\u53e6\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u4e4b\u540e\u4f1a\u63d0\u5230\uff09\uff0c\u90a3\u4e48\u5b83\u4f1a\u4ee5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002</p> <p>\u5173\u4e8e\u5217\u8868\u7684\u8be6\u7ec6\u65b9\u6cd5\u53c2\u89c1\u4e4b\u540e\u7684\u201c\u5e38\u7528\u6570\u636e\u7ed3\u6784\u65b9\u6cd5\u4e0e\u76f8\u5173\u5e38\u7528\u51fd\u6570\u201d\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_30","title":"\u5143\u7ec4","text":"<p>\u4e0e\u5217\u8868\u7c7b\u4f3c\uff0c\u4f46\u662f\uff0c\u5b83\u7684\u5143\u7d20\u5728\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u540e\u5c31\u4e0d\u518d\u53ef\u6539\u53d8\u3002</p> <ul> <li>\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\uff1a\u4e0d\u80fd\u5220\u9664\u6216\u8005\u6dfb\u52a0\u5143\u7d20\u3002</li> <li>\u8868\u4e2d\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u4f55\u5bf9\u8c61\u3002</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_31","title":"\u65b0\u5efa\u5143\u7ec4","text":"<pre><code>a=() #\u7a7a\u5143\u7ec4\nb=(4,2,3,[5,7],(6,1)) #\u5e26\u6709\u82e5\u5e72\u521d\u59cb\u5143\u7d20\u7684\u5143\u7ec4\nc=4,2,3, #\u5728\u6ca1\u6709\u6b67\u4e49\u7684\u60c5\u51b5\u4e0b\uff0c\u7b49\u53f7\u53f3\u503c\u7701\u7565\u62ec\u53f7\u4e5f\u76f8\u5f53\u4e8e\u5143\u7ec4\nd=tuple([1,2,3]) #d==(1,2,3)\n</code></pre> <p>tuple\u540c\u6837\u662f\u7528\u4e8e\u6784\u9020\u4e00\u4e2a\u65b0\u5143\u7ec4\u7528\u7684\u51fd\u6570\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_32","title":"\u5217\u8868\u548c\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u95ee\u9898","text":"<p>\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u201c\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\u201d\u6307\u7684\u662f\u5143\u7ec4\u4e2d\u6240\u5305\u542b\u7684\u201c\u5185\u5bb9\u201d\u4e0d\u80fd\u518d\u66f4\u6539\u4e86\u3002\u4f46\u201c\u5185\u5bb9\u201d\u6307\u7684\u7a76\u7adf\u662f\u4ec0\u4e48\u5462\uff1f</p> <p>\u4e4b\u524d\u7684\u6587\u7ae0\u63d0\u5230\u4e86\u5728python\u4e2d\u53d8\u91cf\u7684\u672c\u8d28\u5b9e\u9645\u4e0a\u662f\u6307\u5411\u5bf9\u8c61\u7684\u201d\u6307\u9488\u201c\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u662f\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u53bb\u6539\u53d8\u4e86\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61\uff0c\u90a3\u4e48\u6240\u6709\u6307\u5411\u8fd9\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\uff08\u4e5f\u5373\u53d8\u91cf\uff09\u6240\u6307\u5411\u7684\u5185\u5bb9\u81ea\u7136\u4e5f\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u4f8b\u5982\uff1a</p> <pre><code>a=b=[1,2,3]\na.append(4) #\u5728\u5217\u8868\u672b\u5c3e\u63d2\u5165\u65b0\u5143\u7d20\nprint(a,b) #[1, 2, 3, 4] [1, 2, 3, 4]\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u7531\u4e8ea\u548cb\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u56e0\u6b64\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u64cd\u4f5c\u4f1a\u5f71\u54cd\u5230\u6240\u6709\u6307\u5411\u8fd9\u4e2a\u5bf9\u8c61\u7684\u53d8\u91cf\u3002</p> <p>\u518d\u770b\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\u7684\u4f8b\u5b50\uff0c\u8fd9\u4e2a\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u53e6\u4e00\u4e2a\u5217\u8868\uff0c\u6211\u4eec\u8bd5\u56fe\u5bf9\u6700\u540e\u8fd9\u4e2a\u5217\u8868\u63d2\u5165\u5143\u7d20\uff1a</p> <pre><code>b=[1,2,3,[4,5,6]]\na=b[3] #\u53d6\u5f97\u6307\u5411[4,5,6]\u7684\u53d8\u91cf\uff08\u6307\u9488\uff09\na.append(4)\nprint(b) #[1,2,3,[4,5,6,4]]\n</code></pre> <p>\u7701\u7565\u6389a\u53d8\u91cf\u4f9d\u7136\u80fd\u591f\u6210\u529f\uff1a</p> <pre><code>b=[1,2,3,[4,5,6]]\nb[3].append(4)\nprint(b) #[1,2,3,[4,5,6,4]]\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230b\u4e2d\u663e\u793a\u7684\u5185\u5bb9\u4e5f\u53d1\u751f\u4e86\u6539\u53d8\u3002\u8fd9\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5217\u8868\u4e2d\u7684\u53e6\u4e00\u4e2a\u5217\u8868\uff0c\u5b9e\u9645\u4e0a\u5b58\u7684\u4e5f\u662f\u6307\u5411\u8fd9\u4e2a\u53e6\u4e00\u4e2a\u5217\u8868\u7684\u6307\u9488\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u5f15\u7528\uff0c\u771f\u6b63\u7684\u8fd9\u4e2a\u53e6\u4e00\u4e2a\u5217\u8868\u5176\u5b9e\u5728\u53e6\u4e00\u4e2a\u5730\u65b9\u5b58\u7740\u3002\u53ea\u662f\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u4e00\u4e2a\u660e\u663e\u7684\u53d8\u91cf\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u201d\u5f15\u7528\u201c\u3002</p> <p>\u5982\u679c\u628a\u4e0a\u4f8b\u4e2d\u7684b\u6539\u6210\u5143\u7ec4\u800c\u522b\u7684\u4e0d\u53d8\uff0c\u90a3\u4e48\u53bb\u6539\u53d8\u5217\u8868\u5c31\u4f1a\u5bfc\u81f4b\u6307\u5411\u7684\u5143\u7ec4\u201c\u770b\u4e0a\u53bb\u53d8\u4e86\u201d\uff0c\u4f46\u5b9e\u9645\u4e0a\u5143\u7ec4\u4e2d\u5b58\u7684\u662f\u6307\u5411\u5404\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u5143\u7ec4\u786e\u5b9e\u6ca1\u6709\u6539\u53d8\u3002</p> <pre><code>b=(1,2,3,[4,5,6])\nb[3].append(4)\nprint(b) #(1,2,3,[4,5,6,4])\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_33","title":"\u96c6\u5408","text":"<p>\u7c7b\u4f3c\u6570\u5b66\u4e0a\u7684\u96c6\u5408\uff0c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u552f\u4e00\u7684\u3002\u63d2\u5165\u96c6\u5408\u4e2d\u5df2\u6709\u7684\u5143\u7d20\u540e\uff0c\u96c6\u5408\u4f1a\u81ea\u52a8\u5408\u5e76\u91cd\u590d\u7684\u5143\u7d20\u3002</p> <ul> <li> <p>\u96c6\u5408\u662f\u53ef\u53d8\u7684\u3002</p> </li> <li> <p>Python\u4e2d\u7684\u96c6\u5408\u5e95\u5c42\u662f\u7528\u54c8\u5e0c\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u63d2\u5165\u6216\u521d\u59cb\u5316\u96c6\u5408\u7684\u5bf9\u8c61\u5fc5\u987b\u8981\u662f\u53ef\u54c8\u5e0c\u7684\uff08hashable\uff09\u3002\u6570\u3001\u5b57\u7b26\u4e32\u3001\u4e0d\u5305\u542b\u53ef\u53d8\u5bf9\u8c61\u7684\u5143\u7ec4\u90fd\u662f\u53ef\u54c8\u5e0c\u7684\uff0c\u4f46\u53ef\u53d8\u5bf9\u8c61\uff08\u5982\u5217\u8868\uff09\u5c31\u4e0d\u662f\u3002</p> </li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_34","title":"\u65b0\u5efa\u96c6\u5408","text":"<pre><code>s=set()\ns=set([1,2,5,8,0]) #\u6709\u521d\u503c\u7684\u521d\u59cb\u5316\uff1a{0,1,2,5,8}\n</code></pre> <p>\u867d\u7136\u96c6\u5408\u5f62\u5982{}\uff0c\u4f46\u662f\u4e0d\u80fd\u7528{}\u65b0\u5efa\u4e00\u4e2a\u7a7a\u96c6\u5408\uff0c\u56e0\u4e3a\u8fd9\u4e48\u5199\u5176\u5b9e\u662f\u5728\u65b0\u5efa\u4e00\u4e2a\u7a7a\u5b57\u5178\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_35","title":"\u5b57\u5178","text":"<p>\u5982\u679c\u4f60\u63a5\u89e6\u8fc7json\u6216\u8005C++\u7684map\u7684\u8bdd\u4f60\u5e94\u8be5\u5bf9\u5b57\u5178\u5f88\u719f\u6089\u3002\u5b57\u5178\u4fdd\u5b58\u4e86\u4e00\u7cfb\u5217\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u5e76\u53ef\u628a\u952e\u7528\u7c7b\u4f3c\u4e8e\u7d22\u5f15\u7684\u65b9\u5f0f\u53d6\u5f97\u503c\u3002</p> <ul> <li>\u5b57\u5178\u662f\u53ef\u53d8\u7684\u3002</li> <li>\u952e\u5fc5\u987b\u8981\u662f\u53ef\u54c8\u5e0c\u7684\uff0c\u548c\u96c6\u5408\u7c7b\u4f3c\u3002\u5b57\u5178\u5e95\u5c42\u4e5f\u662f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0\u7684\u3002</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_36","title":"\u65b0\u5efa\u5b57\u5178","text":"<pre><code>s={} #\u7a7a\u5b57\u5178\ns=dict() #\u7a7a\u5b57\u5178\ns={1:2,\"3\":4,(5):[6,7,8]} #\u5e26\u6709\u6574\u6570\u3001\u5b57\u7b26\u4e32\u548c\u5143\u7ec4\u4f5c\u4e3a\u952e\u7684\u5b57\u5178\ns[1]\ns[\"3\"] #\u6309\u7167\u7d22\u5f15\u53d6\u5f97\u503c\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_37","title":"\u5b57\u7b26\u4e32","text":"<p>\u5b57\u7b26\u4e32\u4e4b\u524d\u5df2\u7ecf\u63d0\u5230\u8fc7\uff0c\u8fd9\u91cc</p> <ul> <li>\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_38","title":"\u524d\u7f00","text":"Prefix r R \u539f\u751f\u5b57\u7b26\u4e32\uff0c\u4e0d\u4f1a\u8f6c\u4e49 f F \u683c\u5f0f\u5b57\u7b26\u4e32\uff08\u53c2\u89c1\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e00\u8282\uff09 u U \u9ed8\u8ba4\u7684\u524d\u7f00\uff0c\u8868\u793a\u4ee5Unicode\u65b9\u5f0f\u4fdd\u5b58\u5b57\u7b26\u4e32 b B \u751f\u6210bytes\u7c7b\u578b\uff0c\u5176\u4e2d\u53ea\u5141\u8bb8\u4f7f\u7528ascii\u5b57\u7b26\uff0c\u8d85\u51fa127\u7684\u5b57\u7b26\u9700\u8981\u8f6c\u4e49\u3002\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u7684\u5927\u5c0f\u88ab\u9650\u5236\u4e3a <code>0 &lt;= x &lt; 256</code> (\u5982\u679c\u8fdd\u53cd\u6b64\u9650\u5236\u5c06\u5f15\u53d1 <code>ValueError</code>)"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#iterableiterator","title":"\u53ef\u8fed\u4ee3\u5bf9\u8c61(Iterable)\u3001\u8fed\u4ee3\u5668\uff08Iterator\uff09","text":"<p>\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1a\u53ef\u88abfor\u5faa\u73af\uff08\u4e4b\u540e\u4f1a\u63d0\u5230\uff09\u8fed\u4ee3\u7684\u5bf9\u8c61\u7edf\u79f0\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u5217\u8868\u3001\u5b57\u5178\u3001\u5143\u7ec4\u3001\u96c6\u5408\u3001\u5b57\u7b26\u4e32\u7b49\u90fd\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002</p> <p>\u8fed\u4ee3\u5668\uff1a</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_39","title":"\u6d45\u62f7\u8d1d\u3001\u6df1\u62f7\u8d1d","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_40","title":"\u5e38\u7528\u6570\u636e\u7ed3\u6784\u65b9\u6cd5\u4e0e\u76f8\u5173\u5e38\u7528\u51fd\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_41","title":"\u5171\u901a\u64cd\u4f5c\u4e0e\u65b9\u6cd5","text":"<p>\u5e8f\u5217\u7c7b\u578b\uff1a\u5217\u8868\u3001\u5143\u7ec4\u3001range\u3001\u5b57\u7b26\u4e32\u7b49</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_42","title":"\u901a\u7528\u64cd\u4f5c","text":"<p>\u51e0\u4e4e\u6240\u6709\u5bf9\u8c61\u90fd\u80fd\u7528\uff0c\u5305\u62ec\u5217\u8868\u548c\u5143\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408\u3001\u5b57\u7b26\u4e32\u7b49</p> \u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u6210\u5458\u68c0\u6d4b\u8fd0\u7b97 a in b \u6216 a not in b \u89c1\u4e0a\u6587\u57fa\u672c\u8fd0\u7b97\u4e00\u8282\uff1b\u7279\u522b\u5730\uff0c\u5bf9\u5b57\u5178\u6765\u8bf4a\u662fb\u7684\u952e\u65f6\u8fd4\u56deTrue \u53d6\u5f97\u957f\u5ea6 len(a) \u53d6\u5f97a\u5bf9\u8c61\u7684\u957f\u5ea6\uff08\u5143\u7d20\u4e2a\u6570\uff09 \u6700\u5c0f\u503c min(a) a\u4e2d\u5143\u7d20\u6700\u5c0f\u503c \u6700\u5927\u503c max(a) a\u4e2d\u5143\u7d20\u6700\u5927\u503c"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_43","title":"\u5e8f\u5217\u901a\u7528\u64cd\u4f5c","text":"<p>\u9664\u975e\u6709\u7279\u6b8a\u8bf4\u660e\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u53ef\u7528\u4e8e\u5143\u7ec4\u3001\u5217\u8868\u3001\u5b57\u7b26\u4e32\u3002</p> \u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u4e32\u63a5 a+b \u9996\u5c3e\u76f8\u63a5\uff0c\u8fd4\u56de\u65b0\u5bf9\u8c61 [1,2]+[3,4] =[1,2,3,4] \u91cd\u590d s*n (n\u662f\u6574\u6570) \u91cd\u590dn\u6b21\u81ea\u5df1\u5bf9\u81ea\u5df1\u7684\u4e32\u63a5\uff0c\u8fd4\u56de\u65b0\u5bf9\u8c61\uff1b\u91cd\u590d\u7684\u5143\u7d20\u5c06\u4f1a\u5f15\u7528\u88ab\u590d\u5236\u7684\u5bf9\u8c61 \"ab\"*3=\"ababab\" \u7d22\u5f15 s[i] \u53d6s\u4e2d\u7b2ci\u4e2a\uff08\u81ea0\u5f00\u59cb\u8ba1\u6570\uff09\u5143\u7d20\uff0c\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff08\u76f8\u5f53\u4e8e\u4e0b\u6807\u53d8\u4e3an-i\uff09\uff1b\u8d8a\u754c\u8bbf\u95ee\u4f1a\u629b\u51faIndexError\u5f02\u5e38 \"ab\"[1] =\"b\" \u5207\u7247 s[i:j] \u53d6s\u4e2d\u7b2ci\u5230j\u4e2a\uff08\u4e0d\u5305\u62ec\u7b2cj\u4e2a\uff09\u5143\u7d20\uff0c\u6b65\u957f\u4e3a1\uff1b\u8d85\u51fa\u8303\u56f4\u7684i\u3001j\u4f1a\u88ab\u81ea\u52a8\u89c4\u7ea6\u52300\u6216len(s)\uff1b\u82e5i\u3001j\u7f3a\u7701\u4f1a\u81ea\u52a8\u8bbe\u5b9a\u62100\u548clen(s) \u201cabcd\u201d[2:4]=\"cd\" s[i:j:k] \u7531\u6ee1\u8db3x=i+nk\u7684\u6240\u6709s[x]\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u5176\u4e2dn\u662f\u6240\u6709\u6ee1\u8db30&lt;=n&lt;(j-i)/k\u7684\u6574\u6570\uff1b\u8d85\u51fa\u8303\u56f4\u7684i\u3001j\u4f1a\u88ab\u81ea\u52a8\u89c4\u7ea6\uff1b\u7f3a\u7701\u7684i\u3001j\u4f1a\u88ab\u81ea\u52a8\u8bbe\u5b9a\u6210\u5f00\u59cb\u6216\u7ed3\u675f\u4f4d\u7f6e\uff08\u53d6\u51b3\u4e8ek\u7684\u6b63\u8d1f\uff09 \"abcd\"[1:4:2]=\"bd\"\"abcd\"[::-1]=\"dcba\" \u67e5\u627e\u7d22\u5f15 a.index(x) \u5728a\u4e2d\u627e\u5230\u7b2c\u4e00\u6b21\u51fa\u73b0x\u7684\u4e0b\u6807\uff1b\u627e\u4e0d\u5230\u4f1a\u629b\u51faValueError\u5f02\u5e38 [2,3,5,4].index(3) =1 a.index(x,i,j) \u7b49\u4ef7\u4e8e\u5728a[i:j]\u4e2d\u627e\u7b2c\u4e00\u6b21\u51fa\u73b0x\u7684\u5bf9\u5e94\u7684a\u7684\u4e0b\u6807 [2,3,5,4].index(3,1,2) =1 \u8ba1\u6570 a.count(x) \u8fd4\u56dex\u5728a\u4e2d\u51fa\u73b0\u6b21\u6570 [1,1,2,3,5].count(1)=2 <ul> <li>\u91cd\u590d\u3001\u5207\u7247\u7b49\u64cd\u4f5c\u662f\u6d45\u62f7\u8d1d</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_44","title":"\u53ef\u53d8\u5e8f\u5217\u901a\u7528\u64cd\u4f5c","text":"<p>\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u4e3b\u8981\u662f\u5217\u8868\u4f1a\u7528\u5230\u8fd9\u4e9b\u72ec\u6709\u7684\u64cd\u4f5c\u3002\u5176\u4e2d\u6709\u4e9b\u64cd\u4f5c\u5176\u4ed6\u53ef\u53d8\u7c7b\u578b\uff08\u4f46\u4e0d\u662f\u53ef\u53d8\u5e8f\u5217\u7c7b\u578b\uff09\u4e5f\u53ef\u4f7f\u7528\u3002</p> \u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u8d4b\u503c a[i]=xa[i:j]=xa[i:j:k]=x \u5220\u9664 del a[i]del a[i:j]del a[i:j:k] del\u64cd\u4f5c\u8fd8\u53ef\u4ee5\u7528\u5728\u5355\u72ec\u7684\u5bf9\u8c61\u4e0a\uff1b\u5b57\u5178\u53ef\u7528\u5de6\u683c\u5f53\u4e2d\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c \u5c3e\u90e8\u63d2\u5165 a.append(x) \u5728\u672b\u5c3e\u63d2\u5165\u65b0\u5143\u7d20 \u6e05\u7a7a a.clear() \u5b57\u5178\u3001\u96c6\u5408\u4e5f\u53ef\u7528 \u6d45\u62f7\u8d1d a.copy() \u5c31\u7ed3\u679c\u7b49\u4e8ea[:]\uff1b\u5b57\u5178\u3001\u96c6\u5408\u4e5f\u53ef\u7528 \u6269\u5c55 a.extend(b) \u76f8\u5f53\u4e8e\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61b\u8f6c\u6362\u6210\u5bf9\u5e94\u5e8f\u5217\u540e\u518d\u4e32\u63a5\uff1b\u5c31\u7ed3\u679c\u7b49\u4e8ea+=b [1,2].extend((3,4))=[1,2,3,4] \u4e00\u822c\u63d2\u5165 a.insert(i,x) \u5728\u4e0b\u6807i\u4e4b\u540e\u63d2\u5165x\uff0c\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d \u5f39\u51fa a.pop([i]) \u5220\u6389\u7b2ci\u4e2a\u5143\u7d20\uff1b\u5982\u679c\u7701\u7565i\u5219\u9ed8\u8ba4\u5220\u6389\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \u79fb\u9664 a.remove(x) \u5220\u6389\u7b2c\u4e00\u4e2a\u7b49\u4e8ex\u7684\u5143\u7d20 \u53cd\u8f6c a.reverse()"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_45","title":"\u5217\u8868","text":"\u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u901a\u7528\u64cd\u4f5c \uff08\u89c1\u4e0a\u6587\uff09 \u5e8f\u5217\u901a\u7528\u64cd\u4f5c \u53ef\u53d8\u5e8f\u5217\u901a\u7528\u64cd\u4f5c \u6784\u9020 list([iterable]) \u53ef\u4f20\u5165\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6784\u9020\u5217\u8868 \u6392\u5e8f a.sort([key=None, reverse=False]) \u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b\u5c06\u5173\u952e\u5b57\u53c2\u6570reverse\u8d4b\u503c\u4e3aTrue\u53ef\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff1bkey\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u5219\u53ef\u81ea\u5b9a\u4e49\u6bd4\u8f83\u89c4\u5219 <p>\u5217\u8868\u751f\u6210\u5f0f\u7279\u6027\u89c1\u4e0b\u6587\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_46","title":"\u5143\u7ec4","text":"\u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u901a\u7528\u64cd\u4f5c \uff08\u89c1\u4e0a\u6587\uff09 \u5e8f\u5217\u901a\u7528\u64cd\u4f5c \u6784\u9020 tuple([iterable]) \u53ef\u4f20\u5165\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6784\u9020\u5143\u7ec4"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_47","title":"\u96c6\u5408","text":"<p>\u96c6\u5408\u5141\u8bb8\u4e00\u4e9b\u7b80\u5355\u7684\u96c6\u5408\u8fd0\u7b97\u3002</p> \u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u901a\u7528\u64cd\u4f5c \uff08\u89c1\u4e0a\u6587\uff09 \u6784\u9020 set([iterable]) \u53ef\u4f20\u5165\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6784\u9020\u96c6\u5408\uff0c\u4f46\u5176\u4e2d\u7684\u5143\u7d20\u5fc5\u987b\u662f\u53ef\u54c8\u5e0c\u7684 \u6d45\u62f7\u8d1d s1.copy() \u6dfb\u52a0\u5143\u7d20 s1.add(x) \u5220\u9664\u5143\u7d20 s1.remove(x) \u4e0d\u5b58\u5728\u5219\u629b\u51faKeyError \u79fb\u9664\u5143\u7d20 s1.discard(x) \u4e0d\u5b58\u5728\u5219\u4ec0\u4e48\u4e5f\u4e0d\u505a \u5f39\u51fa\u5143\u7d20 s1.pop() \u5f39\u51fa\"\u7b2c\u4e00\u4e2a\u5143\u7d20\"\uff1b\u7a7a\u96c6\u5408\u4f1a\u629b\u51faKeyError \u6e05\u7a7a s1.clear() \u4ea4\u96c6 s1 &amp; s2 \u6216\u8005 s1.intersection(s2) \u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 \u5e76\u96c6 s1 | s2 \u6216\u8005 s1.union(s2) \u5bf9\u79f0\u5dee\u96c6\uff08\u5f02\u6216\uff09 s1 ^ s2 \u6216\u8005 s1.symmetric_difference(s2) \u5dee\u96c6 s1 - s2 \u6216\u8005 s1.difference(s2) \u4e0a\u97624\u6761\u64cd\u4f5c\u7684\u66f4\u65b0\u7248\u672c s1 |= s2 , s1&amp;=s2, s1-=s2, s1^=s2 \u5b50\u96c6\u5224\u5b9a s1 &lt;= s2 \u6216 s1.issubset(s2) \u7b26\u5408\u6761\u4ef6\u8fd4\u56deTrue\uff0c\u4e0b\u540c \u771f\u5b50\u96c6\u5224\u5b9a s1 &lt; s2 \u8d85\u96c6\u5224\u5b9a s1&gt;=s2 \u6216 s1.issuperset(s2) \u771f\u8d85\u96c6\u5224\u5b9a s1 &gt; s2 \u76f8\u4ea4\u5224\u5b9a s1.isdisjoint(s2) \u4ea4\u96c6\u7a7a\u5219\u8fd4\u56deTrue"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_48","title":"\u5b57\u5178","text":"<p>\u4e0b\u9762\u4f1a\u5217\u51fa\u5b57\u5178\u7684\u5e38\u7528\u65b9\u6cd5\uff08\u4e0d\u662f\u5168\u90e8\uff09</p> \u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u901a\u7528\u64cd\u4f5c \uff08\u89c1\u4e0a\u6587\uff09 \u6784\u9020 dict([(k1:w1),(k2:w2),...])dict(k1=w1,k2=w2) \u53ef\u4f20\u5165\u5217\u8868\uff08\u5217\u8868\u4e2d\u662f\u82e5\u5e72\u4e24\u4e2a\u503c\u7ec4\u6210\u7684\u5143\u7ec4\uff09\u6784\u9020\u5b57\u5178\uff0c\u4e5f\u53ef\u4f20\u5165\u5173\u952e\u5b57\u53c2\u6570\u6784\u9020\u5b57\u5178\u7b49\u3002\u8be6\u7ec6\u89c1\u5b98\u65b9\u6587\u6863 \u6d45\u62f7\u8d1d d.copy() \u6e05\u7a7a d.clear() \u7d22\u5f15\u548c\u8d4b\u503c d[k]d[k]=x k\u4e0d\u5b58\u5728\u65f6\uff0c\u76f8\u5f53\u4e8e\u63d2\u5165\u65b0\u7684\u952e\u503c\u5bf9\uff1b\u5b57\u5178\u4f1a\u786e\u4fdd\u81ea\u5df1\u7684\u5143\u7d20\u6309\u7167\u63d2\u5165\u987a\u5e8f\u6392\u5217 \u6309\u952e\u53d6\u503c d.get(k,[def=None]) \u8fd4\u56de\u8fd9\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\uff1b\u5982\u679c\u6307\u5b9a\u4e86def\u53c2\u6570\u5219\u4f1a\u5728\u627e\u4e0d\u5230k\u8fd9\u4e2a\u952e\u7684\u65f6\u5019\u8fd4\u56dedef\uff0c\u5426\u5219\u8fd4\u56deNone \u6309\u952e\u5220\u9664 del d[k] \u627e\u4e0d\u5230k\u8fd9\u4e2a\u952e\u5219\u629b\u51faKeyError \u6309\u952e\u5220\u96642 d.pop(k,[def=None]) \u5220\u9664\u952e\u503c\u5bf9\u5e76\u8fd4\u56de\u8fd9\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\uff1b\u5982\u679c\u6307\u5b9a\u4e86def\u53c2\u6570\u5219\u4f1a\u5728\u627e\u4e0d\u5230k\u8fd9\u4e2a\u952e\u7684\u65f6\u5019\u8fd4\u56dedef\uff0c\u5426\u5219\u4f1a\u629b\u51faKeyError \u5f39\u51fa\u5143\u7d20 d.popitem() \u5f39\u51fa\u7b2c\u4e00\u4e2a\u952e\u503c\u5bf9\u5e76\u8fd4\u56de\u4e4b\uff08\u4ee5\u5143\u7ec4\u5f62\u5f0f\uff09 \u8bbe\u7f6e\u9ed8\u8ba4\u503c d.setdefault(k,[def=None]) \u5b57\u5178\u4e2d\u5df2\u5b58\u5728k\u5219\u8fd4\u56ded[k]\uff0c\u5426\u5219d[k]=def\uff0c\u5e76\u8fd4\u56dedef\u7684\u5185\u5bb9 \u66f4\u65b0 d.update([dd]) \u6216 d |= dd \uff08Py3.9\uff09 \u4f7f\u7528dd\uff08\u5b57\u5178\u6216\u7531\u82e5\u5e72\u4e24\u4e2a\u503c\u7ec4\u6210\u7684\u5143\u7ec4\u6784\u6210\u7684\u5217\u8868\uff09\u66f4\u65b0d\u4e2d\u7684\u5185\u5bb9 \u5408\u5e76\uff08py3.9\uff09 d| dd dd\u662f\u53e6\u4e00\u4e2a\u5b57\u5178\uff0c\u5c06\u521b\u5efa\u4e24\u4e2a\u5b57\u5178\u5408\u5e76\u7684\u65b0\u5b57\u5178\u3002\uff08\u4ee5dd\u4e2d\u7684\u952e\u503c\u5bf9\u4f18\u5148\uff09 \u89c6\u56fe\u5bf9\u8c61 d.items()d.keys()d.values() \u83b7\u53d6\u952e\u503c\u5bf9\u3001\u952e\u3001\u503c\u7684\u89c6\u56fe\u5bf9\u8c61\uff0c\u4e3b\u8981\u7528\u4e8e\u8fed\u4ee3"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_49","title":"\u5b57\u7b26\u4e32","text":"<p>\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u76f8\u5f53\u591a\uff0c\u8fd9\u91cc\u4e5f\u53ea\u80fd\u5217\u51fa\u6bd4\u8f83\u5e38\u7528\u7684\u65b9\u6cd5</p> \u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u901a\u7528\u64cd\u4f5c \uff08\u89c1\u4e0a\u6587\uff09 \u5e8f\u5217\u901a\u7528\u64cd\u4f5c \u6784\u9020 str([iterable]) \u53ef\u4f20\u5165\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6784\u9020\u5b57\u7b26\u4e32 \u8ba1\u6570 s.count(s2,[st,ed]) \u8fd4\u56des2\u5728s[st:ed]\u5185\u7684\u51fa\u73b0\u6b21\u6570 \"abcdeeee\".count(\"e\",5,7)=2 \u67e5\u627e s.find(s2,[st,ed]) \u8fd4\u56des2\u5728s[st:ed]\u5185\u51fa\u73b0\u7684\u6700\u5c0f\u4e0b\u6807;\u627e\u4e0d\u5230\u5219\u8fd4\u56de-1 \"abcdeee\".find(\"e\")=4 \u53cd\u5411\u67e5\u627e s.rfind(s2,[st,ed]) \u540c\u4e0a\uff0c\u4f46\u627e\u7684\u662f\u6700\u5927\u4e0b\u6807 \"abcdeee\".rfind(\"e\")=6 \u5206\u9694 s.partition(s2) \u5728s\u4e2d\u627e\u5230s2\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06s\u62c6\u6210s2\u524d\u3001s2\u548cs2\u540e\u4e09\u4e2a\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e09\u8005\u6784\u6210\u7684\u5143\u7ec4\uff08a\uff0cb\uff0cc\uff09\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230s2\u5219b\u3001c\u5c06\u4f1a\u662f\u7a7a\u4e32 \"abcdeee\".partition(\"de\") =('abc', 'de', 'ee')\"abcdeee\".partition(\"k\")=('abcdeee', '', '') \u62c6\u5206 s.split(s1=None,maxsplit=-1) \u5c06\u5b57\u7b26\u4e32\u4ee5s1\u4f4d\u5206\u9694\u7b26\u62c6\u5206\u6210\u82e5\u5e72\u5b57\u7b26\u4e32\u5e76\u7ec4\u6210\u5217\u8868\uff1b\uff08\u5982\u679cs1\u7f3a\u7701\u5219\u8868\u660e\u4ee5\u4efb\u610f\u957f\u7a7a\u683c\u4f5c\u4e3a\u5206\u9694\u7b26\u53f7\uff09\uff1b\u6307\u5b9amaxsplit\u4e3a\u6b63\u503c\u5219\u8868\u660e\u6b64\u62c6\u5206\u6700\u591a\u4f1a\u8fdb\u884c\u8fd9\u4e48\u591a\u6b21 \"h e ll o\".split()=['h', 'e', 'll', 'o']\"wawawawa\".split(\"a\",2)=['w', 'w', 'wawa'] \u66ff\u6362 s.replace(s1,s2,[cnt]) \u5c06s\u4e2d\u51fa\u73b0\u7684s1\u5b50\u4e32\u5168\u90e8\u66ff\u6362\u6210s2\uff1b\u6307\u660ecnt\u8868\u660e\u6700\u591a\u8fdb\u884ccnt\u6b21\u66ff\u6362 'abcabcabc'.replace('abc','d',2)='ddabc' \u62fc\u63a5 s.join(L) \u4ee5\u5b57\u7b26\u4e32s\u4f5c\u4e3a\u5206\u9694\u7b26\u53f7\uff0c\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61L\uff08\u5143\u7d20\u5fc5\u987b\u5168\u662f\u5b57\u7b26\u4e32\uff09\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4e32\u63a5 '|'.join([\"L\",\"O\",\"V\",\"E\"])=\"L|O|V|E\"''.join([\"L\",\"O\",\"V\",\"E\"])=\"LOVE\" \u5c0f\u5199\u5316\u3001\u5927\u5199\u5316 s.lower()s.upper() \u5c06s\u8f6c\u6362\u4e3a\u5168\u5c0f\u5199\u6216\u5168\u5927\u5199 \u5168\u5c0f\u5199\u3001\u5168\u5927\u5199\u5224\u5b9a s.islower()s.isupper() s\u4e2d\u7684\u5b57\u6bcd\u5168\u662f\u5c0f\u5199\u6216\u5927\u5199\u5219\u8fd4\u56deTrue \u7a7a\u683c\u4e32\u5224\u5b9a s.isspace() s\u975e\u7a7a\u4e14\u5168\u662f\u7a7a\u683c\uff0c\u8fd4\u56deTrue \u6570\u5b57\u4e32\u5224\u5b9a s.isdigit() s\u5168\u662f\u963f\u62c9\u4f2f\u6570\u5b57\uff0c\u8fd4\u56deTrue \u7f16\u7801 s.encode(encoding=\"utf-8\") \u6307\u5b9a\u5b57\u7b26\u4e32s\u7684\u7f16\u7801\uff0c\u5728\u5199\u722c\u866b\u7684\u65f6\u5019\u53ef\u80fd\u6709\u7528\uff1b\u9ed8\u8ba4\u7528utf-8\u7f16\u7801 \u683c\u5f0f\u5316 s.format(...) \u6216 s1 % ... \u53c2\u89c1\u4e4b\u540e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 <ul> <li>\u5b57\u7b26\u4e32\u7684\u4e0a\u8ff0\u6d89\u53ca\u67e5\u627e\u5b50\u4e32\u7684\u64cd\u4f5c\u4f7f\u7528\u7684\u7b97\u6cd5\u662fBoyer-Moore\uff0c\u5e73\u5747\u60c5\u51b5\u4e0b\u590d\u6742\u5ea6\u4e3aO\uff08n\uff09\uff0c\u4f46\u6700\u5dee\u60c5\u51b5\u4e0b\u53ef\u8fbeO\uff08nm\uff09</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_50","title":"\u5176\u4ed6\u7279\u6027","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_51","title":"\u63a8\u5bfc\u5f0f","text":"<p>\u5728\u521b\u5efa\u5217\u8868\u3001\u96c6\u5408\u548c\u5b57\u5178\u65f6\uff0c\u53ef\u8ba9\u5217\u8868\u4ee5\u4e00\u5b9a\u7684\u89c4\u5219\u751f\u6210\u5176\u4e2d\u7684\u5143\u7d20\uff0c\u4ee5\u5217\u8868\u4e3a\u4f8b\uff1a</p> <pre><code>L=[x for x in range(1,11)]\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4f1a\u628aL=[1,2,3,4,5,6,7,8,9,10]\u3002range\u51fd\u6570\u4f1a\u751f\u62101\u523011-1=10\u517110\u4e2a\u6570\u5b57\u7684\u5e8f\u5217\uff0cfor\u5faa\u73af\u4f1a\u8fed\u4ee3\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u5c06\u8fed\u4ee3\u5230\u7684\u5143\u7d20\uff08\u7ecf\u8fc7\u4e00\u4e9b\u5904\u7406\u540e\uff09\u9010\u4e2a\u4f5c\u4e3aL\u4e2d\u7684\u5143\u7d20\u3002</p> <p>\u66f4\u4e00\u822c\u5730\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\uff1a\uff08\u6807\u51c6\u7684\u5df4\u79d1\u65af\u8303\u5f0f\u8868\u793a\u6cd5\u89c1https://docs.python.org/zh-cn/3/reference/expressions.html#grammar-token-comp-for\uff09</p> <pre><code>\u8868\u8fbe\u5f0f for \u53d8\u91cf1 in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u6761\u4ef6] for \u53d8\u91cf2 in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u6761\u4ef6] ...\n</code></pre> <p>\u53d8\u91cf1\u30012\u3001...\u662f\u5728\u8868\u8fbe\u5f0f\u4e2d\u6d89\u53ca\u5230\u7684\u53d8\u91cf\u3002\u5176\u4e2d\u5404\u4e2a\u53d8\u91cf\u5fc5\u987b\u6ee1\u8db3\u6761\u4ef6\u624d\u4f1a\u88ab\u8003\u8651\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\u5c31\u4f1a\u8df3\u8fc7\u3002</p> <p>\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u751f\u6210[2,4,6,8]\u548c[21,23,25,27,29]\u4e2d\u5143\u7d20\u4e24\u4e24\u76f8\u52a0\u7684\u7ed3\u679c\u7ec4\u6210\u7684\u5217\u8868\uff1a</p> <pre><code>[x+y for x in range(1,10) if x%2==0 for y in range(20,30) if y%2==1]\n#[23, 25, 27, 29, 31, 25, 27, 29, 31, 33, 27, 29, 31, 33, 35, 29, 31, 33, 35, 37]\n</code></pre> <p>\u628a\u524d\u4e00\u4e2aif\u6761\u4ef6\u62c9\u5230\u540e\u9762\u7684if\u4e2d\uff0c\u8d77\u5230\u7684\u6548\u679c\u662f\u4e00\u6837\u7684</p> <pre><code>[x+y for x in range(1,10) for y in range(20,30) if y%2==1 and x%2==0]\n#[23, 25, 27, 29, 31, 25, 27, 29, 31, 33, 27, 29, 31, 33, 35, 29, 31, 33, 35, 37]\n</code></pre> <p>\u5bf9\u96c6\u5408\u800c\u8a00\uff0c\u53ea\u9700\u8981\u628a\u4e0a\u9762\u7684\u6846\u6362\u6210\u82b1\u62ec\u53f7\u5c31\u80fd\u53d8\u6210\u96c6\u5408\u63a8\u5bfc\u5f0f\u4e86\uff1a</p> <pre><code>{x+y for x in range(1,10) for y in range(20,30) if y%2==1 and x%2==0}\n#{33, 35, 37, 23, 25, 27, 29, 31}\n</code></pre> <p>\u5bf9\u5b57\u5178\u800c\u8a00\uff0c\u8868\u8fbe\u5f0f\u9700\u8981\u6539\u6210\u7528\u5f15\u53f7\u5206\u9694\u7684\u4e24\u4e2a\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e00\u5f00\u59cb\u7684\u952e\u503c\u5bf9\u53ef\u80fd\u4f1a\u88ab\u540e\u6765\u7684\u8986\u76d6\uff1a</p> <pre><code>{x-y:x+y for x in range(1,10) if x%2==0 for y in range(20,30) if y%2==1}\n#{-19: 35, -21: 37, -23: 35, -25: 33, -27: 31, -17: 33, -15: 31, -13: 29}\n</code></pre> <p>\u603b\u7ed3\u4e00\u4e0b\u5c31\u662f\uff1a</p> <pre><code>#\u5217\u8868\u3001\u96c6\u5408\u63a8\u5bfc\u5f0f\n\u8868\u8fbe\u5f0f for \u53d8\u91cf1 in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u6761\u4ef6] for \u53d8\u91cf2 in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u6761\u4ef6] ...\n#\u5b57\u5178\u63a8\u5bfc\u5f0f\n\u8868\u8fbe\u5f0f1:\u8868\u8fbe\u5f0f2 for \u53d8\u91cf1 in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u6761\u4ef6] for \u53d8\u91cf2 in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u6761\u4ef6] ...\n</code></pre> <p>\u5f53\u7136\u4e0a\u6587\u4e2d\u6211\u4eec\u53ea\u8ba8\u8bba\u4e86\u4e09\u4e2d\u7c7b\u578b\u7684\u63a8\u5bfc\u5f0f\u3002\u65e2\u7136\u5217\u8868\u90fd\u6709\u63a8\u5bfc\u5f0f\u4e86\uff0c\u90a3\u5143\u7ec4\u5462\uff1f\u5143\u7ec4\u4e8b\u5b9e\u4e0a\u6ca1\u6709\u63a8\u5bfc\u5f0f\u8fd9\u4e2a\u8bf4\u6cd5\uff0c\u5982\u679c\u771f\u7684\u60f3\u8981\u83b7\u5f97\u4e00\u4e2a\u63a8\u5bfc\u5f0f\u63a8\u5bfc\u51fa\u7684\u5143\u7ec4\uff0c\u8bf7\u5148\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u7136\u540e\u4f7f\u7528tuple\u51fd\u6570\u8f6c\u6362\u6210\u5143\u7ec4\u3002</p> <p>\u7b80\u5355\u5730\u5c06\u63a8\u5bfc\u5f0f\u6700\u5916\u5c42\u7684\u82b1\u62ec\u53f7\u6216\u65b9\u62ec\u53f7\u6362\u6210\u5706\u62ec\u53f7\uff0c\u5f97\u5230\u7684\u5c06\u662f\u751f\u6210\u5668\u63a8\u5bfc\u5f0f\u800c\u4e0d\u518d\u662f\u5143\u7ec4\uff0c\u5176\u884c\u4e3a\u4e5f\u548c\u5e8f\u5217\u5bf9\u8c61\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\u4ee5\u540e\u6211\u4eec\u518d\u8ba8\u8bba\u5b83\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_52","title":"\u5e38\u7528\u51fd\u6570\u603b\u7ed3","text":"<p>\u8fd9\u91cc\u5c06\u6309\u7528\u9014\u7c7b\u578b\u628a\u5e38\u7528\u7684\u5185\u7f6e\u51fd\u6570\uff08\u4e0d\u5305\u62ec\u5185\u7f6e\u6a21\u5757\u91cc\u7684\u51fd\u6570\uff09\u505a\u5212\u5206\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_53","title":"\u7c7b\u578b\u8f6c\u6362\u51fd\u6570","text":"<p>\u8fd9\u4e9b\u51fd\u6570\u5df2\u7ecf\u5728\u524d\u9762\u7684\u201c\u57fa\u672c\u6570\u636e\u7c7b\u578b\u201d\u4e2d\u63d0\u5230\uff0c\u8fd9\u91cc\u5c06\u53ea\u5217\u51fa\u5b83\u4eec\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#intxbase10-int","title":"int(x,base=10) -&gt; int","text":"<p>\u8f93\u5165x\uff0c\u5c06x\u4ee5base\u8fdb\u5236\u89e3\u6790\u621010\u8fdb\u5236\u540e\u8fd4\u56de\u6574\u6570.</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#floatx-float","title":"float(x) -&gt;float","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#boolx-bool","title":"bool(x) -&gt; bool","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#complexx-complex","title":"complex(x) -&gt; complex","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_54","title":"\u5e38\u7528\u6570\u636e\u7ed3\u6784\u6784\u9020\u51fd\u6570","text":"<p>\u8fd9\u4e9b\u51fd\u6570\u5df2\u7ecf\u5728\u524d\u9762\u7684\u201c\u5e38\u7528\u6570\u636e\u7ed3\u6784\u65b9\u6cd5\u4e0e\u76f8\u5173\u5e38\u7528\u51fd\u6570\u201d\u4e2d\u63d0\u5230\uff0c\u8fd9\u91cc\u5c06\u53ea\u5217\u51fa\u5b83\u4eec\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#listiterable-list","title":"list([iterable]) -&gt; list","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#tupleiterable-tuple","title":"tuple([iterable]) -&gt;tuple","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#striterable-str","title":"str([iterable]) -&gt; str","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#setiterable-set","title":"set([iterable]) -&gt; set","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#dict-dict","title":"dict(...) -&gt; dict","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_55","title":"\u6570\u5b66\u548c\u8fdb\u5236\u8f6c\u6362","text":"<p>\u66f4\u591a\u4e0e\u6570\u5b66\u6709\u5173\u7684\u51fd\u6570\u8bf7\u53c2\u8003math\u5e93\u4e2d\u7684\u51fd\u6570\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#absx","title":"abs(x)","text":"<p>\u8fd4\u56dex\u7684\u7edd\u5bf9\u503c\u6216\u6a21\uff08\u590d\u6570\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#maxxy-maxiterable","title":"max(x,y,...) \u6216 max([iterable])","text":"<p>\u4f20\u5165\u81f3\u5c11\u4e24\u4e2a\u53c2\u6570\u6216\u8005\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5c06\u8fd4\u56de\u8fd9\u4e9b\u53c2\u6570\u6216\u8fd9\u4e2a\u5bf9\u8c61\u4e2d\u7684\uff08\u7b2c\u4e00\u4e2a\uff09\u6700\u5927\u5143\u7d20\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#minxy-miniterable","title":"min(x,y,...) \u6216 min([iterable])","text":"<p>\u540c\u4e0a\uff0c\u4f46\u8fd4\u56de\uff08\u7b2c\u4e00\u4e2a\uff09\u6700\u5c0f\u5143\u7d20\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#sumiterable","title":"sum([iterable])","text":"<p>\u4f20\u5165\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fd4\u56de\u5bf9\u8c61\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#powabm","title":"pow(a,b,[m])","text":"<p>\u8fd4\u56dea\u7684b\u6b21\u5e42\uff0c\u5982\u679c\u6307\u5b9a\u4e86m\uff08\u5fc5\u987b\u662f\u6574\u6570\uff09\uff0c\u90a3\u4e48\u8fd4\u56dea\u7684b\u6b21\u5e42\u5bf9m\u53d6\u4f59\u6570\u7684\u7ed3\u679c\u3002</p> <p>py3.8\u4e2d\uff0cb\u652f\u6301\u5728\u4f20\u5165m\u7684\u60c5\u51b5\u4e0b\u4f20\u5165\u8d1f\u6570\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u7528\u8fd9\u4e2a\u51fd\u6570\u6c42\u4e00\u4e2a\u6570\u7684\u6a21\u9006\u5143\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#divmodab","title":"divmod(a,b)","text":"<p>\u5e26\u4f59\u9664\u6cd5\uff0c\u8fd4\u56de\u4e8c\u5143\u7ec4(a//b, a%b)\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#roundxd","title":"round(x,[d])","text":"<p>\u5c06x\u56db\u820d\u4e94\u5165\u5230d\u4f4d\u5c0f\u6570\uff0cd\u672a\u6307\u5b9a\u5219\u8868\u660e\u56db\u820d\u4e94\u5165\u5230\u6574\u6570\u3002</p> <p>\u4f46\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u6d6e\u70b9\u6570\u7cbe\u5ea6\u95ee\u9898\uff0c\u67d0\u4e9b\u6570\u503c\u53ef\u80fd\u4f1a\u5728\u8fb9\u754c\u5904\u4ea7\u751f\u53cd\u76f4\u89c9\u7684\u7ed3\u679c\u3002\u4f8b\u5982</p> <pre><code>round(4.5) #4\nround(5.5) #6\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#hexx","title":"hex(x)","text":"<p>\u8f93\u5165\u6574\u6570x\uff0c\u8fd4\u56de0x\u5f00\u5934\u768416\u8fdb\u5236\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#octx","title":"oct(x)","text":"<p>\u540c\u4e0a\uff0c\u8fd4\u56de0o\u5f00\u5934\u76848\u8fdb\u5236\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#binx","title":"bin(x)","text":"<p>\u540c\u4e0a\uff0c\u8fd4\u56de0b\u5f00\u5934\u76842\u8fdb\u5236\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_56","title":"\u8f93\u5165\u548c\u8f93\u51fa","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#inputprompt","title":"input([prompt])","text":"<p>\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u5165\u4e00\u884c\u5b57\u7b26\u4e32\u3002\u6307\u5b9aprompt\u4ee5\u5728\u8bfb\u5165\u524d\u8f93\u51fa\u4e00\u884c\u63d0\u793a\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#printobj-sep-endn-filesysstdout-flushfase","title":"print(*obj, sep=' ' , end='\\n', file=sys.stdout, flush=Fase)","text":"<p>\u8f93\u51fa\u82e5\u5e72\u4e2a\u4f20\u5165\u7684obj\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u4e4b\u95f4\u4ee5sep\u5206\u9694\uff08\u9ed8\u8ba4\u662f\u7a7a\u683c\uff09\uff0c\u8f93\u51fa\u5b8c\u6210\u540e\u518d\u8f93\u51fa\u4e00\u4e2aend\u5b57\u7b26\u4e32\uff08\u9ed8\u8ba4\u662f\u6362\u884c\uff09\u3002</p> <p>\u6307\u5b9afile\u4ee5\u89c4\u5b9a\u8f93\u51fa\u5230\u4f55\u5904\uff0c\u9ed8\u8ba4\u662f\u6807\u51c6\u8f93\u51fa\u6d41\u3002</p> <p>\u6307\u5b9aflush\u4e3aTrue\uff0c\u5219\u8f93\u51fa\u5b8c\u6210\u540e\u5c06\u5237\u65b0\u8f93\u51fa\u6d41\uff08\u7acb\u5373\u5c06\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u90fd\u8f93\u51fa\u5230\u6587\u4ef6\u4e2d\uff09\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#openf-moder","title":"open(f, mode='r', ...)","text":"<p>\u6253\u5f00\u6587\u4ef6f\u5e76\u8fd4\u56de\u6587\u4ef6\u5bf9\u8c61\uff0c\u5229\u7528\u8fd9\u4e2a\u6587\u4ef6\u5bf9\u8c61\u53ef\u4ee5\u5411\u91cc\u9762\u8bfb\u5199\u5185\u5bb9\u3002</p> <p>mode\u6307\u5b9a'r'\u4e3a\u8bfb\u53d6\uff0c\u6307\u5b9a'w'\u4e3a\u5199\u5165\u3002\u5728\u8fd9\u4e4b\u540e\u8ffd\u52a0\u5199'b'\u3001't'\u53ef\u4ee5\u4e8c\u8fdb\u5236\u6a21\u5f0f\uff08\u4f8b\u5982\u8bfb\u5199\u56fe\u7247\uff09\u6216\u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09\u8bfb\u5199\uff0c\u8ffd\u5199'a'\u4ee3\u8868\u6587\u4ef6\u5b58\u5728\u65f6\u5728\u672b\u5c3e\u8ffd\u52a0\u8bfb\u5199\u7b49\u3002\u5177\u4f53\u8bf4\u660e\u53c2\u770b\u5b98\u65b9\u6587\u6863\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_57","title":"\u8fed\u4ee3\u76f8\u5173\u51fd\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#rangestedstep","title":"range([st],ed,[step])","text":"<p>\u751f\u6210\u4e00\u4e2a\u4ecest\uff08\u9ed8\u8ba4\u4e3a0\uff09\u5230ed\uff08\u4e0d\u5305\u62eced\uff09\uff0c\u6b65\u957f\u4e3astep\uff08\u9ed8\u8ba4\u4e3a1\uff09\u7684range\u5e8f\u5217\u5bf9\u8c61\u3002\u901a\u5e38\u7528\u4e8efor\u5faa\u73af\u8fed\u4ee3\u3002</p> <p>range\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\u5e8f\u5217\u7c7b\u578b\uff0c\u4e5f\u652f\u6301\u4e00\u4e9b\uff08\u4f46\u4e0d\u662f\u6240\u6709\uff09\u5e8f\u5217\u64cd\u4f5c\uff1a</p> \u8fd0\u7b97\u3001\u51fd\u6570\u6216\u65b9\u6cd5 \u7b26\u53f7 \u7279\u6b8a\u8bf4\u660e \u793a\u4f8b \u901a\u7528\u64cd\u4f5c \uff08\u89c1\u4e0a\u6587\uff09 \u5e8f\u5217\u901a\u7528\u64cd\u4f5c(\u4e32\u63a5\u3001\u91cd\u590d\u9664\u5916) \u6784\u9020 range(...) <p>\u4f7f\u7528range\u5bf9\u8c61\u8fed\u4ee3\u4f1a\u6bd4\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u751f\u6210\u7684\u4e00\u4e32\u5e8f\u5217\u66f4\u9ad8\u6548\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#iteriterable","title":"iter(iterable)","text":"<p>\u8fd4\u56de\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fed\u4ee3\u5668\uff08iterator\uff09\uff08\u4ece\u5934\u5f00\u59cb\uff09\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#reversediterable","title":"reversed(iterable)","text":"<p>\u8fd4\u56de\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u53cd\u5411\u8fed\u4ee3\u5668\uff08for\u5faa\u73af\u65f6\uff0c\u5c06\u4eceL\u7684\u5c3e\u90e8\u5230\u5934\u90e8\u8fed\u4ee3\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#zipiterables","title":"zip(*[iterables])","text":"<p>\u540c\u65f6\u8fed\u4ee3\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u5f53\u8fd9\u5f53\u4e2d\u6700\u77ed\u7684\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fed\u4ee3\u5b8c\u6bd5\u65f6\uff0c\u7ed3\u675f\u8fed\u4ee3\u3002</p> <pre><code>for x,y,z in zip([1,2],[3,4,5],[6,7]):\n    print(x,y,z)\n#1 3 6\n#2 4 7\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#enumerateiterable-start0","title":"enumerate(iterable, start=0)","text":"<p>\u8fd4\u56de\u53e6\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4ee5\u5143\u7ec4(i,v)\u8868\u793a\uff0ci\u8868\u793a\u5176\u662f\u7b2ci\u4e2a\uff08\u4ece0\u5f00\u59cb\u8ba1\u6570\uff09\u5143\u7d20\uff0cv\u8868\u793a\u5143\u7d20\u5185\u5bb9\u3002</p> <pre><code>for i,v in enumerate([7,8,9]):\n    print(i,v)\n#0 7\n#1 8\n#2 9\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#nextiteratordef","title":"next(iterator,[def])","text":"<p>\u4f20\u5165\u8fed\u4ee3\u5668\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668\u6240\u6307\u5143\u7d20\u5e76\u4ee4\u8fed\u4ee3\u5668\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u8fed\u4ee3\u5b8c\u4e86\u4f1a\u629b\u51faStopIteration\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_58","title":"\u5b57\u7b26","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#chrx","title":"chr(x)","text":"<p>x\u662f\u6574\u6570\uff0c\u8fd4\u56de\u5bf9\u5e94unicode\u503c\u7684\u5355\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982chr(65)='A'</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#ordx","title":"ord(x)","text":"<p>x\u662f\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b57\u7b26\u5bf9\u5e94\u7684Unicode\u7801\u3002\u4e0d\u662f\u4e00\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u4f1a\u629b\u51faTypeError\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_59","title":"\u6392\u5e8f","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#sortediterablekeynone-reversefalse","title":"sorted([iterable],*,key=None, reverse=False)","text":"<p>\u8fd4\u56de\u65b0\u7684\u5df2\u6392\u5e8f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002</p> <p>\u6307\u5b9akey\u4e3a\u51fd\u6570\u53ef\u6539\u53d8\u7528\u4e8e\u6bd4\u8f83\u201c\u5927\u5c0f\u201d\u7684\u89c4\u5219\u3002\u6307\u5b9areverse\u4e3aTrue\u53ef\u4f7f\u5176\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u66f4\u591a\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1ahttps://docs.python.org/zh-cn/3/howto/sorting.html#sortinghowto\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_60","title":"\u7c7b\u578b\u5224\u5b9a","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#isinstanceobjcls","title":"isinstance(obj,cls)","text":"<p>\u68c0\u6d4bobj\u662f\u5426\u662fcls\u8fd9\u4e2a\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002</p> <pre><code>isinstance([1,2,3],list) #True\nfrom collections.abc import Iterable\nisinstance([1,2,3],Iterable) #True\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#typeobj","title":"type(obj)","text":"<p>\u8fd4\u56deobj\u7684\u7c7b\u578b\uff08\u4e00\u4e2atype\u5bf9\u8c61\uff09\u3002</p> <pre><code>type(123)\n# &lt;class 'int'&gt;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_61","title":"\u6267\u884c","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#evalobj","title":"eval(obj,...)","text":"<p>\u5c06obj\uff08\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff09\u5f53\u4f5cpython\u8868\u8fbe\u5f0f\u8fd0\u884c\uff0c\u7136\u540e\u8fd4\u56de\u8fd0\u884c\u7ed3\u679c\u3002\u6709\u8bed\u6cd5\u9519\u8bef\u4f1a\u629b\u51faSyntaxError\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#execobj","title":"exec(obj, ...)","text":"<p>\u5c06obj\uff08\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff09\u5f53\u4f5cpython\u4ee3\u7801\u6267\u884c\u3002\u8fd4\u56deNone\u3002\u6709\u8bed\u6cd5\u9519\u8bef\u4f1a\u629b\u51faSyntaxError\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_62","title":"\u5e38\u7528\u5185\u7f6e\u5e93\u51fd\u6570\u603b\u7ed3","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#math","title":"math","text":"<p>Python\u7684\u5185\u7f6e\u6570\u5b66\u5e93</p> <pre><code>import math\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_63","title":"\u6d6e\u70b9\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#ceilx","title":"ceil(x)","text":"<p>\u8fd4\u56dex\u7684\u5411\u4e0a\u53d6\u6574\u503c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#floorx","title":"floor(x)","text":"<p>\u8fd4\u56dex\u7684\u5411\u4e0b\u53d6\u6574\u503c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#iscloseabrel_tol1e-9abs_tol00","title":"isclose(a,b,*,rel_tol=1e-9,abs_tol=0.0)","text":"<p>\u5224\u65ad\u4e24\u4e2a\u6d6e\u70b9\u6570a\u3001b\u662f\u5426\u8db3\u591f\u76f8\u8fd1\uff0c\u5141\u8bb8\u7684\u8bef\u5dee\u4e3arel_tol\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#fabsx","title":"fabs(x)","text":"<p>x\u7684\u7edd\u5bf9\u503c\uff08\u6d6e\u70b9\u6570\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#fmodxy","title":"fmod(x,y)","text":"<p>\u9002\u7528\u4e8e\u6d6e\u70b9\u6570\u7684\u53d6\u6a21\u8fd0\u7b97</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_64","title":"\u7ec4\u5408\u8ba1\u6570\u76f8\u5173","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#combnk","title":"comb(n,k)","text":"<p>\u7ec4\u5408\u6570\\(C_{n}^k\\)</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#factorialx","title":"factorial(x)","text":"<p>\u8fd4\u56dex\u7684\u9636\u4e58\uff0cx\u9700\u8981\u662f\u5927\u4e8e\u7b49\u4e8e0\u7684\u6574\u6570\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#permnknone","title":"perm(n,k=None)","text":"<p>k&lt;=n\uff0c\u8fd4\u56de\\(\\frac{n!}{(n-k)!}\\)\uff1b\u5426\u5219\u8fd4\u56de0</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_65","title":"\u6570\u8bba","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#gcdab-gcdints","title":"gcd(a,b)  /  gcd(*ints)","text":"<p>\u8f93\u5165\u4e24\u4e2a/\u82e5\u5e72\uff08Py3.9\uff09\u6574\u6570\uff0c\u8fd4\u56de\u8fd9\u4e9b\u6570\u7684\u6700\u5927\u516c\u56e0\u6570\u3002\u7279\u522b\u5730\uff0c\u8f93\u5165\u7684\u6570\u5168\u4e3a0\u65f6\uff0c\u8fd4\u56de0\u3002\u8fd9\u548c\u81ea\u5df1\u624b\u5199\u7684gcd\u51fd\u6570\u884c\u4e3a\u76f8\u540c\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#lcmints-py39","title":"lcm(*ints) (Py3.9)","text":"<p>\u8f93\u5165\u82e5\u5e72\u6574\u6570\uff0c\u8fd4\u56de\u6700\u5c0f\u516c\u500d\u6570\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_66","title":"\u6c42\u79ef\u4e0e\u6c42\u548c","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#proditerablestart1","title":"prod(iterable,*,start=1)","text":"<p>\u6c42\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u79ef\uff0c\u521d\u59cb\u503c\u4e3astart\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#fsumiterable","title":"fsum(iterable)","text":"<p>\u8fd4\u56de\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6d6e\u70b9\u503c\u548c\uff08\u7cbe\u786e\u5730\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_67","title":"\u7b97\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#expx","title":"exp(x)","text":"<p>\u6307\u6570\u51fd\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#logxbase","title":"log(x,[base])","text":"<p>\u4ee5base\u4e3a\u5e95\u6570\u7684x\u7684\u5bf9\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#log2x-log10x","title":"log2(x)  log10(x)","text":"<p>\u7c7b\u4f3c\u4e0a\u4e00\u51fd\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#sqrtx","title":"sqrt(x)","text":"<p>\u7b97\u6570\u5e73\u65b9\u6839</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#isqrtx","title":"isqrt(x)","text":"<p>\u4e0a\u4e00\u51fd\u6570\u7684\u5411\u4e0b\u53d6\u6574\u503c</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#sinx-cosx-tanx-asinx-acosx-atanx","title":"sin(x) cos(x) tan(x) asin(x) acos(x) atan(x)","text":"<p>\u4e09\u89d2\u51fd\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#atan2yx","title":"atan2(y,x)","text":"<p>\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u8fd4\u56deatan(y/x)\uff0c\u7ed3\u679c\u5728\\([-\\pi,\\pi]\\)\u4e4b\u95f4\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#distpq","title":"dist(p,q)","text":"<p>p\u3001q\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_68","title":"\u5e38\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#pi-e-tau2pi","title":"pi e tau\uff082pi\uff09","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#cmath","title":"cmath","text":"<p>\u7528\u4e8e\u590d\u6570\u7b97\u6570\u7684\u5e93</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#phasex","title":"phase\uff08x\uff09","text":"<p>\u8fd4\u56de\u590d\u6570x\u7684\u76f8\u4f4d\u3002[-pi,pi]\u4e4b\u95f4</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#polarx","title":"polar\uff08x\uff09","text":"<p>\u8fd4\u56de\u590d\u6570x\u5728\u6781\u5750\u6807\u7cfb\u4e2d\u7684\u8868\u793a\u65b9\u5f0f\uff08\u4e8c\u5143\u7ec4\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#rectrphi","title":"rect\uff08r\uff0cphi\uff09","text":"<p>\u901a\u8fc7\u6781\u5750\u6807\u7684\u534a\u5f84\u548c\u89d2\u5ea6\u8fd4\u56de\u5bf9\u5e94\u590d\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#random","title":"random","text":"<p>\u4f2a\u968f\u673a\u6570\u5e93</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_69","title":"\u5e8f\u5217","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#choiceseq","title":"choice\uff08seq\uff09","text":"<p>\u4ece\u975e\u7a7a\u5e8f\u5217 seq \u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u5143\u7d20\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#shufflexrandom","title":"shuffle\uff08x\uff0c[random]\uff09","text":"<p>\u5c06x\u6309\u7167random\u51fd\u6570\u751f\u6210\u7684\u503c\uff08[0.0,1.0)\uff09\u968f\u673a\u6253\u4e71\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_70","title":"\u968f\u673a\u6570","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#random_1","title":"random()","text":"<p>\u8fd4\u56de[0.0,1.0)\u5185\u7684\u968f\u673a\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#uniformab","title":"uniform\uff08a\uff0cb\uff09","text":"<p>\u8fd4\u56dea~b\u5185\u7684\u968f\u673a\u6d6e\u70b9\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#randintab","title":"randint\uff08a\uff0cb\uff09","text":"<p>\u8fd4\u56dea~b\u5185\u7684\u968f\u673a\u6574\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#randrangested-step-randrangeed","title":"randrange(st,ed, [step]) / randrange(ed)","text":"<p>\u53c2\u6570\u5f62\u5982range\uff0c\u8fd4\u56de\u8fd9\u4e4b\u4e2d\u7684\u4e00\u4e2a\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#statistics","title":"<code>statistics</code>","text":"<p>\u7edf\u8ba1\u5b66\u51fd\u6570\u3002\u5982\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u4e0b\u6587\u4e2d\u51fd\u6570\u53c2\u6570\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#meanx","title":"mean\uff08x\uff09","text":"<p>\u7b97\u6570\u5e73\u5747\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#fmeanx","title":"fmean\uff08x\uff09","text":"<p>\u5feb\u901f\u8ba1\u7b97\u7b97\u6570\u5e73\u5747\u6570\uff08\u603b\u662f\u8fd4\u56de\u6d6e\u70b9\u6570\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#medianx-median_lowx-median_highx","title":"median(x) / median_low(x) / median_high(x)","text":"<p>\u4e2d\u4f4d\u6570/\u9ad8\u4e2d\u4f4d\u6570/\u4f4e\u4e2d\u4f4d\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#itertools","title":"itertools","text":"<p>\u5305\u62ec\u5404\u7c7b\u7528\u4e8e\u8fed\u4ee3\u5bb9\u5668\u7684\u51fd\u6570</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#permutationsiterable-rnone","title":"<code>permutations</code>(iterable, r=None)","text":"<p>\u8fde\u7eed\u8fd4\u56de\u7531 iterable \u5143\u7d20\u751f\u6210\u957f\u5ea6\u4e3a r \u7684\u6392\u5217\uff08\u8fed\u4ee3\u5668\uff09\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#combinationsiterable-r","title":"<code>combinations</code>(iterable, r)","text":"<p>\u8fd4\u56de\u7531\u8f93\u5165 iterable \u4e2d\u5143\u7d20\u7ec4\u6210\u957f\u5ea6\u4e3a r \u7684\u5b50\u5e8f\u5217\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#combinations_with_replacementiterable-r","title":"<code>combinations_with_replacement</code>(iterable, r)","text":"<p>\u8fd4\u56de\u7531\u8f93\u5165 iterable \u4e2d\u5143\u7d20\u7ec4\u6210\u7684\u957f\u5ea6\u4e3a r \u7684\u5b50\u5e8f\u5217\uff0c\u5141\u8bb8\u6bcf\u4e2a\u5143\u7d20\u53ef\u91cd\u590d\u51fa\u73b0\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#datetime","title":"datetime","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#os","title":"os","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_71","title":"\u5b57\u7b26\u4e32\u683c\u5f0f\u5316","text":"<p>https://docs.python.org/zh-cn/3/tutorial/inputoutput.html#formatted-string-literals</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#sformatargs-kwargs","title":"s.format(args, *kwargs)","text":"<p>\u683c\u5f0f\u5316s\u4e2d\u5e26\u6709\u82b1\u62ec\u53f7\u7684\u90e8\u5206\u3002</p> <ol> <li>*args \uff1a \u4f9d\u6b21\u66ff\u6362\uff0c\u6216\u8005\u6839\u636e\u82b1\u62ec\u53f7\u4e2d\u7684\u7d22\u5f15\u66ff\u6362</li> <li>**kwargs\uff1a\u5b57\u5178\uff0c\u6839\u636e\u82b1\u62ec\u53f7\u4e2d\u7684\u503c\u4f5c\u4e3a\u952e\u6765\u66ff\u6362</li> </ol> <pre><code>\"The sum of 1 + 2 is {0}\".format(1+2)\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_72","title":"\u683c\u5f0f\u5b57\u7b26\u4e32\u8bed\u6cd5","text":"<p>\u5927\u6982\u957f\u8fd9\u6837\uff1a</p> <pre><code>{ [\u57df\u540d] [! \u8f6c\u6362\u65d7\u6807] [: \u683c\u5f0f\u63a7\u5236\u7b26] }\n</code></pre> <ol> <li> <p>\u57df\u540d\uff1a\u5982\u679c\u4e3a\u6570\u5b57\uff0c\u5219\u5b83\u6307\u5411\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\uff0c\u800c\u5982\u679c\u4e3a\u5173\u952e\u5b57\uff0c\u5219\u5b83\u6307\u5411\u4e00\u4e2a\u547d\u540d\u5173\u952e\u5b57\u53c2\u6570\u3002\uff08\u7701\u7565\u5219\u9ed8\u8ba4\u4e3a\u4f4d\u7f6e\u53c2\u6570\u4ece0\u9012\u589e\uff09</p> </li> <li> <p>\u8f6c\u6362\u65d7\u6807\uff1a</p> </li> <li> <p>a\uff1a\u76f8\u5f53\u4e8e\u5728\u4ee3\u5165\u524d\u5957\u7528\u4e00\u6b21ascii\u51fd\u6570</p> </li> <li>s\uff1a\u76f8\u5f53\u4e8e\u5728\u4ee3\u5165\u524d\u5957\u7528\u4e00\u6b21str\u51fd\u6570\uff08\u5f71\u54cdprint\u7684\u8f93\u51fa\uff09</li> <li> <p>r\uff1a\u76f8\u5f53\u4e8e\u5728\u4ee3\u5165\u524d\u5957\u7528\u4e00\u6b21repr\u51fd\u6570\uff08repr\u4f1a\u5f71\u54cd\u5bf9\u8c61\u5728\u63a7\u5236\u53f0\u7684\u8f93\u51fa\uff09</p> </li> <li> <p>\u5e38\u7528\u7684\u683c\u5f0f\u63a7\u5236\u7b26\uff08\u683c\u5f0f\u89c4\u683c\u8ff7\u4f60\u8bed\u8a00\uff09\uff1a</p> </li> </ol> <p><code>format_spec     ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]</code></p> <ul> <li>\u586b\u5145fill\uff1a\u5982\u679c\u6307\u5b9a\u4e86\u4e00\u4e2a\u6709\u6548\u7684 align \u503c\uff0c\u5219\u53ef\u4ee5\u5728\u8be5\u503c\u524d\u9762\u52a0\u4e00\u4e2a fill \u5b57\u7b26\uff0c\u5b83\u53ef\u4ee5\u4e3a\u4efb\u610f\u5b57\u7b26\uff0c\u5982\u679c\u7701\u7565\u5219\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u7b26\u3002</li> <li>\u5bf9\u9f50\u9009\u9879align\uff1a&lt; &gt; = ^ \u5206\u522b\u8868\u793a \u5de6\u53f3\u5bf9\u9f50\u3001\u5f3a\u5236\u5c06\u586b\u5145\u653e\u7f6e\u5728\u7b26\u53f7\uff08\u5982\u679c\u6709\uff09\u4e4b\u540e\u4f46\u5728\u6570\u5b57\u4e4b\u524d\u3002\u8fd9\u7528\u4e8e\u4ee5\u201c+000000120\u201d\u5f62\u5f0f\u6253\u5370\u5b57\u6bb5\u3001\u5c45\u4e2d\u3002</li> <li>width\uff1a\u662f\u4e00\u4e2a\u5b9a\u4e49\u6700\u5c0f\u603b\u5b57\u6bb5\u5bbd\u5ea6\u7684\u5341\u8fdb\u5236\u6574\u6570\uff0c\u5305\u62ec\u4efb\u4f55\u524d\u7f00\u3001\u5206\u9694\u7b26\u548c\u5176\u4ed6\u683c\u5f0f\u5316\u5b57\u7b26\u3002 \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5b57\u6bb5\u5bbd\u5ea6\u5c06\u7531\u5185\u5bb9\u786e\u5b9a\u3002</li> <li>precision\uff1a \u662f\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u8868\u793a\u5bf9\u4e8e\u4ee5 <code>'f'</code> and <code>'F'</code> \u683c\u5f0f\u5316\u7684\u6d6e\u70b9\u6570\u503c\u8981\u5728\u5c0f\u6570\u70b9\u540e\u663e\u793a\u591a\u5c11\u4e2a\u6570\u4f4d\uff0c\u6216\u8005\u5bf9\u4e8e\u4ee5 <code>'g'</code> \u6216 <code>'G'</code> \u683c\u5f0f\u5316\u7684\u6d6e\u70b9\u6570\u503c\u8981\u5728\u5c0f\u6570\u70b9\u524d\u540e\u5171\u663e\u793a\u591a\u5c11\u4e2a\u6570\u4f4d\u3002</li> </ul> <p>\u4e00\u4e9b\u4f7f\u7528\u4f8b\u5b50</p> <pre><code>'X: {0[0]};  Y: {0[1]}'.format(coord) #coord=(3,5)\n# 'X: 3;  Y: 5'\n\n'{:&lt;30}'.format('left aligned')\n# 'left aligned                  '\n'{:^30}'.format('centered')\n# '           centered           '\n'{:*^30}'.format('centered')  # use '*' as a fill char\n#'***********centered***********'\n\n'Correct answers: {:.2%}'.format(points/total)\n# 'Correct answers: 86.36%'\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#f-string","title":"f-string","text":"<pre><code>f'{variable: format_spec}'\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_73","title":"\u65e7\u683c\u5f0f\u5316\u65b9\u6cd5","text":"<pre><code>'%d %5.3f' % (1,2)\n# '1 2.000'\n</code></pre> <p>\u5b57\u7b26\u4e32\u540e\u7684\u767e\u5206\u53f7\u987b\u662f\u5143\u7ec4\u6216\u5b57\u5178\u3002\u82e5\u662f\u5b57\u5178\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u767e\u5206\u53f7\u5e94\u8be5\u5199\u6210<code>%(key)d</code>\u7684\u5f62\u5f0f\u3002\uff08\u800c\u4e14\u5b57\u5178\u952e\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u624d\u884c\uff09</p> <p>https://docs.python.org/zh-cn/3/library/stdtypes.html#old-string-formatting</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_74","title":"\u89e3\u5305","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#id","title":"\uff08\u6574\u6570\u7684\uff09id","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_75","title":"\u6761\u4ef6\u5224\u65ad\u548c\u5faa\u73af","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_76","title":"\u7b2c\u4e09\u65b9\u5e93","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#request","title":"Request","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#panda","title":"Panda","text":"<pre><code>import pandas as pd\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#dataframe","title":"Dataframe","text":"<p>\u4e8c\u7ef4\u8868\u683c</p> <pre><code>df = pd.DataFrame(\n    {\n        \"Name\": [\n            \"Braund, Mr. Owen Harris\",\n            \"Allen, Mr. William Henry\",\n            \"Bonnell, Miss. Elizabeth\",\n        ],\n        \"Age\": [22, 35, 58],\n        \"Sex\": [\"male\", \"male\", \"female\"],\n    }\n)\n\n                       Name  Age     Sex\n0   Braund, Mr. Owen Harris   22    male\n1  Allen, Mr. William Henry   35    male\n2  Bonnell, Miss. Elizabeth   58  female\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#series","title":"Series","text":"<p>\u6bcf\u4e00\u5217\u5c31\u662f\u4e00\u4e2aSeries</p> <pre><code>df[\"Age\"]\n\n0    22\n1    35\n2    58\nName: Age, dtype: int64\n</code></pre> <pre><code>ages = pd.Series([22, 35, 58], name=\"Age\")\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#conda","title":"conda","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#powershell","title":"\u5728powershell\u4e0b\u8fd0\u884c","text":"<p>https://github.com/conda/conda/issues/8428</p> <p>https://blog.csdn.net/z_dmsd/article/details/107394983</p> <p>https://zhuanlan.zhihu.com/p/89356758</p> <p>\u5728powershell\u4e2d\u8fd0\u884c\u8bf7\u5148</p> <pre><code>powershell -ExecutionPolicy Bypass\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned\n...\nconda init powershell\n...\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_77","title":"\u6e05\u6d01","text":"<p>https://www.jianshu.com/p/f14ac62bef99</p> <pre><code>conda clean -a\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_78","title":"\u73af\u5883","text":"<p>\u521b\u5efa\u73af\u5883\u3001\u5220\u9664\u3001\u6fc0\u6d3b\u548c\u9000\u51fa\uff0c\u5b89\u88c5\u5305</p> <pre><code>conda create -n ngs python=3.8\nconda remove -n ngs --all\nconda activate ngs\nconda deactivate\nconda install package\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#_79","title":"\u5e38\u7528\u547d\u4ee4","text":"<pre><code># to search for packages\n\nconda search [package]\n\n# To update all packages\n\nconda update --all --yes\n\n# List all packages installed\n\nconda list [-n env]\n\n# conda list environments\n\nconda env list\n\n# create new env\n\nconda create -n [name] package [package] ...\n\n# activate env\n\nconda activate [name]\n\n# deavtivate env\n\nconda deactivate\n\n# view conda configuration information\n\nconda --version\n\nconda info\u00a0\n\nconda info --envs\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E5%AD%A6%E4%B8%8D%E6%9D%A5Python/#pip","title":"pip","text":"<pre><code>pip --default-timeout=100 --no-cache-dir install matplotlib -i https://mirrors.aliyun.com/pypi/simple/\n</code></pre> <p>\u6362\u6e90\u53c2\u8003\uff1ahttps://blog.csdn.net/weixin_41524411/article/details/114191177</p> <p>\u7f13\u5b58\uff1ahttps://reality0ne.com/pip-cahce-dir/</p> <p>\u7f13\u5b58\u4fdd\u5b58\u5728\u5f53\u524d\u7528\u6237home\u4e0b\u7684.cache\u4e2d\u3002\u8981\u907f\u514dcache\u53ef\u4ee5\u7528--no-cache-dir</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/","title":"\u81ea\u5236Template","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_1","title":"\u89c4\u8303","text":"<ul> <li>\u6570\u636e\u7ed3\u6784\uff1a\u4f7f\u7528namespace+struct\u5c01\u88c5\u3002</li> <li>\u6563\u88c5\u51fd\u6570\uff1a\u4f7f\u7528namespace\u5c01\u88c5</li> <li> <p>\u65b9\u6cd5\u3001\u51fd\u6570\u524d\u4f7f\u7528\u6ce8\u91ca\u63cf\u8ff0\u529f\u80fd\u3001\u5f62\u53c2\u8bf4\u660e\u548c\u8fd4\u56de\u503c\u8bf4\u660e</p> </li> <li> <p>namespace \u6700\u5f00\u5934\u662f\u5e38\u91cf\u5b9a\u4e49\uff08\u6bd4\u5982MAXsize\u4e4b\u7c7b\u7684\uff09\uff0c\u7136\u540e\u4f7f\u7528\u7a7a\u884c\u548c\u6ce8\u91ca\u533a\u5206local\u53d8\u91cf\u548cpublic\u53d8\u91cf</p> </li> <li>\u4ec5struct\u6216namespace\u5185\u4f7f\u7528\u7684\u51fd\u6570\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934</li> <li>namespace\u4e2d\u7684\u53d8\u91cf\u540d\u4e5f\u8bf7\u4f7f\u7528\u6ce8\u91ca\u7b80\u8981\u8bf4\u660e\u53d8\u91cf\u7528\u9014</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_2","title":"\u5f85\u8ba8\u8bba","text":"<ul> <li>\u56fe\u8bba\uff1a\u90bb\u63a5\u8868\u683c\u5f0f\uff1f</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_3","title":"[\u7b97\u6cd5\u540d]","text":"<p>\u7b97\u6cd5\u63cf\u8ff0\uff1a\u8f93\u5165\u63a5\u53e3\u3001\u8fd0\u884c\u7b97\u6cd5\u9700\u8981\u7684\u64cd\u4f5c\u3001\u8f93\u51fa\u63a5\u53e3\u3001\u65f6\u95f4\u590d\u6742\u5ea6</p> Funs || Methods Reliance Description Time Complexity Inputs Outputs or Returns"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_4","title":"\u5b57\u7b26\u4e32","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#kmpold","title":"KMP(OLD)","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\nconst int N=1e6+10;\nchar a[N],b[N];\nint inext[N],f[N];\n\nvoid prenext(int n) //n: length of A \uff08\u6a21\u5f0f\u4e32\uff09\n{\n    inext[1]=0;\n    for(int i=2,j=0;i&lt;=n;i++)\n    {\n        while(j&gt;0 &amp;&amp; a[i]!=a[j+1]) j=inext[j];\n        if(a[i]==a[j+1]) j++; //extendable \n        inext[i]=j;\n    }\n}\n\nvoid match(int n,int m) //n: length of A\uff08\u6a21\u5f0f\u4e32\uff09; m: length of B \uff08\u4e3b\u4e32\uff09\n{\n    for(int i=1,j=0;i&lt;=m;i++)\n    {\n        while(j&gt;0 &amp;&amp; (j==n || b[i]!=a[j+1])) j=inext[j];\n        if(b[i]==a[j+1]) j++;\n        f[i]=j;\n\n        if(f[i]==n) //Match\n        {\n            cout&lt;&lt;i-n+1&lt;&lt;endl;\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    a[0]=b[0]='?';\n    //cin&gt;&gt;b+1&gt;&gt;a+1;\n\n    cin&gt;&gt;(a+1);\n    int la=strlen(a)-1,lb=strlen(b)-1;\n    prenext(la);\n    //match(la,lb);\n    for(int i=1;i&lt;=la;i++)\n    {\n        cout&lt;&lt;inext[i]&lt;&lt;\" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#exkmp","title":"EXKMP","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nconst int Mod=10007;\n\nnamespace EXKMP\n{\n    const int N=2e5+10;\n\n    int z[N],extend[N];\n    char a[N],b[N];\n    int a_len,b_len;\n    //z,ext:b\u4e32\u5173\u4e8e\u81ea\u5df1\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7684lcp\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u957f\u5ea6\uff0ca\u4e32\u5173\u4e8eb\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\n    //a\uff0cb\uff1a\u4e32\uff08b\u662f\u6a21\u5f0f\u4e32\uff09\n    //a_len, b_len\uff1a \u4e32\u957f\n\n    //\u6c42\u51fab\u7684z\u51fd\u6570\uff081\u53f7\u4f4d\u7f6e\u4e0d\u662f\u826f\u5b9a\u4e49\u7684\uff09\n    void get_z(char b[], int n=b_len)\n    {\n        int l=1,r=1;\n        z[1]=n; //undefined\n        for(int i=2;i&lt;=n;i++)\n        {\n            z[i]=0;\n            if(i&lt;=r)\n                z[i]=min(z[i-l+1],r-i+1);//init        \n            while (i+z[i]&lt;=n &amp;&amp; b[z[i]+1]==b[i+z[i]]) //i+z[i] is next position, so accessible pos is i+z[i]-1\n                z[i]++;\n            if(i+z[i]-1&gt;r)\n                l=i,r=i+z[i]-1;\n        }\n    }\n\n    //\u6c42\u51faa\u5173\u4e8eb\u7684ext\u6570\u7ec4\n    void exkmp(char a[],char b[],int m=a_len,int n=b_len)\n    {\n        extend[1]=0;\n        while(1+extend[1]&lt;=m &amp;&amp; a[1+extend[1]]==b[1+extend[1]]) extend[1]++;\n        int l=1,r=1;\n        for(int i=2;i&lt;=m;i++)\n        {\n            extend[i]=0;\n            if(i&lt;=r)\n                extend[i]=min(z[i-l+1],r-i+1);\n            while (i+extend[i]&lt;=m &amp;&amp; b[extend[i]+1]==a[i+extend[i]]) \n                extend[i]++;\n            if(i+extend[i]-1&gt;r)\n                l=i,r=i+extend[i]-1;\n        }\n    }\n\n}\nusing namespace EXKMP;\n\nint T;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        cin&gt;&gt;b_len;\n        cin&gt;&gt;b+1;\n        get_z(b,b_len);\n        //exkmp(a,b,a_len,b_len)\n        ll ans=0;\n        for(int i=1;i&lt;=b_len;i++)\n        {\n            // cout&lt;&lt;z[i]&lt;&lt;\"-\\n\";\n            ans=(ans+z[i])%Mod;\n        }\n        cout&lt;&lt;ans&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_5","title":"\u6700\u5c0f\u8868\u793a\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N=6e5+7;\nint n,a[N];\n\nint minimal_expression()\n{\n    int i=1,j=2;\n    while(i&lt;=n &amp;&amp; j&lt;=n)\n    {\n        int k=0;\n        for(;k&lt;n &amp;&amp; a[i+k]==a[j+k];k++);\n        if(k==n) break;\n        if(a[i+k]&gt;a[j+k])\n        {\n            i=i+k+1;\n            i+=(i==j);\n        }\n        else\n        {\n            j=j+k+1;\n            j+=(i==j);\n        }\n    }\n    return min(i,j);\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;a[i];\n        a[n+i]=a[i];\n    }\n    for(int i=minimal_expression(),j=1;j&lt;=n;i++,j++)\n    {\n        cout&lt;&lt;a[i]&lt;&lt;\" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#manacher","title":"Manacher\uff08\u5206\u5f00\u6c42\u89e3\u6cd5\uff09","text":"<pre><code>//luogu3805 \u9a6c\u62c9\u8f66 \u5206\u5f00\u6c42\u89e3\u6cd5\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\n\nnamespace Manacher\n{\n    const int N = 1.1e7 + 100;\n\n    //public\n    char s[N];\n    int len;\n    int d1[N], d2[N];\n    //s:\u539f\u5b57\u7b26\u4e32\n    //len:s\u7684\u4e32\u957f\n    //d1,d2\uff1a\u5947\u6570\u4f4d\u7f6e\uff0c\u5076\u6570\u4f4d\u7f6e\uff08\u4e24\u4e2a\u5b57\u7b26\u4e2d\u95f4\uff09\u7684\u56de\u6587\u534a\u5f84\u3002\n    //\u5bf9\u4e8ed2\uff0c\u4e0b\u6807i\u8868\u793a\u7684\u662f\u5939\u5728i~i+1\u4e4b\u95f4\u7684\u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u534a\u5f84\n\n    void get_d1()\n    {\n        d1[1] = 1;\n        int l = 1, r = 1;\n        for (int i = 2; i &lt;= len; i++)\n        {\n            int k = (i &gt; r) ? 1 : min(d1[l + r - i], r - i + 1);\n            while (1 &lt;= i - k &amp;&amp; i + k &lt;= len &amp;&amp; s[i - k] == s[i + k])\n                k++;\n            d1[i] = k;\n            if (i + k - 1 &gt; r)\n            {\n                r = i + k - 1;\n                l = i - k + 1;\n            }\n        }\n    }\n\n    void get_d2()\n    {\n        d2[0] = 0;\n        int l = 0, r = -1;\n        for (int i = 1; i &lt;= len; i++)\n        {\n            int k = (i &gt;= r) ? 0 : min(d2[l + r - i - 1], r - i);\n            while (1 &lt;= i - k &amp;&amp; i + k + 1 &lt;= len &amp;&amp; s[i - k] == s[i + k + 1])\n                k++;\n            d2[i] = k;\n            if (i + k &gt; r)\n            {\n                r = i + k;\n                l = i - k + 1;\n            }\n        }\n    }\n}\nusing namespace Manacher;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin &gt;&gt; s + 1;\n    len = strlen(s + 1);\n    get_d1();\n    get_d2();\n    int ans = 1;\n    for (int i = 1; i &lt;= len; i++)\n    {\n        ans = max(ans, d1[i] * 2 - 1);\n        ans = max(ans, d2[i] * 2);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_6","title":"\u9a6c\u62c9\u8f66\uff08\u63d2\u5165\u4e95\u53f7\u6cd5\uff09","text":"<pre><code>//luogu3805 \u9a6c\u62c9\u8f66 \u63d2\u5165\u4e95\u53f7\u6cd5\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\n\n\nconst int N=1.1e7+100;\nchar s[N],s2[N*2];\nint n,nn;\nint d1[N*2];\n\nvoid get_d1()\n{\n    nn=1;\n    s2[0]='$';\n    s2[1]='#';\n    for(int i=1;i&lt;=n;i++)\n    {\n        s2[++nn]=s[i];\n        s2[++nn]='#';\n    }\n\n    d1[1]=1;\n    int l=1,r=1;\n    for(int i=2;i&lt;=nn;i++)\n    {\n        int k=(i&gt;r)?1:min(d1[l+r-i],r-i+1);\n        while(1&lt;= i-k &amp;&amp; i+k&lt;=nn &amp;&amp; s2[i-k]==s2[i+k]) k++;\n        d1[i]=k;\n        if(i+k-1&gt;r)\n        {\n            r=i+k-1;\n            l=i-k+1;\n        }\n    }\n\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);cout.tie(0);\n    cin&gt;&gt;s+1;\n    n=strlen(s+1);\n    get_d1();\n    int ans=0;\n    for(int i=1;i&lt;=nn;i++)\n    {\n        ans=max(ans,d1[i]-1);\n    }\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#sa","title":"\u540e\u7f00\u6570\u7ec4\uff08SA\uff09","text":"<p>sa\u662f\u5b57\u7b26\u4e32s\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\u7684\u6392\u540d\u5230\u5b57\u7b26\u4e32s\u4e2d\u7684\u4e0b\u6807\u7684\u6620\u5c04\u6570\u7ec4\u3002rk\u662f\u6bcf\u4e00\u4e2a\u540e\u7f00\u7684\u4e0b\u6807\u5230\u6392\u540d\u7684\u6620\u5c04\u6570\u7ec4\u3002ht\u662f\u7b2ci\u540d\u548c\u7b2ci-1\u540d(\u6ce8\u610f\u662f\u6392\u540d)\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u3002</p> <p>\u8f93\u5165\u5b57\u7b26\u4e32s\u548c\u957f\u5ea6len\uff0c\u8c03\u7528get_sa\u548cget_ht\uff0c\u5f97\u5230\u7684sa\u3001rk\u3001ht\u6570\u7ec4\u3002</p> Funs || Methods Reliance Time Complexity Inputs Outputs Description get_sa nlogn \u8f93\u5165s\u7684\u957f\u5ea6len\uff1b\u5b57\u7b26\u4e32s\u3002 \u4fee\u6539sa\u3001rk\u6570\u7ec4\u4f5c\u4e3a\u8f93\u51fa\u3002 \u5f97\u5230\u540e\u7f00\u6570\u7ec4sa\u3001rk get_ht get_sa n \u8f93\u5165s\u7684\u957f\u5ea6len\uff1b\u6570\u7ec4sa\u548cht\u3002 \u4fee\u6539\u6570\u7ec4ht\u4f5c\u4e3a\u8f93\u51fa\u3002 \u5f97\u5230\u540e\u7f00\u6570\u7ec4ht <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\n\n//\u540e\u7f00\u6570\u7ec4\uff1a\u8f93\u5165\u5b57\u7b26\u4e32s\u548c\u5176\u957f\u5ea6len\uff0c\u6267\u884cget_sa\u3001get_ht\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u7684sa\u3001rk\u3001ht\u6570\u7ec4\u3002\u590d\u6742\u5ea6nlogn\u3002\nnamespace SA\n{\n    const int N = 1e6 + 5 , M=300; //N\uff1a\u957f\u5ea6\u4e0a\u9650 M\uff1a\u5b57\u7b26\u96c6\u5927\u5c0f\n    //public\n    char s[N]; //s:\u5b57\u7b26\u4e32\n    int len;  //len:\u7684\u957f\u5ea6\n    int sa[N],rk[N],ht[N]; //sa\u3001rk\u3001ht\u6570\u7ec4\n    //sa: \u6392\u540d -&gt; \u4e0b\u6807\n    //rk: \u4e0b\u6807 -&gt; \u6392\u540d\n\n    //local\n    int oldrk[N * 2], id[N], px[N], cnt[N];\n    //id: (\u6309\u7b2c\u4e8c/\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\u540e\u7684)\u6392\u540d-&gt;\u4e0b\u6807(\u4e34\u65f6\u6570\u7ec4)\n    //px: rk[id[i]], \u5728\u6309\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\u65f6,\u7b49\u4ef7\u4e8e\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u540d-&gt;\u4e0b\u6807-&gt; w-1\u65f6\u8be5\u4e0b\u6807\u5904\u7684\u6392\u540d\n    //ht: height\u6570\u7ec4\n\n    //\u5224\u65ad\u65e7rk\u6570\u7ec4\u4e2d\u5bf9\u5e94\u7684\u4e24\u4e2a\u4f4d\u7f6ex\u3001y\u4ee5\u53cax+w\u3001y+w\u662f\u5426\u76f8\u7b49\n    bool __is_equal(int x, int y, int w)\n    {\n        return oldrk[x] == oldrk[y] &amp;&amp; oldrk[x + w] == oldrk[y + w];\n    }\n\n    //\u8f93\u5165s\u7684\u957f\u5ea6len\uff0c\u4fee\u6539sa\u6570\u7ec4\u4f5c\u4e3a\u8f93\u51fa\n    void get_sa(int len = len)\n    {\n        //\u8ba1\u6570\u6392\u5e8f\n        //\u7b2c\u4e00\u6b21\u6392\u5e8f\uff08w=0\uff09\n        int m = M, p = 0;\n        for (int i = 1; i &lt;= len; i++)\n            cnt[rk[i] = s[i]]++;\n        for (int i = 1; i &lt;= m; i++)\n            cnt[i] += cnt[i - 1]; //\u524d\u7f00\u548c\n        for (int i = len; i &gt;= 1; i--)\n            sa[cnt[rk[i]]--] = i;\n\n        for (int w = 1; w &lt; len; w &lt;&lt;= 1, m = p)\n        {\n            p = 0;\n            for (int i = len; i &gt; len - w; i--) //\u7b2c\u4e8c\u5173\u952e\u5b57\u65e0\u7a77\u5c0f\u7684\u5148\u653e\n            {\n                id[++p] = i;\n            }\n            for (int i = 1; i &lt;= len; i++)\n                if (sa[i] &gt; w)\n                    id[++p] = sa[i] - w; // i:\u6392\u540d, sa[i]:\u4e0b\u6807, sa[i]-w \u4e0b\u6807\u504f\u79fb\n            //\u8fd9\u91ccsa\u662fw-1\u65f6\u7684,\u56e0\u6b64sa\u770b\u4f5c\u662fw\u65f6\u7684\u7b2c\u4e8c\u5173\u952e\u5b57\u7684\u6392\u540d-&gt;\u4e0b\u6807\u6620\u5c04,\u5219sa[i]-w\u662f\u6b64\u65f6\u7b2c\u4e00\u5173\u952e\u5b57\u7684\u4e0b\u6807\n            //id\u4e0d\u518d\u8fd4\u5b58\u56desa\u6570\u7ec4\u4e2d\n            memset(cnt, 0, sizeof(cnt));\n            for (int i = 1; i &lt;= len; i++)\n                cnt[px[i] = rk[id[i]]]++;\n            for (int i = 1; i &lt;= m; i++)\n                cnt[i] += cnt[i - 1];\n            for (int i = len; i &gt;= 1; i--)\n                sa[cnt[px[i]]--] = id[i];\n            memcpy(oldrk, rk, sizeof(rk));\n            p = 0;\n            for (int i = 1; i &lt;= len; i++)\n            {\n                rk[sa[i]] = __is_equal(sa[i], sa[i - 1], w) ? p : ++p;\n            }\n        }\n    }\n\n    //(get_sa)\u5f97\u5230\u540e\u7f00\u6570\u7ec4ht\uff1a\u8f93\u5165s\u7684\u957f\u5ea6len\u3001\u6570\u7ec4sa\u548cht\uff0c\u4fee\u6539\u6570\u7ec4ht\u4e3a\u7ed3\u679c\n    void get_ht(int len=len)\n    {\n        int k = 0; //\u4e0a\u4e00ht\u503c\n        for (int i = 1; i &lt;= len; i++)\n        {\n            if (k)\n                k--;                                 // k&gt;=0\n            while (s[i + k] == s[sa[rk[i] - 1] + k]) //\u6839\u636e\u5b9a\u4e49\u66b4\u529b\u6c42\n            {\n                k++;\n            }\n            ht[rk[i]] = k;\n        }\n    }\n} // namespace SA\n\nusing namespace SA;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    cin &gt;&gt; s + 1;\n    len = strlen(s + 1);\n    get_sa();\n    get_ht();\n    for (int i = 1; i &lt;= len; i++)\n        cout &lt;&lt; sa[i] &lt;&lt; \" \";\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_7","title":"\u5f8c\u7db4\u81ea\u52d5\u6a5f","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32S,\u8bf7\u4f60\u6c42\u51fa S \u7684\u6240\u6709\u51fa\u73b0\u6b21\u6570\u4e0d\u4e3a 1 \u7684\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u4e58\u4e0a\u8be5\u5b50\u4e32\u957f\u5ea6\u7684\u6700\u5927\u503c\u3002</p> <pre><code>//luogu 3804\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;memory.h&gt;\n#include &lt;cstring&gt;\n#include &lt;queue&gt;\nusing namespace std;\nconst int N=2e6+5;\nstruct SAM_NODE\n{\n    int inext[26],len,link,siz;\n}sam[N];\nint total,last;\nchar s[N];\nint len;\n\nvoid sam_init()\n{\n    sam[0].len=sam[0].siz=0;\n    sam[0].link=-1;\n    memset(sam[0].inext,0,sizeof(sam[0].inext));\n    total=last=0;\n}\n\nvoid sam_extend(char c)\n{\n    int cur=++total,cc=c-'a';\n    sam[cur].len=sam[last].len+1;\n    int p=last;\n    while (p!=-1 &amp;&amp; !sam[p].inext[cc])\n    {\n        sam[p].inext[cc]=cur;//\u8fd8\u6ca1\u6709\u5230\u5b57\u7b26c\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u5c31\u6dfb\u52a0\u4e00\u4e2a\u5230\u72b6\u6001c\u7684\u8f6c\u79fb\n        p=sam[p].link;\n    }\n    if(p==-1)//\u672a\u627e\u5230\u73b0\u6709\u8f6c\u79fb\n        sam[cur].link=0;\n    else//\u5df2\u7ecf\u627e\u5230\u73b0\u6709\u8f6c\u79fb\n    {\n        int q=sam[p].inext[cc];\n        if(sam[p].len+1==sam[q].len)//\u8fde\u7eed\u8f6c\u79fb\n            sam[cur].link=q;\n        else//\u4e0d\u8fde\u7eed\u8f6c\u79fb\n        {\n            int clone=++total;\n            sam[clone].len=sam[p].len+1;\n            memcpy(sam[clone].inext,sam[q].inext,sizeof(sam[q].inext));\n            sam[clone].link=sam[q].link;\n            while (p!=-1 &amp;&amp; sam[p].inext[cc]==q)\n            {\n                sam[p].inext[cc]=clone;\n                p=sam[p].link;\n            }\n            sam[q].link=sam[cur].link=clone;\n        }\n    }\n    last=cur;\n    sam[cur].siz=1; // \u6807\u8bb0\u7ec8\u70b9\u8282\u70b9\n}\n\nvoid sam_marksuf()\n{\n    int p=last;\n    while (p!=-1)\n    {\n        //...\u5411\u6807\u8bb0\u6570\u7ec4\u5199\u5165\n        p=sam[p].link;\n    }\n}\n\nvoid sam_traverse(int x=0)//\u8c03\u8bd5\u7528\uff0c\u8f93\u51fasam\u7ed3\u6784\n{\n    cout&lt;&lt;x&lt;&lt;\":\";\n    for(int i=0;i&lt;26;i++)\n    {//\u8f6c\u79fb\u5b57\u7b26 \u6807\u53f7\n        if(sam[x].inext[i]) cout&lt;&lt;(char)('a'+i)&lt;&lt;sam[x].inext[i]&lt;&lt;\" \";\n    }\n    cout&lt;&lt;endl;\n    for(int i=0;i&lt;26;i++)\n        if(sam[x].inext[i]) sam_traverse(sam[x].inext[i]);\n}\n\nvoid sam_tr_suftree()//\u8c03\u8bd5\u7528\uff0c\u8f93\u51fa\u540e\u7f00\u94fe\u63a5\u6811\u7ed3\u6784\n{\n    //\u4ece\u53f6\u5b50\u5230\u6839\n    for(int i=1;i&lt;=total;i++)\n    {\n        if(sam[i].siz)\n        {\n            int p=i;\n            while (p!=-1)\n            {\n                cout&lt;&lt;p&lt;&lt;\" \";\n                p=sam[p].link;\n            }\n            cout&lt;&lt;endl;\n        }\n    }\n}\n\nlong long ans=0;\nint deg[N];\nvoid get_size()//\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cbbfs\uff0c\u7d2f\u52a0siz\uff0c\u975e\u53f6\u5b50\u8282\u70b9\u7684siz\u503c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7ec8\u70b9\u96c6\u5408\u5927\u5c0f\uff0c\u4e5f\u5373\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u6700\u957f\u4e32\u51fa\u73b0\u7684\u6b21\u6570\n{\n    queue&lt;int&gt; q;\n    for(int i=1;i&lt;=total;i++)\n    {\n        deg[sam[i].link]++;\n        /*bool flag=true;\n        for(int j=0;j&lt;26;j++)\n            if(sam[i].inext[j]) {flag=false;break;}\n        if(flag) q.push(i);*/ //\u5144\u554a\u8fd9\u4e48\u5199\u6839\u672c\u548clink\u6ca1\u5173\u7cfb\u554a\uff01\n    }\n    for(int i=1;i&lt;=total;i++)\n        if(deg[i]==0) q.push(i);\n    while (q.size())\n    {\n        int x=q.front();\n        q.pop();\n        sam[sam[x].link].siz+=sam[x].siz;\n        deg[sam[x].link]--;\n        if(deg[sam[x].link]==0) q.push(sam[x].link);\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;s+1;\n    len=strlen(s+1);\n    sam_init();\n    for(int i=1;i&lt;=len;i++)\n        sam_extend(s[i]);\n    //sam_traverse(0);\n    //sam_tr_suftree();\n    get_size();\n    for(int i=1;i&lt;=total;i++)\n        if(sam[i].siz&gt;=2) ans=max(ans,(long long)sam[i].siz*sam[i].len);\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_8","title":"\u5b57\u7b26\u4e32\u5468\u671f\uff1f","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#2017-2018-acm-icpc-asia-daejeon-regional-contest","title":"2017-2018 ACM-ICPC, Asia Daejeon Regional Contest","text":"<p>\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a\\(n\\)\u7684\u5e8f\u5217\\(a_i\\)\uff0c\u8fd9\u4e2a\u5e8f\u5217\u7b2c\\(k+1\\)\u8d77\u5230\u6700\u540e\u662f\u82e5\u5e72\u4e2a\u5faa\u73af\uff0c\u5468\u671f\u4e3a\\(p\\)\uff0c\u6700\u540e\u4e00\u4e2a\u5faa\u73af\u53ef\u4ee5\u4e0d\u5b8c\u6574\u3002\u6c42\\(k+p\\)\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\\(k, p\\)\u3002</p> <p>solution \u5c06\u5e8f\u5217\\(a_i\\)\u7ffb\u8f6c\uff0c\u505a\u4e00\u6b21\\(KMP\\)(\\(fail[i]\\))\uff0c\u679a\u4e3e\\(k+1\\)\u7684\u4f4d\u7f6e\\(i\\)\uff0c\u5219\u5468\u671f\\(p=i-fail[i], k=n-i\\)\u3002\u66f4\u65b0\u7b54\u6848\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n;\nint a[1000010];\nint nnext[1000010];\nint k=10000000,p=10000000;\nvoid cal_next()\n{\n    nnext[1]=0;\n    for(int i=2, j=0; i&lt;=n; i++)\n    {\n        while(j&gt;0 &amp;&amp; a[i]!=a[j+1]) j=nnext[j];\n\n        if(a[j+1]==a[i])\n            j++;\n        nnext[i]=j;\n\n    }\n}\n\n\nint main()\n{\n    cin&gt;&gt;n;\n    for(int i=n; i&gt;=1; i--)\n        scanf(\"%d\",&amp;a[i]);\n\n    cal_next();\n\n    for(int i=1;i&lt;=n;i++)\n    {\n        int tempk=n-i,tempp=i-nnext[i]+1;\n        if(tempk+tempp&lt;k+p)\n        {\n            k=tempk;\n            p=tempp;\n        }\n    }\n\n    cout&lt;&lt;k&lt;&lt;\" \"&lt;&lt;p-1;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#2021-ccpc-f","title":"2021 CCPC \u5973\u751f\u8d5b F","text":"<p>\u4e0d\u96be\u53d1\u73b0\u884c\u4e0e\u5217\u662f\u4e24\u4e2a\u72ec\u7acb\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u6c42\u51fa\u884c\u7684\u6700\u77ed\u5faa\u73af\u8282\u7684\u957f\u5ea6\uff0c\u518d\u6c42\u51fa\u5217\u7684 \u6700\u77ed\u5faa\u73af\u8282\u7684\u957f\u5ea6\uff0c\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002 \u4ee5\u884c\u4e3a\u4f8b\uff0c\u9996\u5148\u901a\u8fc7 Hash \u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u7ef4\u95ee\u9898\u3002\u4e00\u7ef4\u95ee\u9898\u5219\u662f\u7ecf\u5178\u95ee\u9898\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u957f \u5ea6\u4e3a n \u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e3a d \u7684\u524d\u7f00\u662f\u5faa\u73af\u8282\u5f53\u4e14\u4ec5\u5f53\u957f\u5ea6\u4e3a n \u2212 d \u7684\u524d\u540e\u7f00\u76f8\u7b49\uff0c\u56e0\u6b64\u9700\u8981\u627e\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6700\u957f\u7684\u524d\u7f00\uff0c\u6ee1\u8db3\u8be5\u524d\u7f00\u4e5f\u662f\u8be5\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u3002\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 d \u7136\u540e\u4f7f\u7528Hash O(1) \u5224\u65ad\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528 KMP \u7b97\u6cd5\u6c42\u51fa nxt \u6570\u7ec4\uff0c\u7b54\u6848\u5373\u4e3a n \u2212 nxt[n]\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2 + qn)\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring a[2010];\n\nconst int P=131;\nlong long p[2010];\nlong long hashrow[2010][2010],hashcol[2010][2010];\n\nlong long drow[2010],dcol[2010];\nint n,q;\n\nint nex[2010];\nvoid getnex(long long s[],long long len)\n{\n    int i=0;\n    int j=-1;\n    nex[0]=-1;\n    while(i&lt;len)\n    {\n        if(j==-1||s[i]==s[j])\n        {\n            i++;\n            j++;\n            nex[i]=j;\n        }\n        else\n            j=nex[j];\n    }\n}\n\n\nint main()\n{\n    cin&gt;&gt;n&gt;&gt;q;\n    for(int i=1; i&lt;=n; i++)\n    {\n        cin&gt;&gt;a[i];\n        a[i]=\" \"+a[i];\n    }\n\n    p[0]=1;\n    for(int i=1; i&lt;=n; i++) p[i]=p[i-1]*P;\n\n    for(int i=1; i&lt;=n; i++)\n    {\n        for(int j=1; j&lt;=n; j++)\n        {\n            hashrow[i][j]=hashrow[i-1][j]*P+a[i][j]-'a';\n            hashcol[i][j]=hashcol[i][j-1]*P+a[i][j]-'a';\n        }\n    }\n\n    for(int t=1; t&lt;=q; t++)\n    {\n        long long x1,y1,x2,y2;\n        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;\n        long long ans1=0,ans2=0;\n\n        for(int j=y1; j&lt;=y2; j++)\n            drow[j-y1]=hashrow[x2][j]-hashrow[x1-1][j]*p[x2-x1+1],nex[j-y1]=0;\n        getnex(drow,y2-y1+1);\n        ans1=y2-y1+1-nex[y2-y1+1];\n        for(int i=x1; i&lt;=x2; i++)\n            dcol[i-x1]=hashcol[i][y2]-hashcol[i][y1-1]*p[y2-y1+1],nex[i-x1]=0;\n        getnex(dcol,x2-x1+1);\n        ans2=x2-x1+1-nex[x2-x1+1];\n\n        cout&lt;&lt;ans1*ans2&lt;&lt;endl;  \n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#ac","title":"AC \u81ea\u52a8\u673a","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#luogu-3796-ac","title":"luogu 3796 AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09","text":"<p>\u6709N\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u6a21\u5f0f\u4e32\u4ee5\u53ca\u4e00\u4e2a\u6587\u672c\u4e32 T\u3002\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u53ef\u80fd\u4f1a\u5728\u6587\u672c\u4e32\u4e2d\u51fa\u73b0\u591a\u6b21\u3002\u4f60\u9700\u8981\u627e\u51fa\u54ea\u4e9b\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32 T \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u6700\u591a\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;memory.h&gt;\n#include &lt;queue&gt;\nusing namespace std;\nconst int N=1e6+10;\nint n;\nchar s[151][100],t[N];\nint trie[N][26],total,id[N],fail[N],last[N];\nint cnt[N];\n\nvoid insert(char *s,int num)\n{\n    int u=0;\n    for(int i=1;s[i];i++)\n    {\n        int x=s[i]-'a';\n        if(!trie[u][x]) trie[u][x]=++total;\n        u=trie[u][x];\n    }\n    id[u]=num;\n}\n\nvoid build()\n{\n    queue&lt;int&gt; q;\n    for(int i=0;i&lt;26;i++)\n    {\n        if(trie[0][i]) q.push(trie[0][i]);\n    }\n    while (q.size())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=0;i&lt;26;i++)\n        {\n            if(trie[u][i])\n            {\n                fail[trie[u][i]]=trie[fail[u]][i];\n                last[trie[u][i]]=(id[fail[trie[u][i]]]==0)?(last[fail[trie[u][i]]]):(fail[trie[u][i]]); //\u6709\u6548\u5b57\u7b26\u4e32\u7ed3\u5c3e\n                q.push(trie[u][i]);\n            }\n            else trie[u][i]=trie[fail[u]][i];\n        }\n    }\n}\n\nvoid query(char *s)\n{\n    int u=0;\n    for(int i=1;s[i];i++)\n    {\n        int x=s[i]-'a';\n        u=trie[u][x];\n        for(int j=u;j;j=last[j])\n        {\n            cnt[id[j]]++;\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    while (cin&gt;&gt;n &amp;&amp; n)\n    {\n        memset(trie,0,sizeof(trie));\n        memset(fail,0,sizeof(fail));\n        memset(last,0,sizeof(last));\n        memset(cnt,0,sizeof(cnt));\n        memset(id,0,sizeof(id));\n        for(int i=1;i&lt;=n;i++)\n        {\n            cin&gt;&gt;s[i]+1;\n            insert(s[i],i);\n        }\n        build();\n        cin&gt;&gt;t+1;\n        query(t);\n        int ans=0;\n        for(int i=1;i&lt;=n;i++)\n        {\n            ans=max(ans,cnt[i]);\n        }\n        cout&lt;&lt;ans&lt;&lt;endl;\n        for(int i=1;i&lt;=n;i++)\n            if(ans==cnt[i]) cout&lt;&lt;s[i]+1&lt;&lt;endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_9","title":"\u4e8c\u6b21\u52a0\u5f3a\u7248","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6587\u672c\u4e32 S \u548c n \u4e2a\u6a21\u5f0f\u4e32 T_{1..n}\uff0c\u8bf7\u4f60\u5206\u522b\u6c42\u51fa\u6bcf\u4e2a\u6a21\u5f0f\u4e32 T_i\u5728 S \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u8be6\u7ec6\u8bf4\u660e\u89c1OI\u6742\u7b14\u8bb0</p> <pre><code>//\u4e8c\u6b21\u52a0\u5f3a\u7248\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;queue&gt;\nusing namespace std;\nconst int N=2e5+1,M=2e6+10;\nint n;\nchar s[N],t[M];\nint trie[M/2][26],total,fail[M/2];\nint id[M/2],node_[N]; //\u7ed3\u70b9\u548c\u5b57\u7b26\u4e32\u7f16\u53f7\u7684\u6620\u5c04\nint delta[M/2],sum[M/2];//\u6811\u4e0a\u5dee\u5206\u6570\u7ec4\uff0c\u5dee\u5206\u6c42\u548c\n\nstruct E\n{\n    int to,inext;\n}edge[M/2];\nint head[M/2],e_total;\n\nvoid adde(int x,int y)\n{\n    edge[++e_total].to=y;\n    edge[e_total].inext=head[x];\n    head[x]=e_total;\n}\n\nvoid insert(char *s,int num)\n{\n    int u=0;\n    for(int i=1;s[i];i++)\n    {\n        int x=s[i]-'a';\n        if(!trie[u][x]) trie[u][x]=++total; //!!\n        u=trie[u][x];\n    }\n    if(!id[u]) id[u]=num;\n    node_[num]=u;\n}\n\nvoid build()\n{\n    queue&lt;int&gt; q;\n    for(int i=0;i&lt;26;i++)\n    {\n        if(trie[0][i]) q.push(trie[0][i]);\n    }\n    while (q.size())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=0;i&lt;26;i++)\n        {\n            if(trie[u][i])\n            {\n                fail[trie[u][i]]=trie[fail[u]][i];\n                q.push(trie[u][i]);\n            }\n            else\n            {\n                trie[u][i]=trie[fail[u]][i];\n            }\n        }\n    }\n    for(int i=1;i&lt;=total;i++)\n    {\n        adde(fail[i],i);\n    }\n}\n\nvoid traverse(char *s)\n{\n    int u=0;\n    for(int i=1;s[i];i++)\n    {\n        int x=s[i]-'a';\n        u=trie[u][x];\n        delta[u]++;\n    }\n}\n\nvoid dfs(int u=0)\n{\n    sum[u]=delta[u];\n    for(int e=head[u];e;e=edge[e].inext)\n    {\n        int y=edge[e].to;\n        dfs(y);\n        sum[u]+=sum[y];\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;s+1;\n        insert(s,i);\n    }\n    build();\n    cin&gt;&gt;t+1;\n    traverse(t);\n    dfs(0);\n    for(int i=1;i&lt;=n;i++)\n    {\n        cout&lt;&lt;sum[node_[i]]&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_10","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#dp","title":"\u2b50\u51e0\u79cd\u5f62\u6001\u7684\u6570\u4f4dDP","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#1","title":"\u5f62\u614b1\uff1a\u8a18\u61b6\u5316\u641c\u7d22","text":"<pre><code>    //CFED50 C classy_numbers\n//\u984c\u610f\uff1a\u6c42\u89e3L~R\u5167\uff0c\u5341\u9032\u5236\u8868\u793a\u4e0b\u4e0d\u8d85\u904e3\u500b\u6578\u662f\u975e0\u6578\u7684\u500b\u6578\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 2e5 + 10;\n\n//from left to right, the pos-th digit (start from 1)\nint s[30], n;\nvoid getdigit(ll R)\n{\n    if (R == 0)\n    {\n        n = 1;\n        s[1] = 0;\n        return;\n    }\n    n = log10(R) + 1;\n    for (int i = n; i &gt;= 1; i--)\n    {\n        s[i] = R % 10;\n        R /= 10;\n    }\n}\n\n//1~n\nll dp[21][4][2]; //pos,cnt,limit\nll dfs(int pos, int cnt, int limit)\n{\n    if (pos == n + 1)\n    {\n        return dp[pos][cnt][limit] = 1;\n    }\n    if (cnt == 3)\n    {\n        return dp[pos][cnt][limit] = 1;\n    }\n\n    if (dp[pos][cnt][limit] != -1)\n        return dp[pos][cnt][limit];\n\n    ll ans = 0;\n    if (limit)\n    {\n        for (int d = 0; d &lt;= s[pos]; d++)\n        {\n            ans += dfs(pos + 1, cnt + (d &gt; 0), (d == s[pos]));\n        }\n    }\n    else\n    {\n        for (int d = 0; d &lt;= 9; d++)\n        {\n            ans += dfs(pos + 1, cnt + (d &gt; 0), 0);\n        }\n    }\n    return dp[pos][cnt][limit] = ans;\n}\n\nint T;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    cin &gt;&gt; T;\n    for (int _ = 1; _ &lt;= T; _++)\n    {\n        ll L, R;\n        cin &gt;&gt; L &gt;&gt; R;\n        getdigit(R);\n        memset(dp, -1, sizeof(dp));\n        ll Rans = dfs(1, 0, 1);\n\n        getdigit(L - 1);\n        memset(dp, -1, sizeof(dp));\n        ll Lans = dfs(1, 0, 1);\n        cout &lt;&lt; Rans - Lans &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#2","title":"\u5f62\u60012 \u8bd5\u586b\u6cd5","text":"<p>\u4e0d\u898162\uff1a\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u6570\uff0c\u95ee\u5f53\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u662f\u5e26\u6709\u8fde\u7eed62\u7684 <pre><code>#include &lt;iostream&gt;\n#include &lt;memory.h&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint f[10][10];\n\nvoid init()\n{\n    memset(f,0,sizeof(f));\n    for(int k=0;k&lt;=9;k++)\n    {\n        if(k!=4) f[1][k]=1;\n    }\n    for(int i=2;i&lt;=7;i++)\n    {\n        for(int j=0;j&lt;=9;j++)\n        {\n            if(j!=4)\n            {\n                for(int k=0;k&lt;=9;k++)\n                {\n                    if(j!=6 ||(j==6 &amp;&amp; k!=2))\n                    {\n                        f[i][j]+=f[i-1][k];\n                    }\n                }\n            }\n        }\n    }\n}\n\nint take_bit(int x,int i)\n{\n    if(log10(x)+1&lt;i) return -10;//no exist\n    for(int j=1;j&lt;=i-1;j++) x/=10;\n    return x%=10;\n}\n\nint fill(int x)\n{\n    if(x&lt;=0) return 0;\n    int ans=0;\n    for(int i=log10(x);i&gt;=1;i--)\n    {\n        for(int j=1;j&lt;=9;j++) if(j!=4)ans+=f[i][j];\n    }\n\n    for(int i=log10(x)+1;i&gt;=1;i--)\n    {\n        for(int j=((i==(int)(log10(x)+1))?1:0);(j&lt;take_bit(x,i) ||(i==1 &amp;&amp; j&lt;=take_bit(x,i)));j++)\n        {\n            if(j==4) continue;\n            if(take_bit(x,i+1)==6 &amp;&amp; j==2) continue;\n            if(i&gt;=2)\n            {\n                for(int k=0;k&lt;=9;k++)\n                {\n                    if(k==4) continue;\n                    if(j==6 &amp;&amp; k==2) continue;\n                    ans+=f[i-1][k];\n                }\n            }\n            else\n            {\n                ans++;\n            }\n\n        }\n        if(take_bit(x,i)==4) break;\n        if(take_bit(x,i+1)==6 &amp;&amp; take_bit(x,i)==2) break;\n    }\n    return ans;\n}\n\nint main()\n{\n    int n,m;\n    init();\n    while(1)\n    {\n        cin&gt;&gt;n&gt;&gt;m;\n        if(n==0 &amp;&amp; m==0) break;\n        cout&lt;&lt;fill(m)-fill(n-1)&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre></p> <p>\u9b54\u9b3c\u6570 <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nlong long f[30][4];//f[i][0|1|2]:not beastly number; f[i][3];is beastly number\n\nvoid init()\n{\n    f[0][0]=1;\n    for(int i=1;i&lt;=20;i++)\n    {\n        f[i][0]=9*(f[i-1][0]+f[i-1][1]+f[i-1][2]);\n        f[i][1]=f[i-1][0];\n        f[i][2]=f[i-1][1];\n        f[i][3]=10*f[i-1][3]+f[i-1][2];\n    }\n}\n\nint main()\n{\n    init();\n    int t;\n    cin&gt;&gt;t;\n    while(t--)\n    {\n        long long x,cnt=0,bit=1;\n        cin&gt;&gt;x;\n        while(f[bit][3]&lt;x) bit++;//find out how many bit it have\n        for(int i=bit,k=0;i&gt;=1;i--)\n        {\n            for(int j=0;j&lt;=9;j++)\n            {\n                int tempcnt=0;\n                tempcnt+=f[i-1][3];\n                if(j==6 &amp;&amp; k&gt;=0) tempcnt+=f[i-1][2];\n                if(j==6 &amp;&amp; k&gt;=1) tempcnt+=f[i-1][1];\n                if(j==6 &amp;&amp; k&gt;=2) tempcnt+=f[i-1][0];\n                if(j!=6 &amp;&amp; k&gt;=3) tempcnt+=(f[i-1][2]+f[i-1][1]+f[i-1][0]);\n\n                if(cnt+tempcnt&lt;x) cnt+=tempcnt;\n                else\n                {\n                    cout&lt;&lt;j;\n                    if(k&lt;3)\n                    {\n                        if(j==6) k++;\n                        else k=0;\n                    }\n                    break;\n                }\n\n            }\n        }\n        cout&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre></p> <p>\u6708\u4e4b\u8c1c\uff08\u540c\u7c7b\u5206\u5e03\uff09 <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\nusing namespace std;\n\n// f[\u6a21][\u5269\u4f59\u6570\u5b57\u6570\u76ee][\u5269\u4f59\u6570\u5b57\u7684\u548c][\u5269\u4f59\u4f4d\u7684\u6a21] = \u5408\u6cd5\u65b9\u6848\u6570 \n// f[S][i][j][k] = \u2211(f[S][i - 1][j - R][(k - pwr[i - 1] * R) mod S], 0\u2264R\u22649) \n// \u8fb9\u754c\u6761\u4ef6 F[S][0][0][0] = 1 \n\nint f[82][10][82][82], pwr[82][10];\ninline int modabs (int a, int mod) { return ((a % mod) + mod) % mod; }\nint num[10];\nint count (int p, int sum, int mod, int s, bool e)\n{\n    if (s - sum &lt; 0) return 0;\n    else if (!e) return f[s][p + 1][s - sum][(s - mod) % s];\n    else if (p == -1)\n    {\n        if (sum == s &amp;&amp; mod == 0) return 1;\n        else return 0;\n    }\n    else\n    {\n        int res = 0;\n        for (int d = 0; d &lt;= num[p]; d++)\n            res += count(p - 1, sum + d, (mod + pwr[s][p] * d) % s, s, d == num[p]);\n        return res;\n    }\n}\nint fcount (int tt)\n{\n    if (tt == 0) return 0;\n    int maxp = 0;\n    while (tt) num[maxp++] = tt % 10, tt /= 10;\n    int res = 0;\n    for (int i = 1; i &lt;= 81; i++) res += count(maxp - 1, 0, 0, i, true);\n    return res;\n}\nint main ()\n{\n    freopen(\"mystery.in\", \"r\", stdin);\n    freopen(\"mystery.out\", \"w\", stdout);\n    for (int s = 1; s &lt;= 81; s++)\n    {\n        memset(f[s], 0, sizeof f[s]);\n        f[s][0][0][0] = 1;\n        pwr[s][0] = 1 % s;\n        for (int i = 1; i &lt;= 9; i++) pwr[s][i] = (pwr[s][i - 1] * 10) % s;\n        for (int i = 1; i &lt;= 9; i++)\n        {\n            for (int j = 0; j &lt;= i * 9; j++)\n            {\n                for (int k = 0; k &lt;= s; k++)\n                {\n                    for (int d = 0; d &lt;= 9 &amp;&amp; j - d &gt;= 0; d++)\n                        f[s][i][j][k] += f[s][i - 1][j - d][modabs(k - pwr[s][i - 1] * d, s)];\n                }\n            }\n        }\n    }\n    int l, r; while (scanf(\"%d %d\", &amp;l, &amp;r) == 2) printf(\"%d\\n\", fcount(r) - fcount(l - 1));\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_11","title":"\u60ac\u7ebf\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#klargest-common-submatrix","title":"K.Largest Common Submatrix","text":"<p>(2019\u94f6\u5ddd\u533a\u57df\u8d5bK\u9898 by hqh)</p> <p>\u9898\u610f:\u7ed9\u4e24\u4e2anm(1000\u4ee5\u5185)\u7684\u77e9\u9635,\u95ee\u8fd9\u4e24\u4e2a\u77e9\u9635\u7684\u6700\u5927\u5b50\u77e9\u9635\u5927\u5c0f,\u5355\u4e2a\u77e9\u9635\u5185\u5143\u7d20\u4e24\u4e24\u4e0d\u540c,\u4e14\u90fd\u57281~nm\u5185.</p> <p>\u89e3\u6cd5:\u5148\u5efa\u7acb\u4e24\u4e2a\u77e9\u9635\u5143\u7d20\u4e4b\u95f4\u7684\u4f4d\u7f6e\u6620\u5c04(\u7528\u4e2a\u6570\u7ec4\u4e4b\u7c7b\u7684\u4fdd\u5b58). \u7136\u540e\u4f7f\u7528\u60ac\u7ebf\u6cd5(https://oi-wiki.org/misc/hoverline/),\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e(i,j)\u6211\u4eec\u5047\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u6709\u4e2a\u7ad6\u76f4\u60ac\u7ebf(\u6709\u9ad8\u5ea6\u548c\u5de6\u53f3\u6269\u5c55\u6700\u5927\u8ddd\u79bb\u7b49\u4fe1\u606f),\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u6807\u662f\u8ba9\u60ac\u7ebf\u9ad8\u5ea6\u7b49\u4e8e\u8fd9\u4e00\u5217\u80fd\u6269\u5c55\u7684\u6700\u5927\u9ad8\u5ea6\u7684\u60c5\u51b5\u4e0b,\u8ba9\u60ac\u7ebf\u5411\u5de6\u6216\u8005\u5411\u53f3\u6269\u5c55\u7684\u8ddd\u79bb\u5c3d\u53ef\u80fd\u5927.\u80fd\u6269\u5c55\u5f53\u4e14\u4ec5\u5f53a\u77e9\u9635\u4e2d\u5bf9\u5e94\u7684\u67d0\u4e2a\u6570x\u5728b\u77e9\u9635\u4e2d\u5bf9\u5e94\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e5f\u7b26\u5408\u8981\u6c42.</p> <p>\u4f8b\u5982\u77e9\u9635</p> <p>a=</p> <p>5 6 1</p> <p>7 9 3</p> <p>2 4 8</p> <p>b=</p> <p>1 2 3</p> <p>4 5 6</p> <p>8 7 9</p> <p>a\u4e2d\u76847\u5bf9\u5e94b\u4e2d(3,2)\u4f4d\u7f6e,\u5047\u8bbe7\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u60ac\u7ebf\u521d\u59cb\u9ad8\\\u5de6\\\u53f3\u6269\u5c55\u6700\u5927\u4f4d\u7f6e\u5206\u522b\u662fh=1 l=1 \\r=1;\u5148\u66f4\u65b0\u9ad8\u5ea6,a\u4e2d5\u57287\u7684\u4e0a\u9762,b\u4e2d\u4e5f\u662f\u5982\u6b64,\u56e0\u6b64\u9ad8\u5ea6\u4e3a2.\u6b64\u65f6\u4e0d\u80fd\u518d\u6269\u5c55\u4e86.\u5de6\u53f3\u6700\u5927\u8ddd\u79bb\u7684\u66f4\u65b0\u4e5f\u7c7b\u4f3c,\u60ac\u7ebf\u7684\u9ad8\u5ea6\u548c\u5de6\\\u53f3\u6700\u5927\u53ef\u8fbe\u8ddd\u79bb\u662f\u53ef\u88ab\u7ebf\u6027\u66f4\u65b0\u7684.</p> <p>\u6c42\u51fa\u6240\u6709\u60ac\u7ebf\u540e,\u76f4\u63a5\u7528\u60ac\u7ebf\u7684\u4fe1\u606f(r-l)*h\u4f5c\u4e3a\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u66f4\u65b0\u5373\u53ef</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;unordered_map&gt;\n#include &lt;map&gt;\nusing namespace std;\n\nint n,m;\nconst int N=2010;\nstruct HOVER\n{\n    int h,l,r;\n}hl[N][N];\n\n//map&lt;int,pair&lt;int,int&gt;&gt; mp;\npair&lt;int,int&gt; mp[N*N];\n\nint a[N][N],b[N][N];\n\nvoid do_hoverline()\n{\n    for(int i=1;i&lt;=n;i++)\n    {\n        //L\n        for(int j=1;j&lt;=m;j++)\n        {\n            //Height\n            //pair&lt;int,int&gt; iijj=mp[b[i][j]];\n            pair&lt;int,int&gt; iijj=mp[b[i][j]]; //b! \uff08\u4e0d\u662fa\n\n            if(b[i-1][j]==a[iijj.first-1][iijj.second])\n            {\n                hl[i][j].h=hl[i-1][j].h+1;\n            }\n            while (hl[i][j].l&gt;1\n             &amp;&amp; iijj.second-(j-(hl[i][j].l-1))&gt;=1\n             &amp;&amp; b[i][hl[i][j].l-1]==a[iijj.first][iijj.second-(j-(hl[i][j].l-1))] //\u6ce8\u610f\u60ac\u7ebf\u6269\u5c55\u65f6b\u4e5f\u8981\u5339\u914d\n             &amp;&amp; hl[i][hl[i][j].l-1].h&gt;=hl[i][j].h)\n            {\n                hl[i][j].l=hl[i][hl[i][j].l-1].l;\n            }\n        }\n        //R\n        for(int j=m;j&gt;=1;j--)\n        {\n            pair&lt;int,int&gt; iijj=mp[b[i][j]]; //b!\n            while (hl[i][j].r&lt;m\n             &amp;&amp; iijj.second+((hl[i][j].r+1)-j)&lt;=m\n             &amp;&amp; b[i][hl[i][j].r+1]==a[iijj.first][iijj.second+((hl[i][j].r+1)-j)] //\u6ce8\u610f\u60ac\u7ebf\u6269\u5c55\u65f6b\u4e5f\u8981\u5339\u914d\n             &amp;&amp; hl[i][hl[i][j].r+1].h&gt;=hl[i][j].h)\n            {\n                hl[i][j].r=hl[i][hl[i][j].r+1].r;\n            }\n        }\n    }\n}\n\nint main()\n{\n    //ios::sync_with_stdio(false);\n    //cin.tie(0),cout.tie(0);\n    //cin&gt;&gt;n&gt;&gt;m;\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=m;j++)\n        {\n            //cin&gt;&gt;a[i][j];\n            scanf(\"%d\",&amp;a[i][j]);\n\n            mp[a[i][j]]={i,j};\n\n            hl[i][j]={1,j,j};\n        }\n    }\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=m;j++)\n        {\n            scanf(\"%d\",&amp;b[i][j]);\n        }\n    }\n    do_hoverline();\n    int ans=0;\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=m;j++)\n        {\n            ans=max(ans,(hl[i][j].r-hl[i][j].l+1)*hl[i][j].h);\n        }\n    }\n    //cout&lt;&lt;ans&lt;&lt;endl;\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_12","title":"\u6700\u5927\u5b50\u65b9\u9635","text":"<p>\u9898\u610f\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u75310,1\u7ec4\u6210\u7684n*n\u65b9\u9635\uff08n\u5728\u8fd0\u884c\u65f6\u63d0\u9192\u7528\u6237\u8f93\u5165\uff09\uff0c\u5224\u65ad\u5176\u4e2d\u7531\u51681\u7ec4\u6210\u7684\u6700\u5927\u5b50\u65b9\u9635\u7684\u5de6\u4e0a\u89d2\u4f4d\u7f6e\u548c\u9636\u6570\u3002\u7f16\u5199\u65b9\u6cd5\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5305\u542b3\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u4f9d\u6b21\u8868\u793a\u884c\u4e0b\u6807\uff0c\u5217\u4e0b\u6807\uff0c\u9636\u6570\u3002</p> <p>\u89e3\u6cd5\uff1a \u76f4\u63a5\u904d\u5386\u6bcf\u4e2a\u65b9\u683c\u5e76\u67e5\u627e\u4ee5\u8fd9\u4e2a\u65b9\u683c\u4e3a\u5de6\u4e0a\u89d2\u9876\u70b9\u7684\u6700\u5927\u5b50\u65b9\u9635\uff0c\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\\left(n<sup>3\\right)\u3002\u4e8b\u5b9e\u4e0a\u6b64\u95ee\u9898\u53ef\u7528\u60ac\u7ebf\u6cd5\u52a8\u6001\u89c4\u5212\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230O\\left(n</sup>2\\right)\u3002</p> <p>\u5047\u8bbe\u6bcf\u4e2a\u65b9\u683c\u5bf9\u5e94\u4e00\u6761\u4ece\u8be5\u65b9\u683c\u5f00\u59cb\u5230\u8be5\u65b9\u683c\u80fd\u5411\u4e0a\u6269\u5c55\u5230\u7684\u6700\u9ad8\u4f4d\u7f6e\u4e3a\u6b62\u7684\u60ac\u7ebf\uff0c\u5e76\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u60ac\u7ebf\u9ad8\u5ea6\u8bb0\u4e0b\u3002\u60ac\u7ebf\u80fd\u5411\u4e0a\u6269\u5c55\uff0c\u5f53\u4e14\u4ec5\u5f53\u60ac\u7ebf\u9876\u90e8\u7684\u4e0a\u65b9\u65b9\u683c\u662f1\u3002\u7279\u522b\u5730\uff0c\u5982\u679c\u8fd9\u4e2a\u65b9\u683c\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u5c31\u662f0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u60ac\u7ebf\u7684\u9ad8\u5ea6\u4e3a0\u3002</p> <p>\u63a5\u4e0b\u6765\u8003\u8651\u8fd9\u4e2a\u60ac\u7ebf\u5411\u5de6\u6216\u8005\u5411\u53f3\u5e73\u79fb\uff0c\u5e76\u8003\u8651\u5b83\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\u3002\u60ac\u7ebf\u80fd\u5411\u5de6\u6216\u8005\u5411\u53f3\u6269\u5c55\uff0c\u5f53\u4e14\u4ec5\u5f53\u60ac\u7ebf\u76ee\u524d\u80fd\u5411\u5de6\u6216\u5411\u53f3\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\u7684\u5de6\u8fb9\uff08\u6216\u8005\u53f3\u8fb9\uff09\u5c06\u88ab\u60ac\u7ebf\u8986\u76d6\u65f6\u8986\u76d6\u7684\u6240\u6709\u65b9\u683c\u90fd\u662f1\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e0b\u9762\u7684\u6570\u636e\u7684\u6700\u4e0b\u9762\u4e00\u884c\u7684\u65b9\u683c\u5bf9\u5e94\u7684\u60ac\u7ebf\uff1a $$ 0110\\ 1111\\ 1111\\ $$ \u7b2c3\u884c\u7b2c4\u5217\u7684\u65b9\u683c\u5bf9\u5e94\u7684\u60ac\u7ebf\u9ad8\u5ea6\u4e3a2\uff08\u56e0\u4e3a\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u5411\u4e0a\u80fd\u5230\u8fbe\u7684\u6700\u8fdc\u975e\u96f6\u683c\u662f\u7b2c2\u884c\u7b2c4\u5217\u7684\u65b9\u683c\uff09\uff0c\u80fd\u5411\u5de6\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\u662f\u7b2c1\u5217\u3002\u800c\u7b2c3\u884c\u7b2c3\u5217\u7684\u65b9\u683c\u5bf9\u5e94\u7684\u60ac\u7ebf\u9ad8\u5ea6\u662f3\uff0c\u5411\u5de6\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\u662f\u7b2c2\u5217\uff08\u4e0d\u80fd\u518d\u5411\u7b2c\u4e00\u5217\u6269\u5c55\u4e86\uff0c\u56e0\u4e3a\u7b2c3\u884c\u7b2c1\u5217\u5bf9\u5e94\u65b9\u683c\u7684\u9ad8\u5ea6\u53ea\u67092\uff0c\u6bd4\u73b0\u5728\u7684\u60ac\u7ebf\u9ad8\u5ea63\u8981\u5c0f\uff09\u3002\u5982\u679c\u80fd\u5982\u6b64\u6c42\u51fa\u8fd9\u4e9b\u65b9\u683c\u7684\u60ac\u7ebf\u9ad8\u5ea6\u4ee5\u53ca\u4ed6\u4eec\u80fd\u5411\u5de6\u6216\u5411\u53f3\u6269\u5c55\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u5c31\u80fd\u6c42\u51fa\u4ee5\u8be5\u60ac\u7ebf\u4e3a\u9ad8\u7684\u6700\u5927\u77e9\u5f62\u9762\u79ef\uff0c\u53d6\u8fd9\u4e9b\u77e9\u5f62\u7684\u957f\u5bbd\u4e2d\u7684\u6700\u5c0f\u503c\u5e76\u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684\u6b63\u65b9\u5f62\u7684\u9762\u79ef\u4ee5\u53ca\u5de6\u4e0a\u89d2\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6700\u5927\u5b50\u65b9\u9635\u3002</p> <p>\u8003\u8651\u5982\u4f55\u6309\u884c\u66f4\u65b0\u6bcf\u4e00\u5217\u65b9\u683c\u7684\u60ac\u7ebf\u9ad8\u5ea6\uff1a\u5982\u679c\u4e0a\u4e00\u884c\u5bf9\u5e94\u4f4d\u7f6e\u7684\u60ac\u7ebf\u9ad8\u5ea6\u662fh\uff0c\u82e5\u5f53\u524d\u884c\u5bf9\u5e94\u65b9\u683c\u662f1\u5219\u5f53\u524d\u884c\u7684\u60ac\u7ebf\u9ad8\u5ea6\u5c31\u662fh+1\uff0c\u5426\u5219\u5c06\u60ac\u7ebf\u9ad8\u5ea6\u6e05\u96f6\u3002</p> <p>\u8003\u8651\u66f4\u65b0\u60ac\u7ebf\u7684\u5411\u5de6\u6216\u8005\u5411\u53f3\u6269\u5c55\u7684\u6700\u8fdc\u8ddd\u79bb\uff1a\u4ee5\u5411\u5de6\u6269\u5c55\u4e3a\u4f8b\uff0c\u521d\u59cb\u503c\u5c31\u662f\u5f53\u524d\u5217\u3002\u82e5\u5f53\u524d\u60ac\u7ebf\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u8ddd\u79bb\u7684\u5de6\u4fa7\u4e00\u5217\u7684\u540c\u4e00\u884c\u7684\u60ac\u7ebf\u9ad8\u5ea6\u6bd4\u5f53\u524d\u60ac\u7ebf\u9ad8\u5ea6\u66f4\u9ad8\uff0c\u8bf4\u660e\u90a3\u4e2a\u60ac\u7ebf\u5411\u5de6\u80fd\u6269\u5c55\u5230\u7684\u5730\u65b9\uff0c\u5f53\u524d\u60ac\u7ebf\u4e5f\u4e00\u5b9a\u80fd\u6269\u5c55\u5230\uff0c\u56e0\u6b64\u76f4\u63a5\u4f7f\u7528\u516c\u5f0f \\(\\(l\\left[i\\right]=l\\left[l\\left[i\\right]-1\\right]\\)\\) \u8f6c\u79fb\uff0c\u5176\u4e2dl[i] \u8868\u793a\u8fd9\u4e00\u884c\u7b2ci\u5217\u7684\u60ac\u7ebf\u80fd\u5411\u5de6\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\u3002\u5982\u6b64\u53cd\u590d\u8fed\u4ee3\u76f4\u5230\u9047\u5230\u60ac\u7ebf\u9ad8\u5ea6\u6bd4\u5f53\u524d\u9ad8\u5ea6\u66f4\u77ee\u6216\u5230\u8fbe\u77e9\u9635\u5c3d\u5934\u4e3a\u6b62\u3002\u5411\u53f3\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u8ddd\u79bb\u540c\u7406\u3002</p> <p>\u7a0b\u5e8f\u5728\u5b9e\u73b0\u65f6\uff0c\u4e3a\u6bcf\u4e00\u884c\u7684\u6240\u6709\u5217\u5bf9\u5e94\u7684\u60ac\u7ebf\u5b9e\u73b0\u4e86\u4e00\u4e2aHoverline\u7c7b\uff0c\u5305\u542b\u4e09\u4e2a\u6210\u5458\uff1ah,l,r\uff0c\u5206\u522b\u8868\u793a\u60ac\u7ebf\u9ad8\u5ea6\u3001\u60ac\u7ebf\u80fd\u5411\u5de6\u548c\u5411\u53f3\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\u3002\u540c\u65f6\u5305\u542binit\u3001update_l\u3001update_r\u4ee5\u53caget_ans\u65b9\u6cd5\uff0c\u5206\u522b\u7528\u4e8e\u521d\u59cb\u5316\u60ac\u7ebf\u7684\u9ad8\u5ea6\u548c\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\u3001\u66f4\u65b0\u5411\u5de6\u548c\u5411\u53f3\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u8ba1\u7b97\u60ac\u7ebf\u5bf9\u5e94\u65b9\u9635\u7684\u5927\u5c0f\u548c\u5de6\u4e0a\u89d2\u5750\u6807\u3002</p> <pre><code>1.  import java.util.Scanner;\n2.  import java.util.Arrays;\n3.  \n4.  class Hoverline{\n5.      public int[] h,l,r;\n6.      public int n;\n7.      Hoverline(int n){\n8.          this.n=n;\n9.          h=new int[n];\n10.         l=new int[n];\n11.         r=new int[n];\n12.     }\n13.     //\u7528\u4e8e\u521d\u59cb\u5316\u60ac\u7ebf\u7684\u9ad8\u5ea6\u548c\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\n14.     public void init(int[][] m,int line){\n15.         for(int i=0;i&lt;n;i++){\n16.             h[i]=(m[line][i]==0)?0:(h[i]+1);\n17.             l[i]=r[i]=i;\n18.         }\n19.     }\n20.     //\u66f4\u65b0\u5411\u5de6\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\n21.     public void update_l(int i){\n22.         while (l[i]-1&gt;=0 &amp;&amp; h[l[i]-1]&gt;=h[i]){\n23.             l[i]=l[l[i]-1];\n24.         }\n25.     }\n26.     //\u66f4\u65b0\u5411\u5de6\u80fd\u6269\u5c55\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e\n27.     public void update_r(int i){\n28.         while (r[i]+1&lt;n &amp;&amp; h[r[i]+1]&gt;=h[i]){\n29.             r[i]=r[r[i]+1];\n30.         }\n31.     }\n32.     //\u8ba1\u7b97\u60ac\u7ebf\u5bf9\u5e94\u65b9\u9635\u7684\u5927\u5c0f\u548c\u5de6\u4e0a\u89d2\u5750\u6807,\u540c\u65f6\u66f4\u65b0\u7b54\u6848\n33.     public void get_ans(int[] ans,int line){\n34. \n35.         for(int i=0;i&lt;n;i++){\n36.             int minval=Math.min(r[i]-l[i]+1,h[i]);\n37.             int tmp_area=minval*minval;\n38.             if(tmp_area&gt;ans[2]){\n39.                 ans[0]=line-h[i]+1;\n40.                 ans[1]=l[i];\n41.                 ans[2]=tmp_area;\n42.             }\n43.         }\n44.     }\n45. }\n46. \n47. public class a {\n48. \n49.     public static int[] findLargestBlock(int[][] m){\n50.         int[] ans=new int[3];\n51. \n52.         int n=m.length;\n53.         Hoverline hoverline=new Hoverline(n);\n54.         //\u66f4\u65b0\u60ac\u7ebf\n55.         for(int i=0;i&lt;n;i++){\n56.             hoverline.init(m,i);\n57.             for(int j=0;j&lt;n;j++) {\n58.                 hoverline.update_l(j);\n59.             }\n60.             for(int j=n-1;j&gt;=0;j--){\n61.                 hoverline.update_r(j);\n62.             }\n63.             hoverline.get_ans(ans,i);\n64. \n65.         }\n66. \n67.         return ans;\n68.     }\n69. \n70. //    \u8f93\u5165\u77e9\u9635\n71.     static int[][] read_matrix() {\n72.         int n;\n73.         Scanner sc=new Scanner(System.in);\n74.         System.out.println(\"Enter matrix size:\");\n75.         n=sc.nextInt();\n76.         int[][] m=new int[n][n];\n77.         for(int i=0;i&lt;n;i++){\n78.             for(int j=0;j&lt;n;j++)\n79.                 m[i][j]=sc.nextInt();\n80.         }\n81.         return m;\n82.     }\n83. \n84.     public static void main(String[] args) {\n85. \n86.         var m=read_matrix();\n87.         var ans=findLargestBlock(m);\n88.         System.out.println(\"row_index, column_index, size: \"+Arrays.toString(ans)); //\u8f93\u51fa\u7b54\u6848\n89.     }\n90. }\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_13","title":"\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u51b3\u7b56\u4f18\u5316","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_14","title":"\u5c0f\u7c73\u8d5b\u80cc\u5305\u9898","text":"<p>\u9898\u610f\uff1a n\u4e2a\u7269\u54c1\u6709\u91cd\u91cfwi\u548c\u4ef7\u503cvi\uff0c\u6700\u5927\u5316\u4ef7\u503c\u3002\uff08wi\u5728100\u4ee5\u5185\uff0c\u7269\u54c1\u4e2a\u65702e5\uff0c\u80cc\u5305\u5927\u5c0f2e5\uff0c\u4ef7\u503c1e9\uff09</p> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\nconst int N=2e5+10; //!2\nlong long w[110][N],pre[N];//\u4ef7\u503c\nlong long dp[N],last[N];\nint n,m;\n\nstruct P\n{\n    int k,l,r;\n}queue[N];\nint hd,rr;\n\nlong long s(int l)\n{\n    return pre[l];\n}\n\nbool is_better(int x,int k,int u,int i,int p) //p is better than k for x(p&lt;=x)\n{\n    return last[u+p*i]+s(x-p) &gt;= last[u+k*i] + s(x-k);\n}\n\nint bs(int u,int i,int p)\n{\n    int bs_l=queue[rr].l,bs_r=queue[rr].r;\n    while (bs_l&lt;bs_r)\n    {\n        int mid=(bs_l+bs_r)&gt;&gt;1;\n        if(is_better(mid,queue[rr].k,u,i,p))\n        {\n            bs_r=mid;\n        }\n        else bs_l=mid+1;\n    }\n    if(bs_l==queue[rr].r &amp;&amp; !is_better(bs_l,queue[rr].k,u,i,p)) bs_l++;\n    return bs_l;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    while (cin&gt;&gt;n&gt;&gt;m)\n    {\n        //memset(w,0,sizeof(w));\n        for(int i=1;i&lt;=100;i++) w[i][0]=0;\n        for(int i=1;i&lt;=n;i++)\n        {\n            int ww;\n            cin&gt;&gt;ww;\n            cin&gt;&gt;w[ww][++w[ww][0]];\n        }\n        for(int i=1;i&lt;=m;i++)\n            dp[i]=last[i]=0;\n\n        for(int i=1;i&lt;=100;i++)\n        {\n            if(w[i][0]==0)\n            {\n                for(int j=0;j&lt;=m;j++)\n                    last[j]=dp[j];\n                continue;\n            }\n            sort(w[i]+1,w[i]+w[i][0]+1,greater&lt;long long&gt;());\n            for(int j=1;j&lt;=w[i][0];j++)\n                pre[j]=pre[j-1]+w[i][j];\n            for(int u=0;u&lt;i;u++)\n            {\n                hd=1,rr=0; //reset queue\n                int pmax=(m-u)/i;\n                queue[++rr]={0,1,min(pmax,(int)(0+w[i][0]))}; //k=0 ,l=1, r=k+w[i][0]\n                for(int p=1;p&lt;=pmax;p++)\n                {\n                    while (hd&lt;=rr &amp;&amp; (queue[hd].r&lt;p)) hd++; //time out\n                    if(queue[hd].l&lt;p) queue[hd].l=p;\n                    //can transfer\n                    if(hd&lt;=rr &amp;&amp; queue[hd].l&lt;=p &amp;&amp; p&lt;=queue[hd].r)\n                        dp[u+p*i]=max(dp[u+p*i],last[u+queue[hd].k*i]+s(p-queue[hd].k));\n                    //try to insert new policy (from last[u+p*i]) (p&lt;=queue[rr].l&lt;=queue[rr].r)\n                    while(hd&lt;=rr &amp;&amp; is_better(queue[rr].l,queue[rr].k,u,i,p)) rr--;\n                    int pos;\n                    if(hd&lt;=rr) {pos=bs(u,i,p);queue[rr].r=pos-1;} //!1\n                    else pos=1;\n\n                    queue[++rr]={p,pos,min(pmax,(int)(p+w[i][0]))};\n                }\n            }\n            for(int j=0;j&lt;=m;j++)\n                last[j]=dp[j];\n        }\n        long long ans=0;\n        for(int i=0;i&lt;=m;i++)\n            ans=max(ans,dp[i]);\n        cout&lt;&lt;ans&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_15","title":"\u6570\u5b66","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_16","title":"\u9ad8\u65af\u6d88\u5143","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#luogu-4035-ball_space_generator","title":"luogu 4035 ball_space_generator","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;cmath&gt;\nusing namespace std;\nint n;\ndouble c[101][102],a[101][102];\n\nvoid gaussian_elimination()\n{\n    double sum1,sum2;\n    sum1=sum2=0.0;\n    for(int i=1;i&lt;=n;i++)\n    {\n        sum1=sum2=0.0;\n        for(int j=1;j&lt;=n;j++)\n        {\n            sum1+=a[i][j]*a[i][j];\n            sum2+=a[i+1][j]*a[i+1][j];\n            c[i][j]=2*(a[i+1][j]-a[i][j]);\n        }\n        c[i][n+1]=sum2-sum1;\n    }\n\n    int pos=1;\n    for(int i=1;i&lt;=n;i++) //for per line\n    {\n        bool flag_of_find=false;\n        for(int j=pos;j&lt;=n;j++)\n        {\n            if(fabs(c[i][j])&gt;1e-8) //c[j][i] ????????\n            {\n                flag_of_find=true;\n                for(int k=1;k&lt;=n+1;k++)\n                {\n                    swap(c[pos][k],c[i][k]);\n                }\n            }\n        }\n        if(!flag_of_find) continue;\n        for(int j=1;j&lt;=n;j++)\n        {\n            if(j==pos) continue;\n            double rate=c[j][i]/c[pos][i];\n            for(int k=1;k&lt;=n+1;k++)\n            {\n                c[j][k]-=rate*c[pos][k];\n            }\n        }\n        pos++;\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n+1;i++)\n    {\n        for(int j=1;j&lt;=n;j++)\n            cin&gt;&gt;a[i][j];\n    }\n    gaussian_elimination();\n    cout&lt;&lt;fixed;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cout&lt;&lt;setprecision(3)&lt;&lt;c[i][n+1]/c[i][i]&lt;&lt;\" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#gaussian-elimination","title":"gaussian elimination","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\nusing namespace std;\nconst int N=888;\ndouble c[N][N];\nint n;\nint main()\n{\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=n+1;j++)\n        {\n            cin&gt;&gt;c[i][j];\n        }\n    }\n\n    //int i=1;\n    //ps:\u5c06pos\u6539\u6210i\u540e\uff0c\u5f97\u5230\u7684\u77e9\u9635\u5c06\u662f\u5bf9\u89d2\u7ebf\u4e0a\u5168\u662f1\u7684\u77e9\u9635\n    for(int i=1;i&lt;=n;i++)\n    {\n        //find a equation that the coefficient of the x_i is not 0\n        bool flag_of_find=false;\n        for(int j=i;j&lt;=n;j++)\n        {\n            if(fabs(c[j][i])&gt;1e-8)\n            {\n                flag_of_find=true;\n                for(int k=1;k&lt;=n+1;k++)\n                {\n                    swap(c[i][k],c[j][k]);\n                }\n            }\n        }\n        if(!flag_of_find) continue;\n        for(int j=1;j&lt;=n;j++)\n        {\n            if(i==j) continue;\n            double rate=c[j][i]/c[i][i];\n            for(int k=1;k&lt;=n+1;k++)\n            {\n                c[j][k]-=c[i][k]*rate;\n            }\n        }\n        //i++;\n    }\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=n+1;j++)\n        {\n            printf(\"%.8lf \",c[i][j]);\n        }\n        cout&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#2020-icpc-shenyang-a","title":"2020 icpc shenyang A","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=310, Mod=998244353;\n\nint n;\nint a[N][N];\nint b[N][N];\nint c[N][N],d[N];\nll pow2[N];\n\nvoid predo()\n{\n    pow2[0]=1;\n    for(int i=1;i&lt;=305;i++)\n    {\n        pow2[i]=pow2[i-1]*2;\n        pow2[i]%=Mod;\n    }\n}\n\nvoid gauss_elimination(int c[][N], int b[],int n)\n{\n    int pos=1;\n    for(int i=1;i&lt;=n;i++)// for every x\n    {\n        bool flag_of_find=false;\n        for(int j=pos;j&lt;=n;j++)\n        {\n            if(c[j][i])\n            {\n                flag_of_find=true;\n                for(int k=1;k&lt;=n;k++)\n                    swap(c[pos][k],c[j][k]);\n                swap(b[pos],b[j]);\n            }\n        }\n        if(!flag_of_find) continue;\n        for(int j=1;j&lt;=n;j++)  //for every equation, execute elimination\n        {\n            if(j==pos) continue;\n            if(c[j][i]==0) continue; //1-&gt;0: No need to eliminate\n            for(int k=1;k&lt;=n;k++)\n            {\n                c[j][k]^=c[pos][k];\n            }\n            b[j]^=b[pos];\n        }\n        pos++;\n    }\n}\n\n\nvoid work()\n{\n    ll ans=1;\n    for(int j=1;j&lt;=n;j++)\n    {\n        for(int i=1;i&lt;=n;i++)\n        {\n            for(int k=1;k&lt;=n;k++)\n            {\n                c[i][k]=0;\n                if(a[i][k])\n                {\n                    c[i][k]=1;\n                }\n            }\n\n            if(b[i][j])\n            {\n                c[i][i]^=1;\n            }\n        }\n\n        fill(d,d+n+1,0);\n        gauss_elimination(c,d,n);\n\n        int pos=1;\n        int ans2=0;\n        for(int i=1;i&lt;=n;i++)\n        {\n            while(pos&lt;=n &amp;&amp; c[i][pos]==0)\n            {\n                pos++;\n            }\n\n            if(pos&lt;=n) \n            {\n                ans2++;\n            }\n        }\n\n        ans2=n-ans2;\n        ans=(ans*pow2[ans2])%Mod;\n    }\n\n\n    cout&lt;&lt;ans&lt;&lt;endl;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    freopen(\"a_in.txt\",\"r\",stdin);\n    cin&gt;&gt;n;\n    predo();\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=n;j++)\n        {\n            cin&gt;&gt;a[i][j];\n        }\n    }\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=n;j++)\n        {\n            cin&gt;&gt;b[i][j];\n        }\n    }\n\n    work();\n\n\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_17","title":"\u7ebf\u6027\u57fa","text":"<p>\u53ef\u5728\u5bf9\u6570\u65f6\u95f4\u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u8be2\u96c6\u5408\u6700\u5927\u503c\u548c\u6700\u5c0f\u5f02\u6216\u548c\u7684\u64cd\u4f5c\u3002</p> <p>\u5b8c\u6210\u91cd\u6784\u64cd\u4f5c\u540e\uff08\u82b1\u8d39\u5bf9\u6570\u5e73\u65b9\u7684\u65f6\u95f4\uff09\u53ef\u8f6c\u6362\u4e3a\u5f62\u4f3c\u4e8e\u6700\u7b80\u884c\u9636\u68af\u578b\u77e9\u9635\u7684\u5f62\u5f0f\uff0c\u4e4b\u540e\u53ef\u5728\u5bf9\u6570\u65f6\u95f4\u5185\u67e5\u8be2\u96c6\u5408\u5185\u7b2ck\u5927\u5f02\u6216\u548c\u3002</p> <p>\u6700\u5927\u503c</p> <ul> <li>\uff08restructure\u524d\uff09\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u4e2a\u6570\u5f02\u6216\u8fdb\u6765\u4f1a\u4e0d\u4f1a\u4f7f\u5f97\u7b54\u6848\u66f4\u5927\uff0c\u5982\u679c\u4f1a\u5c31\u5f02\u6216\u8fdb\u6765\u3002</li> <li>\u5982\u679c\u9700\u8981\u5728\u5f02\u6216\u521d\u503c\u4e0d\u4e3a\u96f6\u7684\u60c5\u51b5\u4e0b\u53d6\u5f97\u6700\u5927\u503c\uff0c\u53ea\u9700\u8981\u66f4\u6539ans\u7684\u521d\u59cb\u503c\u5373\u53ef\u3002</li> </ul> <p>\u6700\u5c0f\u503c\uff1a</p> <ul> <li>\u76f4\u63a5\u8d2a\u5fc3\u62ff\u7ebf\u6027\u57fa\u4e2d\u6700\u5c0f\u7684\u6570\uff08\u5f53\u7136\uff0c\u9700\u8981\u7279\u5224\u7ebf\u6027\u57fa\u662f\u5426\u53ef\u83b7\u5f970\uff09</li> </ul> Funs || Methods Reliance Time Complexity Inputs Outputs Description LB 1 \u6784\u9020\u51fd\u6570 insert log x \u8fd4\u56de\u662f\u5426\u63d2\u5165\u6210\u529f\uff0c\u4e0d\u6210\u529f\u5219\u8868\u660e\u5176\u53ef\u4ee5\u88ab\u7ebf\u6027\u8868\u51fa \u5c06x\u63d2\u5165\u7ebf\u6027\u57fa get_max log ans=0 \u6700\u5927\u503c \u53d6\u5f97\u7ebf\u6027\u57fa\u80fd\u7ebf\u6027\u8868\u51fa\u7684\u6700\u5927\u503c\uff08\u91cd\u6784\u524d\uff09\uff0c\u82e5\u521d\u59cb\u5f02\u6216\u503c\u4e0d\u4e3a0\u5219\u5411ans\u4f20\u9012\u53c2\u6570 get_min log \u6700\u5c0f\u503c \u53d6\u5f97\u7ebf\u6027\u57fa\u4e2d\u80fd\u8868\u51fa\u7684\u6700\u5c0f\u7684\u503c\uff08\u91cd\u6784\u524d\uff09 restructure log^2 \u4fee\u6539p\u6570\u7ec4 \u5bf9\u7ebf\u6027\u57fa\u505a\u884c\u53d8\u6362\u4f7f\u5176\u6210\u4e3a\u7c7b\u4f3c\u4e8e\u9ad8\u65af\u6d88\u5143\u7684\u5f62\u5f0f\uff0c\u4ee5\u4fbf\u80fd\u6c42\u51fa\u6392\u540d kth restructure log k:\u7b2ck\u5c0f\u6570\u7684\u6392\u540dk \u7b2ck\u5c0f\u6570 \u6c42\u51fa\u7b2ck\u5c0f\u7684\u80fd\u88ab\u8868\u51fa\u7684\u6570\uff08\u91cd\u6784\u540e\uff09 operator| log^2 n2\uff1a\u5f85\u5408\u5e76\u7684\u7ebf\u6027\u57fa ret\uff1a\u5408\u5e76\u540e\u7684\u7ebf\u6027\u57fa \u5408\u5e76\u7ebf\u6027\u57fa\uff08\u91cd\u6784\u524d\uff09 <pre><code>//HDOJ 3949\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\n#include &lt;algorithm&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\n\nnamespace Linear_Basis\n{\n    struct LB //linear basis\n    {\n        static const int SZ=63;\n\n        //local\n        ll p[SZ]; //p\uff1a\u7b2ci\u4e2ap\u4fdd\u5b58\u5bf9\u5e94\u6700\u9ad8\u4f4d\u4e3a1\u7684\u6570\n        bool flag; //flag:\u662f\u5426\u53ef\u5f02\u6216\u5f97\u52300 (whether can do xor to obtain 0)\n        int cnt; //cnt\uff1a\u91cd\u6784\u540e\uff08\u9ad8\u65af\u6d88\u5143\uff09\u7684\u57fa\u5927\u5c0f\n\n        //\u521d\u59cb\u5316\n        LB()\n        {\n            //for(int i=0;i&lt;SZ;i++)\n            //p[i]=0;\n            memset(p,0,sizeof(p)); //\u6ca1\u4ec0\u4e48\u592a\u5927\u6027\u80fd\u5f00\u9500\n            cnt=flag=0;\n        }\n\n        //\u63d2\u5165x\u5230\u7ebf\u6027\u57fa\u4e2d\n        bool insert(ll x)\n        {\n            for(int j=SZ-1;j&gt;=0;j--)\n            {\n                if(x&gt;&gt;j == 0 ) continue;\n                if(p[j]==0)\n                {\n                    p[j]=x;\n                    return true;\n                }\n                x^=p[j];\n            }\n            flag=true;\n            return false;\n        }\n\n        //\u53d6\u5f97\u7ebf\u6027\u57fa\u80fd\u7ebf\u6027\u8868\u51fa\u7684\u6700\u5927\u503c\uff08\u91cd\u6784\u524d\uff09\n        ll get_max(ll ans=0) //ans:\u5f02\u6216\u521d\u503c\n        {\n            for(int i=SZ-1;i&gt;=0;i--)\n            {\n                if((ans^p[i])&gt;ans) ans ^= p[i];\n            }\n            return ans;\n        }\n\n        //\u53d6\u5f97\u7ebf\u6027\u57fa\u4e2d\u80fd\u8868\u51fa\u7684\u6700\u5c0f\u7684\u503c\uff08\u91cd\u6784\u524d\uff09\n        ll get_min()\n        {\n            if(flag) return 0;\n            for(int i=0;i&lt;SZ;i++)\n            {\n                if(p[i]) return p[i];\n            }\n            return 0;\n        }\n\n        //\u5bf9\u7ebf\u6027\u57fa\u505a\u884c\u53d8\u6362\u4f7f\u5176\u6210\u4e3a\u7c7b\u4f3c\u4e8e\u9ad8\u65af\u6d88\u5143\u7684\u5f62\u5f0f\n        void restructure() \n        {\n            for(int i=SZ-1;i&gt;=0;i--)\n            {\n                if(p[i])\n                {\n                    for(int j=i-1;j&gt;=0;j--)\n                    {\n                        if(p[i] &amp; (1ll&lt;&lt;j))\n                        {\n                            p[i]^=p[j];\n                        }\n                    }\n                }\n            }\n\n            for(int i=0;i&lt;SZ;i++)\n            {\n                if(p[i])\n                {\n                    p[cnt++]=p[i];\n                }\n            }\n        }\n\n        //\u6c42\u51fa\u7b2ck\u5c0f\u7684\u80fd\u88ab\u8868\u51fa\u7684\u6570\uff08\u91cd\u6784\u540e\uff09\n        ll kth(ll k) //before calling this func, must run restructure func once\n        {\n            //\u5bf9k\u6216k-1\u505a\u4e8c\u8fdb\u5236\u5206\u89e3\n            if(flag) k--;\n            if(k==0) return 0;\n            if(k&gt;=(1ll &lt;&lt; cnt)) return -1;\n            ll ans=0;\n            for(int i=0;i&lt;cnt;i++)\n            {\n                if(k &amp; (1ll&lt;&lt;i))\n                {\n                    ans^=p[i];\n                }\n            }\n            return ans;\n        }\n\n        //\u5408\u5e76\u7ebf\u6027\u57fa\uff08\u91cd\u6784\u524d\uff09\n        LB operator|(const LB &amp;n2) //\u5408\u5e76\u7ebf\u6027\u57fa\n        {\n            LB ret= *this;\n            for(int i=0;i&lt;SZ;i++)\n            {\n                if(n2.p[i])\n                {\n                    ret.insert(n2.p[i]);\n                }\n            }\n\n            ret.flag|=n2.flag; //?\n            return ret;\n        }\n    };\n}\nusing namespace Linear_Basis;\n\n\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    int T;\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        int n;\n        cin&gt;&gt;n;\n        LB lb;\n        for(int i=1;i&lt;=n;i++)\n        {\n            ll x;\n            cin&gt;&gt;x;\n            lb.insert(x);\n        }\n        lb.restructure();\n        cout&lt;&lt;\"Case #\"&lt;&lt;_&lt;&lt;\":\"&lt;&lt;endl;\n        int q;\n        cin&gt;&gt;q;\n        for(int i=1;i&lt;=q;i++)\n        {\n            ll k;\n            cin&gt;&gt;k;\n            cout&lt;&lt;lb.kth(k)&lt;&lt;endl;\n        }\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_18","title":"\u7ebf\u6027\u6c42\u9006\u5143","text":"<p>\u8fd9\u4e2a\u61d2\u5f97\u6574namespace\u4e86\u2026\u2026</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nconst int N=114514;\nlong long inv[N],p;\n\nvoid linear_inv(int n)//in mod p\n{\n    inv[1]=1;\n    //p=ki+j==0 (mod p) -&gt; -kj^-1=i^-1\n    //k=p/i, j=(p%i)^-1\n    for(int i=2;i&lt;=n;i++)\n    {\n        inv[i]=(long long)(p-p/i)*inv[p%i]%p; //(p-p/i)==(-p/i)\n    }\n    //if inv[i]=0, inverse not exists.\n    //\u5982\u679c\u6ca1\u6709\u76f8\u5e94\u7684\u9006\u5143\u7684\u65f6\u5019\uff0cinv[i] \u7684\u503c\u662f\u672a\u5b9a\u4e49\u7684\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#n","title":"\u7ebf\u6027\u6c42\u4efb\u610f\u7ed9\u5b9an\u4e2a\u6570\u7684\u9006\u5143","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#luogu-5431-multi_inverse2","title":"luogu 5431 multi_inverse2","text":"<p>\u9898\u610f\uff1a\u7ed9\u5b9an\u4e2a\u6570ai\uff0c\u6c42\u5728mod p\u610f\u4e49\u4e0b\u7684\u9006\u5143\u3002\u7ed9\u5b9a\u5e38\u6570k\uff0c\u8f93\u51fa\\(\\sum_{i=1}^n \\frac{k^i}{a_i} \\% p\\)</p> <p>\u89e3\u6cd5\uff1a</p> <p>\u9996\u5148\u8ba1\u7b97 \\(n\\) \u4e2a\u6570\u7684\u524d\u7f00\u79ef\uff0c\u8bb0\u4e3a \\(s_i\\)\uff0c\u7136\u540e\u4f7f\u7528\u5feb\u901f\u5e42\u6216\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\u8ba1\u7b97 \\(s_n\\) \u7684\u9006\u5143\uff0c\u8bb0\u4e3a \\(sv_n\\)\u3002</p> <p>\u56e0\u4e3a \\(sv_n\\) \u662f \\(n\\) \u4e2a\u6570\u7684\u79ef\u7684\u9006\u5143\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u628a\u5b83\u4e58\u4e0a \\(a_n\\) \u65f6\uff0c\u5c31\u4f1a\u548c \\(a_n\\) \u7684\u9006\u5143\u62b5\u6d88\uff0c\u4e8e\u662f\u5c31\u5f97\u5230\u4e86 \\(a_1\\) \u5230 \\(a_{n-1}\\) \u7684\u79ef\u9006\u5143\uff0c\u8bb0\u4e3a \\(sv_{n-1}\\)\u3002</p> <p>\u540c\u7406\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8ba1\u7b97\u51fa\u6240\u6709\u7684 \\(sv_i\\)\uff0c\u4e8e\u662f \\(a_i^{-1}\\) \u5c31\u53ef\u4ee5\u7528 \\(s_{i-1} \\times sv_i\\) \u6c42\u5f97\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u5c31\u5728 \\(O(n + \\log p)\\) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u4e86 \\(n\\) \u4e2a\u6570\u7684\u9006\u5143\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\nconst int N=5e6+10;\nint n,p,k,kk=1,ans=0;\nint a[N],s[N],sv[N],inv[N];\ntypedef long long ll;\n\nnamespace Fast_IO {\n\ntemplate &lt;typename T&gt; inline void read(T &amp;x) {\n  char c;\n  int sgn = 1;\n  x = 0;\n  c = getchar();\n  while (c &gt; '9' || c &lt; '0') {\n    if (c == '-')\n      sgn = -1;\n    c = getchar();\n  }\n  while (c &lt;= '9' &amp;&amp; c &gt;= '0') {\n    x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c - '0');\n    c = getchar();\n  }\n  x *= sgn;\n}\n\n// template &lt;typename T&gt; inline void read(T &amp;x){\n//  x=0;\n//     char ch;\n//  for(ch=getchar();ch&lt;'0'||ch&gt;'9';ch=getchar());\n//  for(;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=getchar())\n//      x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch&amp;15); \n// }\n\ntemplate &lt;typename T&gt; inline void print(T x) {\n  if (x &lt; 0) {\n    putchar('-');\n    x = -x;\n  }\n  if (x &gt; 9) {\n    print(x / 10);\n  }\n  putchar(x % 10 + '0');\n}\n} // namespace Fast_IO\nusing namespace Fast_IO;\n\n// //\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\uff1aax+by=1\n// ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)\n// {\n//     if(!b)\n//     {\n//         x=1,y=0;\n//         return a;\n//     }\n//     ll d=exgcd(b,a%b,x,y),tempx=x,tempy=y;\n//     x=tempy;\n//     y=tempx-tempy*(a/b);\n//     return d;\n// }\n\n//\u5faa\u73af\nint ksm(int a,int b,int Mod)\n{\n    int ans=1;\n    while(b)\n    {\n        if(b&amp;1) ans=(1ll*ans*a)%Mod;\n        a=(1ll*a*a)%Mod;\n        b&gt;&gt;=1;\n    }\n    return ans;\n}\n\nvoid getinv()\n{\n    // long long x,y;\n    //exgcd(s[n],p,x,y); //get s[n]^-1 (mod p)\n    //sv[n]=(x%p+p)%p; //sv[i]=s[i]^-1\n    //exgcd(k,p,x,y);\n    int k_inv=ksm(k,p-2,p);\n    sv[n]=ksm(s[n],p-2,p);\n\n    for(int i=n;i&gt;=1;i--)\n    {\n        if(i&lt;n) \n        {\n            sv[i]=(1ll*sv[i+1]*a[i+1])%p;\n        }\n        inv[i]=(1ll*sv[i]*s[i-1])%p;\n        // print(inv[i]);\n        // putchar('\\n');\n\n        //custom\n        ans=(ans+(1ll*kk*inv[i])%p)%p;\n        kk=(1ll*kk*k_inv)%p;\n    }\n    print(ans);\n\n}\n\nint main()\n{\n    read(n),read(p),read(k);\n    s[0]=1;\n    for(int i=1;i&lt;=n;i++)\n    {\n        // scanf(\"%d\",&amp;a[i]);\n        read(a[i]);\n        s[i]=(1ll*s[i-1]*a[i])%p;\n        kk=(1ll*kk*k)%p;\n    }\n    getinv();\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_19","title":"\u7ebf\u6027\u8d28\u6570\u7b5b \u4e0e \u57fa\u4e8e\u7b5b\u7684\u56e0\u6570\u5206\u89e3","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description linear_sieve n n prime,p,v \u7b5b\u51fa\u5230n\u4e3a\u6b62\u7684\u8d28\u6570 \u5206\u89e3k\u7684\u56e0\u6570 linear_sieve &lt;=sqrt k res\uff1a\u4e00\u4e2a\u4fdd\u5b58\u6240\u6709\u56e0\u6570\u7684vector\uff08\u6ca1\u6392\u5e8f\uff09 \u5206\u89e3k\u7684\u56e0\u6570\uff0c\u5b58\u5728vector\u4e2d \u5206\u89e3x\u7684\u8d28\u56e0\u6570 linear_sieve log x res\uff1a\u4fdd\u5b58pair\u7684vector\uff0cpair\u7b2c\u4e00\u4e2a\u6570\u662fprime\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662fcnt \u5206\u89e3x\u7684\u8d28\u56e0\u6570 <pre><code>//\u7ebf\u6027\u7b5b+\u5206\u89e3\u56e0\u6570\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nnamespace L\n{\n    const int N=(int)1e7+10;\n\n    //local\n    int prime[N], p, v[N]; \n    //prime\uff1a\u8d28\u6570\u96c6\u5408\n    //p:\u8d28\u6570\u4e2a\u6570\n    //v\uff1a\u4e0b\u6807i\u4ee3\u8868\u7684\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\n\n    //\u7b5b\u51fa\u5230n\u4e3a\u6b62\u7684\u8d28\u6570\n    void linear_sieve(int n)\n    {\n        for (int i = 2; i &lt;= n; i++)\n        {\n            if (!v[i])\n            {\n                v[i] = i;\n                prime[++p] = i;\n            }\n            for (int j = 1; j &lt;= p &amp;&amp; (long long)prime[j] * i &lt;= n &amp;&amp; v[i] &gt;= prime[j]; j++)\n            {\n                v[i * prime[j]] = prime[j];\n            }\n        }\n    }\n\n    //\u5206\u89e3k\u7684\u56e0\u6570(\u9700\u8981\u6392\u5e8f\uff01)\n    vector&lt;long long&gt; Div(long long k)\n    {\n        vector&lt;long long&gt; res;\n        res.push_back(1);\n        for (long long i = 1; prime[i] * prime[i] &lt;= k; i++)\n        {\n            if (k % prime[i] == 0)\n            {\n                long long now = prime[i];\n                long long len = res.size();\n                while (k % prime[i] == 0)\n                {\n                    for (long long j = 0; j &lt; len; j++)\n                    {\n                        res.push_back(res[j] * now);\n                    }\n                    now *= prime[i];\n                    k /= prime[i];\n                }\n            }\n        }\n        if (k &gt; 1)\n        {\n            long long len = res.size();\n            for (long long j = 0; j &lt; len; j++)\n            {\n                res.push_back(res[j] * k);\n            }\n        }\n        return res;\n    }\n\n    //\u5206\u89e3x\u7684\u8d28\u56e0\u6570\n    vector&lt;pair&lt;int,int&gt;&gt; div2(int x) //\u5206\u89e3\u8d28\u56e0\u6570\n    {\n        vector&lt;pair&lt;int,int&gt;&gt; res;\n        while(x&gt;1)\n        {\n            int minprime=v[x];\n            int cnt=0;\n            while (x%minprime==0)\n            {\n                x/=minprime;\n                cnt++;\n            }\n            res.push_back({minprime,cnt});\n        }\n        return res;\n    }\n}\n\nusing namespace L;\n\nint main()\n{\n    linear_sieve(1e7);\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;long long&gt; s = Div(n);\n    for (auto i : s)\n        cout &lt;&lt; i &lt;&lt; \" \";\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#phi","title":"\u6b27\u62c9\u51fd\u6570Phi\u7b5b","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#16th-f-function","title":"16<sup>th</sup> \u9ed1\u9f99\u6c5f\u7701\u8d5b f-function","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef unsigned long long ll;\n\nconst int N=1e7+10;\nint phi[N];\nint pri[N];\nll vis[N];\nint cnt=0;\nvoid init()\n{\n    phi[1] = 1;\n    for (int i = 2; i &lt;= 10000000; ++i)\n    {\n        if (!vis[i])\n        {\n            phi[i] = i - 1;\n            pri[cnt++] = i;\n        }\n        for (int j = 0; j &lt; cnt; ++j)\n        {\n            if (1ll * i * pri[j] &gt; 10000000) break;\n            vis[i * pri[j]] = pri[j];\n            if (i % pri[j])\n            {\n                phi[i * pri[j]] = phi[i] * (pri[j] - 1);\n            }\n            else\n            {\n                // i % pri[j] == 0\n                // \u6362\u8a00\u4e4b\uff0ci \u4e4b\u524d\u88ab pri[j] \u7b5b\u8fc7\u4e86\n                // \u7531\u4e8e pri \u91cc\u9762\u8d28\u6570\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff0c\u6240\u4ee5 i \u4e58\u4e0a\u5176\u4ed6\u7684\u8d28\u6570\u7684\u7ed3\u679c\u4e00\u5b9a\u4f1a\u88ab\n                // pri[j] \u7684\u500d\u6570\u7b5b\u6389\uff0c\u5c31\u4e0d\u9700\u8981\u5728\u8fd9\u91cc\u5148\u7b5b\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5 break\n                // \u6389\u5c31\u597d\u4e86\n                phi[i * pri[j]] = phi[i] * pri[j];\n                break;\n            }\n        }\n    }\n}\n\nll cal(int xx)\n{\n    int t=0;\n    int tx=vis[xx],txx=xx;\n    for(;;)\n    {\n        if((xx/tx)*tx!=xx)\n        {\n            break;\n        }\n        t++;\n        xx/=tx;\n    }\n    ll sum=0;\n    sum=t%2==0?t/2:t/2+1;\n    sum=txx/pow(tx,sum);\n    return sum;\n}\n\nint main()\n{\n    ll ans=0;\n    init();\n    int n;\n    cin&gt;&gt;n;\n    for(int i=1; i&lt;=n; i++)\n    {\n        if(vis[i]==0)\n        {\n            //cout&lt;&lt;\"t\"&lt;&lt;1&lt;&lt;endl;\n            ans+=1;\n            continue;\n        }\n        else\n        {\n            auto tmp=cal(i);\n            //cout&lt;&lt;\"t\"&lt;&lt;tmp&lt;&lt;endl;\n            ans+=tmp;\n        }\n    }\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_20","title":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","text":"<pre><code>namespace Mo\n{\n    const int NN=1e7+10;\n    int mu[NN],v[NN],prime[NN],prime_tot;\n\n    //\u7b5b\u51fa\u8d28\u6570\u4e0e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u503c\n    void linear_sieve_mo(int n)\n    {\n        prime_tot=0;\n        mu[1]=1;\n        for(int i=2;i&lt;=n;i++)\n        {\n            if(!v[i]) \n            {\n                v[i]=i;\n                prime[++prime_tot]=i;\n                mu[i]=-1;\n            }\n            for(int j=1;j&lt;=prime_tot &amp;&amp; 1ll*i*prime[j]&lt;=n;j++)\n            {\n                v[i*prime[j]]=prime[j];\n\n                if(i%prime[j]==0)\n                {\n                    mu[i*prime[j]]=0;\n                    break;\n                }\n\n                mu[i*prime[j]] = -mu[i];\n            }\n        }\n    }\n}\nusing namespace Mo;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_21","title":"\u6570\u8bba\u5206\u5757","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Shulunfenkuai\n{\n    inline ll ceil(ll n,ll m)\n    {\n        return n/m+(n%m!=0);\n    }\n\n    //\u5411\u4e0a\u53d6\u6574\u6c42\u548c\n    ll calculate1(ll k,ll n)\n    {\n        ll ans=0;\n        for(ll x=1,gx;x&lt;=n;x=gx+1)\n        {\n            gx= (k/x) ? min(k/(k/x) , n) : n;\n            ans+= k/x;\n        }\n        return ans;\n    }\n\n    //\u5411\u4e0b\u53d6\u6574\u6c42\u548c : k/m &lt;= i &lt;= (k-1)/(m-1) , (m=ceil(k/i))\n    //https://www.cnblogs.com/zjjws/p/13393858.html\n    ll calculate2(ll k,ll n)\n    {\n        ll ans=0;\n        for(ll x=1,gx;x&lt;=n;x=gx+1)\n        {\n            ll v=ceil(n,x);\n            gx= (v!=1) ? min((k-1)/(v-1) , n) : (n);\n\n            ans+=v;\n        }\n        return ans;\n    }\n}\nusing namespace Shulunfenkuai;\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_22","title":"\u5feb\u901f\u5e42","text":"<pre><code>const long long Mod=10;\n\n//\u9012\u5f52\nlong long ksm(long long a,long long b)\n{\n    if(b==0) return 1;\n    if(b==1) return a%Mod;\n    long long ans=ksm(a,b&gt;&gt;1);\n    ans*=ans;\n    ans%=Mod;\n    if(b&amp;1)\n    {\n        ans*=a;\n    }\n    return ans%Mod;\n}\n\n//\u5faa\u73af\nlong long ksm(long long a,long long b,long long Mod)\n{\n    long long ans=1;\n    while(b)\n    {\n        if(b&amp;1) ans=(ans*a)%Mod;\n        a=(a*a)%Mod;\n        b&gt;&gt;=1;\n    }\n    return ans;\n}\n\n//\u5feb\u901f\u4e58\u6cd5\uff08\u7528\u4e8e\u89e3\u51b3\u4e58\u6cd5\u7206longlong\uff09\nlong long mul(long long a,long long b,long long Mod)\n{\n    long long ans=a;\n    while (b)\n    {\n        if(b&amp;1) ans=(ans+a)%Mod;\n        a=(a+a)%Mod;\n        b&gt;&gt;=1;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#gcdexgcd","title":"gcd\u4e0eexgcd\u3001\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description gcd log a,b gcd(a,b) gcd exgcd log a,b,x,y \u8fd4\u56degcd(a,b)\uff0c\u4fee\u6539x\u3001y\u4f5c\u4e3a\u7ed3\u679c exgcd\uff1aax+by=1 get_inv log a,p x\uff1aa^-1 \u6c42\u51faa\u5173\u4e8ep\u7684\u9006\u5143\u3002\u4f46\u8981\u6ce8\u610fgcd(a,p)==1\u65f6\u9006\u5143\u624d\u5b58\u5728 solve_linear_equation log a,b,p \u4e00\u4e2a\u89e3x \u6c42\u51fa\u65b9\u7a0bax=b(mod p) \u7684\u89e3\u3002\u4f46\u8981\u6ce8\u610f\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 gcd(a,p) <pre><code>namespace EXGCD\n{\n    typedef long long ll;\n\n    //\u666e\u901a\u7684gcd\n    ll gcd(ll a,ll b)\n    {\n        return b?gcd(b,a%b):a;\n    }\n\n    //\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\uff1aax+by=1\n    ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)\n    {\n        if(!b)\n        {\n            x=1,y=0;\n            return a;\n        }\n        ll d=exgcd(b,a%b,x,y),tempx=x,tempy=y;\n        x=tempy;\n        y=tempx-tempy*(a/b);\n        return d;\n    }\n\n    //\u6c42a\u5173\u4e8ep\u7684\u9006\u5143\uff08\u6c42\u540c\u4f59\u65b9\u7a0bax=1(mod p)-&gt; p|(ax-1) -&gt; ax+py=1\uff09\n    ll get_inv(ll a,ll p)\n    {\n        ll x,y;\n        ll g = exgcd(a, p, x, y);\n        //x\u5c31\u662f\u89e3\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u5982\u679c\u5e0c\u671b\u5f97\u5230\u6b63\u6574\u6570\u89e3\u5e94\u8be5\u5bf9x\u53d6\u6a21\n        return x=(x%p+p)%p;\n    }\n\n    //\u6c42\u51fa\u65b9\u7a0bax=b(mod p) \u7684\u89e3\u3002\u4f46\u8981\u6ce8\u610f\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 gcd(a,p)|b\n    ll solve_linear_equation(ll a,ll b,ll p)\n    {\n        //ax=b(mod p) -&gt; ax+py=b\n        //\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 gcd(a,p)|b\uff0c\u6c42\u51faax0+py0\u89e3\u540ex0\u4e58\u4ee5b/gcd(a,m)\u5373\u53ef\u5f97\u539f\u65b9\u7a0b\u7684\u4e00\u4e2a\u89e3\n        ll x,y;\n        ll g=exgcd(a,p,x,y);\n\n        if(b%g!=0) return -1;\n\n        x*=(b/g); //\u6ce8\u610f\uff1a\u9700\u8981g|b\uff0c\u5426\u5219\u65e0\u89e3\n        x=(x%p+p)%p;\n        return x;\n    }\n\n}\n\nusing namespace EXGCD;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_23","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","text":"<pre><code>#include &lt;iostream&gt; //Chinese remainder theorem\nusing namespace std;\nint congruence_equation_number;\nlong long m[20],a[20],t[20],M=1;\n\nlong long exgcd(long long a,long long b,long long &amp;x,long long &amp;y)\n{\n    if(b==0)\n    {\n        x=1;\n        y=0;\n        return a;\n    }\n    long long d=exgcd(b,a%b,x,y),temp_x=x,temp_y=y;\n    x=temp_y;\n    y=temp_x-temp_y*(a/b);\n    return d;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin&gt;&gt;congruence_equation_number;\n    for(int i=1;i&lt;=congruence_equation_number;i++)\n    {\n        cin&gt;&gt;m[i]&gt;&gt;a[i];\n        M*=m[i];\n    }\n    for(int i=1;i&lt;=congruence_equation_number;i++)\n    {\n        long long x,y;\n        exgcd(M/m[i],m[i],x,y);\n        t[i]=x;\n    }\n    long long ans=0;\n    for(int i=1;i&lt;=congruence_equation_number;i++)\n    {\n        ans+=(a[i]*M/m[i]*t[i])%M;\n        ans%=M;\n    }\n    cout&lt;&lt;(ans+M)%M&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_24","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u6574\u6570\u70b9\u4e2a\u6570","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\n\n\n\nnamespace EXGCD\n{\n    typedef long long ll;\n\n    //\u666e\u901a\u7684gcd\n    ll gcd(ll a,ll b)\n    {\n        return b?gcd(b,a%b):a;\n    }\n\n    //\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\uff1aax+by=1\n    ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)\n    {\n        if(!b)\n        {\n            x=1,y=0;\n            return a;\n        }\n        ll d=exgcd(b,a%b,x,y),tempx=x,tempy=y;\n        x=tempy;\n        y=tempx-tempy*(a/b);\n        return d;\n    }\n\n    //\u6c42a\u5173\u4e8ep\u7684\u9006\u5143\uff08\u6c42\u540c\u4f59\u65b9\u7a0bax=1(mod p)-&gt; p|(ax-1) -&gt; ax+py=1\uff09\n    ll get_inv(ll a,ll p)\n    {\n        ll x,y;\n        ll g = exgcd(a, p, x, y);\n        //x\u5c31\u662f\u89e3\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u5982\u679c\u5e0c\u671b\u5f97\u5230\u6b63\u6574\u6570\u89e3\u5e94\u8be5\u5bf9x\u53d6\u6a21\n        return x=(x%p+p)%p;\n    }\n\n    //\u6c42\u51fa\u65b9\u7a0bax=b(mod p) \u7684\u89e3\u3002\u4f46\u8981\u6ce8\u610f\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 gcd(a,p)|b\n    ll solve_linear_equation(ll a,ll b,ll p)\n    {\n        //ax=b(mod p) -&gt; ax+py=b\n        //\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 gcd(a,p)|b\uff0c\u6c42\u51faax0+py0\u89e3\u540ex0\u4e58\u4ee5b/gcd(a,m)\u5373\u53ef\u5f97\u539f\u65b9\u7a0b\u7684\u4e00\u4e2a\u89e3\n        ll x,y;\n        ll g=exgcd(a,p,x,y);\n\n        x*=(b/g); //\u6ce8\u610f\uff1a\u9700\u8981g|b\uff0c\u5426\u5219\u65e0\u89e3\n        x=(x%p+p)%p;\n        return x;\n    }\n\n}\nusing namespace EXGCD;\n\nnamespace Zhengshu_points\n{\n    //(ai+b)/c=k (k&gt;0,0&lt;=i&lt;=n)\n    // a,b,c&gt;0, n&gt;=0\n    ll get_zhengshu_points(ll a, ll b, ll c,ll n)\n    {\n        ll i0,k0;\n        ll g=exgcd(a,-c,i0,k0);\n\n        if(-b%g!=0) return 0; //no solution\n\n        // ll Kr=-b*i0\n        double Krd=(-b*i0)*(ld)1.0/c;\n        double Kld=(n*g+b*i0)*(ld)1.0/(-c);\n\n        if(g&lt;0)\n        {\n            swap(Kld,Krd);\n        }\n        ll Kr= floor(Krd);\n        ll Kl= ceil(Kld);\n        return max(0ll, Kr-Kl+1);\n    }\n}\nusing namespace Zhengshu_points;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    ll a,b,c,n;\n    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;n;\n\n    cout&lt;&lt;get_zhengshu_points(a,b,c,n)&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_25","title":"\u7c7b\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#202-icpc-shenyang","title":"202 ICPC Shenyang","text":"<p>\u539f\u9898\u53ef\u8f6c\u5316\u4e3a\u8ba1\u7b97 $$ f(a,b,c,n)=\\sum_{i=0}^n \\lfloor\\frac{ai+b}{c}\\rfloor $$</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef __int128 vl;\n\nll H,M,A;\n\nnamespace Like_Euclid\n{\n    //\n    vl ff(vl a,vl b,vl c,vl n)\n    {\n        if(a==0) return b/c*(n+1);\n        if(a&gt;=c || b&gt;=c)\n        {\n            return ff(a%c, b%c, c, n) + (a/c)*n*(n+1)/2 + (b/c)*(n+1);\n        }\n        vl m=(a*n+b)/c;\n        return n*m - ff(c,c-b-1, a, m-1);\n    }\n}\nusing namespace Like_Euclid;\n\nnamespace EXGCD\n{\n    //\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\uff1aax+by=1\n    vl exgcd(vl a,vl b,vl &amp;x,vl &amp;y)\n    {\n        if(!b)\n        {\n            x=1,y=0;\n            return a;\n        }\n        vl d=exgcd(b,a%b,x,y),tempx=x,tempy=y;\n        x=tempy;\n        y=tempx-tempy*(a/b);\n        return d;\n    }\n\n}\nusing namespace EXGCD;\n\nnamespace Zhengshu_points\n{\n    template&lt;typename Ty&gt;\n    Ty fl(Ty a,Ty b)\n    {\n        if((a&lt;0 &amp;&amp; b&gt;0) || (a&gt;0 &amp;&amp; b&lt;0))\n        {\n            return (a/b) - (a%b !=0);\n        }\n        return a/b;\n    }\n\n\n    template&lt;typename Ty&gt;\n    Ty ce(Ty a,Ty b)\n    {\n        if((a&lt;0 &amp;&amp; b&gt;0) || (a&gt;0 &amp;&amp; b&lt;0))\n        {\n            return (a/b);\n        }\n        return (a/b) + (a%b !=0);\n    }\n\n\n\n    //(ai+b)/c=k (k&gt;0,0&lt;=i&lt;=n)\n    // a,b,c&gt;0, n&gt;=0\n    vl get_zhengshu_points(vl a, vl b, vl c,vl n)\n    {\n        vl i0,k0;\n        vl g=exgcd(a,-c,i0,k0);\n\n        if(-b%g!=0) return 0; //no solution\n\n        // ld Krd=(-b*i0)*(ld)1.0/c;\n        // ld Kld=(n*g+b*i0)*(ld)1.0/(-c);\n\n        // if(g&lt;0)\n        // {\n        //     swap(Kld,Krd);\n        // }\n        // vl Kr= floor(Krd);\n        // vl Kl= ceil(Kld);\n\n\n        vl Kr,Kl;\n        if(g&lt;0)\n        {\n            // Kl=(-b*i0)/c + ((-b*i0)%c != 0);\n            Kl=ce(-b*i0,c);\n            // Kr=(n*g+b*i0)/(-c);\n            Kr=fl(n*g+b*i0,-c);\n        }\n        else\n        {\n            // Kl=(n*g+b*i0)/(-c) + ((n*g+b*i0)%(-c) != 0);\n            Kl=ce(n*g+b*i0, -c);\n            // Kr=(-b*i0)/c;\n            Kr=fl(-b*i0,c);\n        }\n\n        return max((vl)0, Kr-Kl+1);\n    }\n}\nusing namespace Zhengshu_points;\n\nll solve(ll H, ll M, ll A)\n{\n    //a=MH,b=A,c=H-1\n    vl ans=ff(M*H,A,H-1,H-2);\n\n    // ld zero_point=A/(M*H);\n    vl z1=A/(M*H);\n    vl z2=z1+1;\n\n    z1=min(z1,(vl)(H-2));\n    vl bb=M*H*z1-A;\n    // bb=-bb; bb&lt;=0\n    ans+=ff(M*H,-bb,H-1,z1);\n\n\n    if(z2&lt;=H-2)\n    {\n        vl bb2=M*H*z2-A;\n        ans-=ff(M*H,bb2,H-1,H-2-z2);\n        ans+=get_zhengshu_points(M*H,bb2,H-1,H-2-z2);\n    }\n\n    // cout&lt;&lt;\"ans:\"&lt;&lt;(ll)ans&lt;&lt;endl;\n    // cout&lt;&lt;\"z1:\"&lt;&lt;(ll)z1&lt;&lt;endl;\n    // cout&lt;&lt;\"a2mh:\"&lt;&lt;(ll)(A*2!=M*H)&lt;&lt;endl;\n\n    // return ans+z1+(A*2!=M*H);\n    return ans+z1+1;\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;H&gt;&gt;M&gt;&gt;A;\n\n    if(H*M==A*2)\n    {\n        cout&lt;&lt;H*M&lt;&lt;endl;\n    }\n    // else if(A==0)\n    // {\n    //     cout&lt;&lt;1&lt;&lt;endl;\n    // }\n    else\n    cout&lt;&lt;solve(H,M,A)&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#pollard-rho","title":"\u7c73\u52d2\u7f57\u5bbe\u8d28\u6570\u5224\u522b\u6cd5 \u4e0e Pollard Rho \u56e0\u6570\u5206\u89e3\u6cd5","text":"<p>\u8bf4\u8d77\u6765\u8fd9\u73a9\u610f\u4f1a\u7528\u5230mt19937\u8fd9\u73a9\u610f\u2026\u2026</p> <pre><code>//pollard Rho &amp; Miller Rabin LUOGU 4718\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;ctime&gt;\n#include &lt;map&gt;\n#include &lt;random&gt;\nusing namespace std;\ntypedef long long ll;\ntypedef __int128_t lll;\n\nint T;\nll n;\n\nnamespace PR\n{\n    //local\n    std::mt19937 rd(time(0));\n    ll __a[]={2,325,9375,28178,450775,9780504,1795265022}; //b[]={2,7,61}; (for 2^32)\n\n    ll gcd(ll a,ll b)\n    {\n        return b==0?a:gcd(b,a%b);\n    }\n\n    ll ksm(ll a,ll b,ll Mod) //\u6ce8\u610f\uff1a\u4f7f\u7528lll\u9632\u70b8\n    {\n        ll ans=1;\n        while(b)\n        {\n            if(b&amp;1) ans=((lll)ans*a)%Mod;\n            a=((lll)a*a)%Mod;\n            b&gt;&gt;=1;\n        }\n        return ans;\n    }\n\n    //\u8d28\u6570\u5224\u522b\n    bool miller_rabin(ll n)\n    {\n        if(n==2 || n==3) return true;\n        if(n&lt;2 || n%2==0) return false; // n%2==0 spj for even num\n        ll d=n-1,r=0;\n        while (d%2==0)\n        {\n            r++;\n            d/=2;\n        }\n        for(int a_p=0;a_p&lt;7;a_p++)\n        {\n            ll aa=__a[a_p];\n            ll x=ksm(aa,d,n); //maybe 0, need to special judge x=0\n            if(x&lt;=1 || x==n-1) continue; //a^{d}=1 or -1\n            for(int i=0;i&lt;r-1;i++)\n            {\n                x=(lll)x*x%n;\n                if(x==n-1) break; // find a^{2^r d}=-1 (mod n)\n            }\n            if(x!=n-1) return false; //!=\n        }\n        return true;\n    }\n\n    //\u8ba1\u7b97x^2+c\uff0c\u4f1a\u88ab\u4e0b\u9762\u7684PR\u51fd\u6570\u7528\u5230\n    ll __f(ll x,ll c,ll Mod)\n    {\n        return ((lll)x*x+c)%Mod;\n    }\n\n    //\u6c42\u51fan\u7684\u4e00\u4e2a\u56e0\u6570\n    ll Pollard_Rho(ll n) //n must be composite\n    {\n        ll s=0,t=0;\n        ll c=(ll)rd()%(n-1)+1;\n        ll val=1;\n        for(ll goal=1;;goal&lt;&lt;=1,s=t,val=1)\n        {\n            for(ll step=1;step&lt;=goal;step++)\n            {\n                t=__f(t,c,n);\n                val=(lll)val*abs(t-s)%n;\n                if(step%127==0)\n                {\n                    ll d=gcd(val,n);\n                    if(d&gt;1) return d;\n                }\n            }\n            ll d=gcd(val,n);\n            if(d&gt;1) return d;\n        }\n    }\n\n    //local\n    ll maxfactor=0;\n    //maxfactor\uff1a\u4fdd\u5b58n\u7684\u6700\u5927\u56e0\u6570\n    //\u5206\u89e3n\u5e76\u6c42n\u7684\u6700\u5927\u56e0\u6570\n    void do_div(ll n) //maximun prime factor of n\n    {\n        if(n&lt;=maxfactor || n&lt;2) return;\n        if(miller_rabin(n))\n        {\n            maxfactor=max(maxfactor,n);\n            return ;\n        }\n        ll m=n;\n        while (m==n)\n        {\n            m=Pollard_Rho(n);\n        }\n        while (n%m==0)\n        {\n            n/=m;\n        }\n        do_div(n);\n        do_div(m);\n    }\n\n    map&lt;ll,ll&gt; dv;\n    //dv\uff1a\u7528\u4e8e\u4fdd\u5b58\u56e0\u6570\u5206\u89e3\u7ed3\u679c\n    //\u5206\u89e3\u56e0\u6570n\uff0c\u5e76\u5c06n\u7684\u6240\u6709\u56e0\u6570\u4fdd\u5b58\u5728dv\u4e2d\n    void do_div2(map&lt;ll,ll&gt; &amp;dv,ll n)\n    {\n        if(miller_rabin(n))\n        {\n            dv[n]++;\n            return ;\n        }\n        ll m=n;\n        while (m==n)\n        {\n            m=Pollard_Rho(n);\n        }\n        n/=m;\n        do_div2(dv,n);\n        do_div2(dv,m);\n    }\n}\nusing namespace PR;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;T;\n    while (T--)\n    {\n        maxfactor=0;\n        cin&gt;&gt;n;\n        do_div(n);\n        if(maxfactor==n)\n            cout&lt;&lt;\"Prime\"&lt;&lt;endl;\n        else\n            cout&lt;&lt;maxfactor&lt;&lt;endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#bsgs","title":"BSGS\uff08\u6a21\u610f\u4e49\u4e0b\u53d6\u5bf9\u6570\uff09","text":"<p>\u590d\u6742\u5ea6\u662f\u6839\u53f7\u7ea7\u522b\u7684\uff0c\u7528\u4e8e\u6c42\u89e3 $$ a^x\\equiv b\\pmod p  $$</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;cmath&gt;\nusing namespace std;\ntypedef long long ll;\n\n\nnamespace BSGS\n{\n    //public\n    long long a,b,p;\n    //local\n    unordered_map&lt;long long,long long&gt; ha;\n    //ha:\u7528\u4e8e\u4fdd\u5b58\u4e2d\u9014\u7a77\u4e3e\u7684\u7ed3\u679c\n\n    //a^x=b(mod p) \n    //a^(it-j)=b (mod p)\n    //a^t^i=ba^j (mod p)\n    long long ksm(long long a,long long b,long long m)\n    {\n        if(b==0) return 1;\n        if(b==1) return a%m;\n        long long ans=ksm(a,b/2,m);\n        ans*=ans;\n        ans%=m;\n        if(b%2)\n        {\n            ans*=a;\n            ans%=m;\n        }\n        return ans;\n    }\n\n    long long bsgs(long long a,long long b,long long p)\n    {\n        ha.clear();\n        long long t=sqrt(p);\n        if(t*t!=p) t++;\n        for(int j=0;j&lt;=t-1;j++)\n        {\n            long long val=(b%p*ksm(a,j,p))%p;\n            ha[val]=j;\n        }\n        long long at=ksm(a,t,p);\n        if(a==0) return b==0?1:-1;\n        for(int i=0;i&lt;=t;i++)\n        {\n            long long val=ksm(at,i,p);\n            int j=(ha.find(val)==ha.end()?-1:ha[val]);\n            if(j&gt;=0 &amp;&amp; i*t-j&gt;=0)\n            {\n                return i*t-j;\n            }\n        }\n        return -1;\n    }\n}\nusing namespace BSGS;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p; //b&lt;p\n    cout&lt;&lt;bsgs(a,b,p)&lt;&lt;endl;\n    return 0;\n}\n\n/*\n69 5 19260817  \n15013953\n*/\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_26","title":"\u2b50\u539f\u6839","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#luogu-6091","title":"luogu 6091 \u539f\u6839\u6a21\u7248","text":"<p>\u9898\u610f\uff1a\u7ed9\u5b9a\u6574\u6570 n\uff0c\u6c42\u5b83\u7684\u6240\u6709\u539f\u6839\u3002\u4e3a\u4e86\u51cf\u5c0f\u4f60\u7684\u8f93\u51fa\u91cf\uff0c\u7ed9\u51fa\u8f93\u51fa\u53c2\u6570 d\uff0c\u8bbe n \u7684\u6240\u6709\u539f\u6839\u6709 c \u4e2a\uff0c\u4ece\u5c0f\u5230\u5927\u5206\u522b\u4e3a g1,..,gc, \u53ea\u9700\u8981\u4f9d\u6b21\u6b21\u8f93\u51fag_d,g_2d,...,g_{(c/d)*d}</p> <pre><code>//P6091 \u539f\u6839\u6a21\u7248\n//\u6709\u5f85\u4f18\u5316\uff08\u4f8b\u5982\u5c06\u6b27\u62c9\u51fd\u6570\u6539\u6210\u7ebf\u6027\u7b5b\u5f62\u5f0f\u3001gcd\u6539\u6210ksm\u9a8c\u8bc1\u4e4b\u7c7b\u7684\uff09\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\n#include &lt;memory.h&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N=1e6+5;\nint T,n,d;\nint prime_list[N],pp,m_phi;\nint g_list[N],g_p;\n\nint phi(int n)\n{\n    int ans=n;\n    for(int i=2;i&lt;=sqrt(n);i++)\n    {\n        if(n%i==0)\n        {\n            ans=ans/i*(i-1);\n            while (n%i==0)\n            {\n                n/=i;\n            }\n        }\n    }\n    if(n&gt;1) ans=ans/n*(n-1);\n    return ans;\n}\n\nvoid divide(int n)\n{\n    pp=0;\n    for(int i=2;i&lt;=sqrt(n);i++)\n    {\n        if(n%i==0)\n        {\n            prime_list[++pp]=i;\n            while (n%i)\n            {\n                n/=i;\n            }\n        }\n    }\n    if(n&gt;1) prime_list[++pp]=n;\n}\n\nlong long ksm(long long a,long long b,long long Mod)\n{\n    long long ans=1;\n    while(b)\n    {\n        if(b&amp;1) ans=(ans*a)%Mod;\n        a=(a*a)%Mod;\n        b&gt;&gt;=1;\n    }\n    return ans;\n}\n\nlong long gcd(long long a,long long b)\n{\n    return b?gcd(b,a%b):a;\n}\n\nint get_min_primitive_root(int m)\n{\n    m_phi=phi(m);\n    if(m==1) return 0;\n    if(m==2) return 1;\n    divide(m_phi);\n    for(int g=2;g&lt;=m-1;g++)\n    {\n        if(gcd(g,m)!=1) continue;\n        bool flag=true;\n        for(int i=1;i&lt;=pp;i++)\n        {\n            if(ksm(g,m_phi/prime_list[i],m)==1)\n            {\n                flag=false;\n                break;\n            }\n        }\n        if(flag)\n        {\n            return g;\n        }\n    }\n    return -1;\n}\n\nint main()\n{\n    //ios::sync_with_stdio(false);\n    scanf(\"%d\",&amp;T);\n    //cin&gt;&gt;T;\n    while(T--)\n    {\n        //cin&gt;&gt;n&gt;&gt;d;\n        scanf(\"%d%d\",&amp;n,&amp;d);\n        pp=g_p=0;\n        int g=get_min_primitive_root(n);\n        if(g==-1)\n        {\n            printf(\"0\\n\\n\");\n            //cout&lt;&lt;0&lt;&lt;endl&lt;&lt;endl;\n            continue;\n        }\n        /*int m_phi_phi=phi(m_phi);\n        //cout&lt;&lt;m_phi_phi&lt;&lt;endl;\n        printf(\"%d\\n\",m_phi_phi);*/\n        int m_phi_phi=0;\n        for(int i=1;i&lt;=m_phi;i++)\n        {\n            if(gcd(i,m_phi)==1)\n            {\n                m_phi_phi++;\n                g_list[++g_p]=ksm(g,i,n);\n            }\n        }\n        sort(g_list+1,g_list+1+g_p);\n        printf(\"%d\\n\",m_phi_phi);//\u6b64\u5904\u7b54\u6848\u4e3aphi(m_phi)\n        for(int i=d;i&lt;=m_phi_phi/d*d;i+=d)//\u8f93\u51fa\u63a7\u5236\uff0c\u53ef\u4ee5\u65e0\u89c6\u8fd9\u90e8\u5206\n        {\n            //cout&lt;&lt;g_list[i]&lt;&lt;\" \";\n            printf(\"%d \",g_list[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#cipolla","title":"\u6c42\u89e3\u4e8c\u6b21\u5269\u4f59\u7684Cipolla \u7b97\u6cd5","text":"<pre><code>//Cipolla\u7b97\u6cd5\u6c42\u89e3\u4e00\u4e2a\u6570\u7684\u6a21\u610f\u4e49\u4e0b\u6839\u53f7\n\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\n#include &lt;random&gt;\n#include &lt;ctime&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\n\nmt19937 rd(time(0));\n\nint T;\n\nnamespace Cipolla\n{\n    //local\n    ll w,p;\n    //w: i^2 = a*a-n\n    //p: \u6a21\u6570\n\n    struct Imagenum\n    {\n        ll x,y;\n\n        Imagenum(){}\n        Imagenum(ll x,ll y): x(x), y(y) {}\n        Imagenum operator *(const Imagenum &amp;b) const\n        {\n            return Imagenum(\n                ((x*b.x%p + y*b.y%p*w%p)%p+p)%p,\n                ((x * b.y % p + y * b.x % p) % p + p) % p\n            );\n        }\n    };\n\n    //\u5faa\u73af\n    long long ksm(long long a,long long b,long long Mod)\n    {\n        long long ans=1;\n        while(b)\n        {\n            if(b&amp;1) ans=(ans*a)%Mod;\n            a=(a*a)%Mod;\n            b&gt;&gt;=1;\n        }\n        return ans;\n    }\n\n    Imagenum ksm(Imagenum a, ll b)\n    {\n        Imagenum ans(1,0);\n        while(b)\n        {\n            if(b&amp;1)\n            {\n                ans=ans*a;\n            }\n            a=a*a;\n            b&gt;&gt;=1;\n        }\n        return ans;\n    }\n\n    //cipolla: \u8ba1\u7b97n\u5728mod p\u610f\u4e49\u4e0b\u7684\u5e73\u65b9\u6839\uff0c\u6ce8\u610fp\u4e00\u5b9a\u8981\u662f\u5947\u6570\u8d28\u6570\n    ll cipolla(ll n,ll P)\n    {\n        p=P;\n        n%=p;\n        if(p==2) return n;\n        if(ksm(n,(p-1)/2,p)==p-1) return -1; //\u52d2\u8ba9\u5fb7\u7b26\u53f7=-1\uff0c\u8868\u660e\u4e0d\u5b58\u5728\u89e3\n        if(n==0) return 0; //\u5fc5\u8981\u7684\u7279\u5224\uff0c\u5426\u5219\u5e95\u4e0b\u5faa\u73af\u4f1a\u5361\u4f4f\n        ll a;\n        while(1)\n        {\n            a=rd()%p;\n            w = ((a * a % p - n) % p + p) % p;\n            if(ksm(w,(p-1)/2,p)==p-1) break;\n        }\n\n        Imagenum x(a,1); // (a+i)^((p+1)/2) == n^(1/2)\n        return ksm(x,(p+1)/2).x; // \u5b9e\u90e8\u4e3a\u7b54\u6848\uff0c\u865a\u90e8\u4e00\u5b9a\u4e3a0\n    }\n\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        ll n,p;\n        cin&gt;&gt;n&gt;&gt;p;\n        auto ans=Cipolla::cipolla(n,p);\n        if(ans==-1)\n        {\n            cout&lt;&lt;\"Hola!\\n\";\n        }\n        else\n        {\n            auto ans2=(p-ans)%p;\n            if(ans&gt;ans2) swap(ans,ans2);\n            if(ans==ans2) cout&lt;&lt;ans&lt;&lt;'\\n';\n            else cout&lt;&lt;ans&lt;&lt;\" \"&lt;&lt;ans2&lt;&lt;'\\n';\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#fft","title":"FFT","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description getlen1 logn n len \u53d6\u5f97\u6bd4n\u5927\u7684\u5e42\u957flen getlen2 logn len1,len2 len \u53d6\u5f97\u6bd4len1*2\u3001len2*2\u90fd\u5927\u7684\u5e42\u957f fft nlogn \u8f93\u5165\u590d\u6570\u6570\u7ec4y\u3001\u5e42\u957flen\uff082\u7684\u5e42\uff09\u3001ifft=1\u3002 \u4fee\u6539\u6570\u7ec4y\u4f5c\u4e3a\u7ed3\u679c\u3002 \u5f97\u5230\u7531\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u6362\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\uff08ifft=-1\u5219\u53cd\u8fc7\u6765\uff09\u7684\u6570\u7ec4\uff1aifft\u4e3a1\u65f6\u505afft\uff0c-1\u5219\u505aifft\u3002 multi n \u8f93\u5165\u590d\u6570\u6570\u7ec4y1\u3001y2\u3001y3\uff0c\u5e42\u957flen \u4fee\u6539\u6570\u7ec4y3\u4f5c\u4e3a\u7ed3\u679c\u3002 \u5bf9\u70b9\u503c\u8868\u793a\u6cd5\u7684\u6570\u7ec4y1\u3001y2\u505a\u4e58\u6cd5\u4fdd\u5b58\u81f3y3\u4e2d\u3002 <pre><code>//FFT\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;complex&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\n\nnamespace FFT\n{\n    const int N = 2e6 + 5; //N\uff1a\u957f\u5ea6\u4e0a\u9650\n    const double PI = acos(-1.0); //PI\n\n    //public\n    complex&lt;double&gt; s1[N * 2], s2[N * 2], s3[N * 2]; //s1,s2,s3\uff1a\u8f93\u5165\u7cfb\u6570\u8868\u793a\u6cd5\u7528\u7684\u6570\u7ec4\n    int sum[N*2]; //\u4e58\u6cd5\u5b8c\u6210\u540e\u8ba1\u7b97\u6c42\u548c\u7528\u7684\u6570\u7ec4\n    char a[N], b[N]; //a\u3001b:\u8f93\u5165\u7684\u4e24\u4e2a\u6570\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\n\n    //local\n    int rev[N * 2]; //rev\uff1a\ud83e\udd8b\u53d8\u6362\u7528\u6570\u7ec4\n\n    //\u9884\u5904\u7406\ud83e\udd8b\u53d8\u6362\n    void __pre_rev(int len) \n    {\n        rev[0] = 0;\n        for (int i = 1; i &lt;= len; i++)\n        {\n            rev[i] = rev[i &gt;&gt; 1] &gt;&gt; 1;\n            if (i &amp; 1)\n            {\n                rev[i] |= len &gt;&gt; 1;\n            }\n        }\n    }\n\n    // \ud83e\udd8b\u53d8\u6362\n    void __change(complex&lt;double&gt; y[], int len) \n    {\n        __pre_rev(len);\n        for (int i = 0; i &lt; len; i++)\n        {\n            if (i &lt; rev[i])\n            {\n                swap(y[i], y[rev[i]]);\n            }\n        }\n    }\n\n    //\u53d6\u5f97\u6bd4n\u5927\u7684\u5e42\u957flen\n    int getlen1(int n)\n    {\n        int len=1;\n        while (len&lt;n) {\n            len&lt;&lt;=1;\n        }\n        return len;\n    }\n\n    //\u53d6\u5f97\u6bd4len1\\*2\u3001len2\\*2\u90fd\u5927\u7684\u5e42\u957f\n    int getlen2(int len1,int len2)\n    {\n        int len = 1;\n        while (len &lt; len1 * 2 || len &lt; len2 * 2)\n            len &lt;&lt;= 1;                                //*2\uff0c\u4e0d\u7136\u8fdb\u4f4d\u4f1a\u70b8\u6389\uff0c\u5e76\u4e14\ud83e\udd8b\u53d8\u6362\u4f1a\u9519\n        return len;\n    }\n\n    //\u5f97\u5230\u7531\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u6362\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\uff08ifft=-1\u5219\u53cd\u8fc7\u6765\uff09\u7684\u6570\u7ec4\uff1a\u8f93\u5165\u590d\u6570\u6570\u7ec4y\u3001\u957f\u5ea6len\uff082\u7684\u5e42\uff09\u3001ifft=1\u3002\u4fee\u6539\u6570\u7ec4y\u4f5c\u4e3a\u7ed3\u679c\u3002ifft\u4e3a1\u65f6\u505afft\uff0c-1\u5219\u505aifft\u3002\n    void fft(complex&lt;double&gt; y[], int len, int ifft = 1) \n    {\n        __change(y, len);\n        for (int h = 2; h &lt;= len; h &lt;&lt;= 1) // \u5408\u5e76\u7684\u957f\u5ea6\n        {\n            complex&lt;double&gt; w_n(cos(2 * PI / h), sin(ifft * 2 * PI / h)); //\u5bf9\u5e94\u957f\u5ea6\u7684\u5355\u4f4d\u590d\u6839\n            for (int j = 0; j &lt; len; j += h)                              //\u8d77\u59cb\u4f4d\u7f6e\n            {\n                complex&lt;double&gt; w(1, 0);            //\u521d\u59cb\u7684w_n^k\n                for (int k = j; k &lt; j + h / 2; k++) // \u904d\u5386\u4f4d\u7f6e\n                {\n                    complex&lt;double&gt; u = y[k], v = w * y[k + h / 2]; //\u5076\u6570\u9879\u3001\u5947\u6570\u9879\n                    y[k] = u + v;\n                    y[k + h / 2] = u - v;\n                    w *= w_n;\n                }\n            }\n        }\n        if (ifft == -1)\n        {\n            for (int i = 0; i &lt; len; i++)\n            {\n                y[i] /= len;\n            }\n        }\n    }\n\n    //\u5bf9\u70b9\u503c\u8868\u793a\u6cd5\u7684\u6570\u7ec4y1\u3001y2\u505a\u4e58\u6cd5\u4fdd\u5b58\u81f3y3\u4e2d\u3002\n    void multi(complex&lt;double&gt; y1[],complex&lt;double&gt; y2[],complex&lt;double&gt; y3[],int len) \n    {\n        for(int i=0;i&lt;len;i++)\n        {\n            y3[i]=y1[i]*y2[i];\n        }\n    }\n}\nusing namespace FFT;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin &gt;&gt; a + 1 &gt;&gt; b + 1;\n    int len1 = strlen(a + 1), len2 = strlen(b + 1);\n    int len = getlen2(len1, len2); //*2\uff0c\u4e0d\u7136\u8fdb\u4f4d\u4f1a\u70b8\u6389\uff0c\u5e76\u4e14\ud83e\udd8b\u53d8\u6362\u4f1a\u9519\n    //while (len &lt; len1 * 2 || len &lt; len2 * 2)\n    //    len &lt;&lt;= 1;                                \n    for (int i = 0, j = len1; i &lt; len1; i++, j--) //\u6ce8\u610f\u5012\u7740\u5b58\n    {\n        s1[i] = {(double)(a[j] - '0'), 0};\n    }\n    for (int i = 0, j = len2; i &lt; len2; i++, j--)\n    {\n        s2[i] = {(double)(b[j] - '0'), 0};\n    }\n    for (int i = len1; i &lt; len; i++)\n        s1[i] = {0, 0};\n    for (int i = len2; i &lt; len; i++)\n        s2[i] = {0, 0};\n    fft(s1, len);\n    fft(s2, len);\n    for (int i = 0; i &lt; len; i++) // \u4e58\u6cd5\u2026\u2026\n        s3[i] = s1[i] * s2[i];\n    fft(s3, len, -1);\n    //len=len1+len2-1;\n    //len=(len1+len2-1);\n    sum[len] = 0; //\u6700\u9ad8\u8fdb\u4f4d\u590d\u5199\u4e3a0\n    for (int i = 0; i &lt; len; i++)\n        sum[i] = round(real(s3[i]));\n    for (int i = 0; i &lt; len; i++)\n    {\n        sum[i + 1] += sum[i] / 10;\n        sum[i] %= 10;\n    }\n    while (sum[len] == 0 &amp;&amp; len &gt; 0)\n    {\n        len--;\n    }\n    for (int i = len; i &gt;= 0; i--)\n        cout &lt;&lt; sum[i];\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#ntt-998244353","title":"NTT (998244353)","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description getlen1 logn n len \u53d6\u5f97\u6bd4n\u5927\u7684\u5e42\u957flen getlen2 logn len1,len2 len \u53d6\u5f97\u6bd4len1*2\u3001len2*2\u90fd\u5927\u7684\u5e42\u957f ntt nlogn \u8f93\u5165\u590d\u6570\u6570\u7ec4y\u3001\u5e42\u957flen\uff082\u7684\u5e42\uff09\u3001ifft=1\u3002 \u4fee\u6539\u6570\u7ec4y\u4f5c\u4e3a\u7ed3\u679c\u3002 \u5f97\u5230\u7531\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u6362\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\uff08ifft=-1\u5219\u53cd\u8fc7\u6765\uff09\u7684\u6570\u7ec4\uff1aifft\u4e3a1\u65f6\u505afft\uff0c-1\u5219\u505aifft\u3002 multi n \u8f93\u5165\u590d\u6570\u6570\u7ec4y1\u3001y2\u3001y3\uff0c\u5e42\u957flen \u4fee\u6539\u6570\u7ec4y3\u4f5c\u4e3a\u7ed3\u679c\u3002 \u5bf9\u70b9\u503c\u8868\u793a\u6cd5\u7684\u6570\u7ec4y1\u3001y2\u505a\u4e58\u6cd5\u4fdd\u5b58\u81f3y3\u4e2d\u3002 <pre><code>//FFT but use NTT\n\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;complex&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace NTT\n{\n    const int N = 2e6 + 5,Mod=998244353; //N\uff1a\u957f\u5ea6\u4e0a\u9650, Mod: \u9ed8\u8ba4\u6a21\u6570\n    const double PI = acos(-1.0);//Pi\n    const int primitive_root=3; //primitive-root: 3\n\n    //public\n    ll s1[N * 2], s2[N * 2], s3[N * 2]; //s1,s2,s3\uff1a\u8f93\u5165\u7cfb\u6570\u8868\u793a\u6cd5\u7528\u7684\u6570\u7ec4\n\n    //local\n    int rev[N * 2]; //rev\uff1a\ud83e\udd8b\u53d8\u6362\u7528\u6570\u7ec4\n\n    //\u5feb\u901f\u5e42\n    long long __ksm(long long a,long long b,long long Mod)\n    {\n        long long ans=1;\n        while(b)\n        {\n            if(b&amp;1) ans=(ans*a)%Mod;\n            a=(a*a)%Mod;\n            b&gt;&gt;=1;\n        }\n        return ans;\n    }\n\n    //\u9884\u5904\u7406\ud83e\udd8b\u53d8\u6362\n    void __pre_rev(int len) \n    {\n        rev[0] = 0;\n        for (int i = 1; i &lt;= len; i++)\n        {\n            rev[i] = rev[i &gt;&gt; 1] &gt;&gt; 1;\n            if (i &amp; 1)\n            {\n                rev[i] |= len &gt;&gt; 1;\n            }\n        }\n    }\n\n    // \ud83e\udd8b\u53d8\u6362\n    void __change(ll y[], int len) \n    {\n        __pre_rev(len);\n        for (int i = 0; i &lt; len; i++)\n        {\n            if (i &lt; rev[i])\n            {\n                swap(y[i], y[rev[i]]);\n            }\n        }\n    }\n\n    //\u53d6\u5f97\u6bd4n\u5927\u7684\u5e42\u957flen\n    int getlen1(int n)\n    {\n        int len=1;\n        while (len&lt;n) {\n            len&lt;&lt;=1;\n        }\n        return len;\n    }\n\n    //\u53d6\u5f97\u6bd4len1\\*2\u3001len2\\*2\u90fd\u5927\u7684\u5e42\u957f\n    int getlen2(int len1,int len2)\n    {\n        int len = 1;\n        while (len &lt; len1 * 2 || len &lt; len2 * 2)\n            len &lt;&lt;= 1;  //*2\uff0c\u4e0d\u7136\u8fdb\u4f4d\u4f1a\u70b8\u6389\uff0c\u5e76\u4e14\ud83e\udd8b\u53d8\u6362\u4f1a\u9519\n        return len;\n    }\n\n    //\u5f97\u5230\u7531\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u6362\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\uff08ifft=-1\u5219\u53cd\u8fc7\u6765\uff09\u7684\u6570\u7ec4\uff1aifft\u4e3a1\u65f6\u505afft\uff0c-1\u5219\u505aifft\u3002\n    void ntt(ll y[], int len, int ifft = 1) \n    {\n        __change(y, len);\n        for (int h = 2; h &lt;= len; h &lt;&lt;= 1) // \u5408\u5e76\u7684\u957f\u5ea6\n        {\n            //complex&lt;double&gt; w_n(cos(2 * PI / h), sin(ifft * 2 * PI / h)); //\u5bf9\u5e94\u957f\u5ea6\u7684\u5355\u4f4d\u590d\u6839\n            ll gn;\n            if(ifft==1) gn=__ksm(primitive_root,((ll)Mod-1)/h,Mod); //gn\n            else gn=__ksm(primitive_root,((ll)Mod-1)/h*(h-1),Mod);  //gn^-1\n            //else gn=ksm(332748118,(Mod-1)/h,Mod);\n            for (int j = 0; j &lt; len; j += h) //\u8d77\u59cb\u4f4d\u7f6e\n            {\n                //complex&lt;double&gt; w(1, 0);            //\u521d\u59cb\u7684w_n^k\n                ll g=1;\n                for (int k = j; k &lt; j + h / 2; k++) // \u904d\u5386\u4f4d\u7f6e\n                {\n                    ll u = y[k], v = (g * y[k + h / 2]%Mod); //\u5076\u6570\u9879\u3001\u5947\u6570\u9879\n                    y[k] = (u + v+Mod)%Mod;\n                    y[k + h / 2] = (u - v+Mod)%Mod;\n                    //w *= w_n;\n                    //debug\n                    //cout&lt;&lt;k&lt;&lt;\":\"&lt;&lt;y[k]&lt;&lt;endl;\n                    //cout&lt;&lt;k+h/2&lt;&lt;\":\"&lt;&lt;y[k+h/2]&lt;&lt;endl;\n\n                    g=(g*gn)%Mod;\n                }\n            }\n        }\n        if (ifft == -1)\n        {\n            ll len_inv=__ksm(len,Mod-2,Mod);\n            for (int i = 0; i &lt; len; i++)\n            {\n                y[i] = y[i] * len_inv %Mod;\n            }\n        }\n    }\n\n    //\u5bf9\u70b9\u503c\u8868\u793a\u6cd5\u7684\u6570\u7ec4y1\u3001y2\u505a\u4e58\u6cd5\u4fdd\u5b58\u81f3y3\u4e2d\u3002\n    void multi(ll y1[],ll y2[],ll y3[],int len) \n    {\n        for(int i=0;i&lt;len;i++)\n        {\n            y3[i]=(y1[i]*y2[i]%Mod+Mod)%Mod;\n        }\n    }\n}\nusing namespace NTT;\n\nint n,m;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin&gt;&gt;n&gt;&gt;m;\n    n++,m++;\n    for(int i=0;i&lt;n;i++)\n    {\n        cin&gt;&gt;s1[i];\n    }\n    for(int i=0;i&lt;m;i++)\n    {\n        cin&gt;&gt;s2[i];\n    }\n    int len=getlen2(n,m);//*2\uff0c\u4e0d\u7136\u8fdb\u4f4d\u4f1a\u70b8\u6389\uff0c\u5e76\u4e14\ud83e\udd8b\u53d8\u6362\u4f1a\u9519\n    ntt(s1,len);\n    ntt(s2,len);\n    multi(s1,s2,s3,len);\n    ntt(s3,len,-1);\n\n    for(int i=0;i&lt;(n-1)+(m-1)+1;i++)\n    {\n        cout&lt;&lt;s3[i]&lt;&lt;\" \";\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#fwt","title":"FWT","text":"<p>\u7528\u4e8e\u89e3\u51b3\u4e0e\u4f4d\u8fd0\u7b97\u6709\u5173\u7684\u5377\u79ef\u95ee\u9898\uff1a\\(\\vec c=\\vec a \\oplus \\vec b\\) $$ C_i=\\sum_{i=j|k}A_j B_k $$ \u5176\u4e2d\u7ad6\u7ebf\u8868\u793a\u6216\u3001\u4e0e\u548c\u5f02\u6216\u4e09\u79cd\u8fd0\u7b97\u3002\u7ed3\u679c\u5bf9Mod\u53d6\u6a21\u3002</p> <p>\u5bf9\u6216\u8fd0\u7b97\u6765\u8bf4\uff0c\u6784\u9020\uff1a $$ A'=FWT[A]:A'i=\\sumA_j $$ \u4e5f\u5373FWT\u53d8\u6362\u540eA'_i\u8868\u793a\u4e8c\u8fdb\u5236\u4e0b\u76841\u662fi\u7684\u5b50\u96c6\u7684Aj\u7684\u603b\u548c\u3002</p> Funs || Methods Reliance Time Complexity Inputs Outputs Description fwt nlogn \u8f93\u5165\u590d\u6570\u6570\u7ec4y\u3001\u957f\u5ea6len\u3001\u4e09\u79cd\u8fd0\u7b97\u63a7\u5236\u7b26bitcal\u3001ifft=1\u3002 \u4fee\u6539\u6570\u7ec4y\u4f5c\u4e3a\u7ed3\u679c\u3002 \u4f5cFWT\u53d8\u6362\uff08ifft=-1\u5219\u53cd\u8fc7\u6765\uff09\u7684\u6570\u7ec4\uff1aifft\u4e3a1\u65f6\u505afft\uff0c-1\u5219\u505aifft\u3002bitcal\u4e3a1\u30012\u30013\u65f6\u5206\u522b\u8868\u793a\u5bf9or\u3001and\u548cxor\u4e09\u79cd\u8fd0\u7b97\u505aFWT\u3002 multi n \u8f93\u5165\u590d\u6570\u6570\u7ec4y1\u3001y2\u3001y3\uff0c\u5e42\u957flen \u4fee\u6539\u6570\u7ec4y3\u4f5c\u4e3a\u7ed3\u679c\u3002 \u5bf9\u6570\u7ec4y1\u3001y2\u505a\u4e58\u6cd5\uff08\u6a21\u6570\u4e3aMod\uff09\u4fdd\u5b58\u81f3y3\u4e2d\u3002 <pre><code>//luogu 4717\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\n#include &lt;algorithm&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\nusing namespace std;\ntypedef long long ll;\n\n\nnamespace FWT\n{\n    const int N=2e5+10; //N: \u957f\u5ea6\u4e0a\u9650\n    const int Mod=998244353,inv2=499122177; //Mod:\u6a21\u6570 inv2: pow(2,998244353-2,998244353)\n\n    //public\n    ll s1[N*2],s2[N*2],s3[N*2]; //s1,s2,s3\uff1a\u8f93\u5165\u7cfb\u6570\u8868\u793a\u6cd5\u7528\u7684\u6570\u7ec4\n\n    //bitcal: 1 or ;  2 and ; 3 xor\n    void fwt(ll y[],int len,int bitcal,int ifft=1)\n    {\n        for(int h=2;h&lt;=len;h&lt;&lt;=1)\n        {\n            for(int j=0;j&lt;len;j+=h) //initiative position\n            {\n                for (int k = j; k &lt; j + h / 2; k++) // traverse \n                {\n                    ll u=y[k], v=y[k+h/2];\n                    if(ifft==1)\n                    {\n                        if(bitcal==3) //xor \uff08\u540c\u6216\u5c31\u5bf9\u8c03+-\u7b26\u53f7\uff0c\u4e0b\u540c\uff09\n                        {\n                            y[k]=(u+v)%Mod;\n                            y[k+h/2]=(u-v+Mod)%Mod;\n                        }\n                        else if(bitcal==1) //or\n                        {\n                            //y[k]=u;\n                            y[k+h/2]=(u+v)%Mod;\n                        }\n                        else if(bitcal==2)// and\n                        {\n                            y[k]=(u+v)%Mod;\n                            //y[k+h/2]=(v);\n                        }\n                    }\n                    else\n                    {\n                        if(bitcal==3) //xor\n                        {\n                            y[k]=(u+v)*inv2%Mod;\n                            y[k+h/2]=((u-v)*inv2%Mod+Mod)%Mod;\n                        }\n                        else if(bitcal==1) //or\n                        {\n                            //y[k]=u;\n                            y[k+h/2]=(v-u+Mod)%Mod;\n                        }\n                        else if(bitcal==2)// and\n                        {\n                            y[k]=(u-v+Mod)%Mod;\n                            //y[k+h/2]=(v);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //\u70b9\u503c\u8868\u793a\u6cd5\u591a\u9879\u5f0f\u7684\u4e58\u6cd5\uff0c\u8f93\u5165y1,y2\u662f\u70b9\u503c\u8868\u793a\u6cd5\u4e0b\u7684\u591a\u9879\u5f0f\n    void multi(ll y1[],ll y2[],ll y3[],int len) \n    {\n        for(int i=0;i&lt;len;i++)\n        {\n            y3[i]=(y1[i]*y2[i]%Mod+Mod)%Mod;\n        }\n    }\n}\nusing namespace FWT;\n\nll A[N],B[N];\nint n;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin&gt;&gt;n;\n    n=(1&lt;&lt;n);\n    for(int i=0;i&lt;n;i++)\n    {\n        cin&gt;&gt;A[i];\n    }\n    for(int i=0;i&lt;n;i++)\n    {\n        cin&gt;&gt;B[i];\n    }\n    int len=n;\n    //while(len&lt;n) len&lt;&lt;=1;\n    //or\n    memcpy(s1,A,sizeof(A));\n    memcpy(s2,B,sizeof(B));\n    fwt(s1,len,1);\n    fwt(s2,len,1);\n    multi(s1,s2,s3,len);\n    fwt(s3,len,1,-1);\n    for(int i=0;i&lt;n;i++)\n        cout&lt;&lt;s3[i]&lt;&lt;\" \";\n    cout&lt;&lt;endl;\n\n    //and\n    memcpy(s1,A,sizeof(A));\n    memcpy(s2,B,sizeof(B));\n    fwt(s1,len,2);\n    fwt(s2,len,2);\n    multi(s1,s2,s3,len);\n    fwt(s3,len,2,-1);\n    for(int i=0;i&lt;n;i++)\n        cout&lt;&lt;s3[i]&lt;&lt;\" \";\n    cout&lt;&lt;endl;\n\n    //xor\n    memcpy(s1,A,sizeof(A));\n    memcpy(s2,B,sizeof(B));\n    fwt(s1,len,3);\n    fwt(s2,len,3);\n    multi(s1,s2,s3,len);\n    fwt(s3,len,3,-1);\n    for(int i=0;i&lt;n;i++)\n        cout&lt;&lt;s3[i]&lt;&lt;\" \";\n    cout&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#fft_1","title":"\u5206\u6cbbFFT","text":"<p>\u53ef\u4ee5\u5feb\u901f\u8ba1\u7b97\u4e0b\u6807\u8303\u56f4\u57280 to n-1\u7684\u5e8f\u5217f\uff1a\u7ed9\u5b9a\u4e0b\u6807\u57281 to n-1 \u7684\u5e8f\u5217g\uff0c\u8ba1\u7b97 $$ f_i=\\sum_{j=1}^if_{i-j}g_{j} $$</p> <pre><code>//\u5b9e\u9645\u4e0a\u8981\u7528NTT\u2026\u2026\n\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace NTT\n{\n    const int N = 2e5 + 5,Mod=998244353; //N\uff1a\u957f\u5ea6\u4e0a\u9650, Mod: \u9ed8\u8ba4\u6a21\u6570\n    const double PI = acos(-1.0);//Pi\n    const int primitive_root=3; //primitive-root: 3\n\n    //public\n    // ll s1[N * 2], s2[N * 2], s3[N * 2]; //s1,s2,s3\uff1a\u8f93\u5165\u7cfb\u6570\u8868\u793a\u6cd5\u7528\u7684\u6570\u7ec4\n\n    //local\n    int rev[N * 2]; //rev\uff1a\ud83e\udd8b\u53d8\u6362\u7528\u6570\u7ec4\n\n    //\u5feb\u901f\u5e42\n    long long __ksm(long long a,long long b,long long Mod)\n    {\n        long long ans=1;\n        while(b)\n        {\n            if(b&amp;1) ans=(ans*a)%Mod;\n            a=(a*a)%Mod;\n            b&gt;&gt;=1;\n        }\n        return ans;\n    }\n\n    //\u9884\u5904\u7406\ud83e\udd8b\u53d8\u6362\n    void __pre_rev(int len) \n    {\n        rev[0] = 0;\n        for (int i = 1; i &lt;= len; i++)\n        {\n            rev[i] = rev[i &gt;&gt; 1] &gt;&gt; 1;\n            if (i &amp; 1)\n            {\n                rev[i] |= len &gt;&gt; 1;\n            }\n        }\n    }\n\n    // \ud83e\udd8b\u53d8\u6362\n    void __change(ll y[], int len) \n    {\n        __pre_rev(len);\n        for (int i = 0; i &lt; len; i++)\n        {\n            if (i &lt; rev[i])\n            {\n                swap(y[i], y[rev[i]]);\n            }\n        }\n    }\n\n    //\u53d6\u5f97\u6bd4n\u5927\u7684\u5e42\u957flen\n    int getlen1(int n)\n    {\n        int len=1;\n        while (len&lt;n) {\n            len&lt;&lt;=1;\n        }\n        return len;\n    }\n\n    //\u53d6\u5f97\u6bd4len1\\*2\u3001len2\\*2\u90fd\u5927\u7684\u5e42\u957f\n    int getlen2(int len1,int len2)\n    {\n        int len = 1;\n        while (len &lt; len1 * 2 || len &lt; len2 * 2)\n            len &lt;&lt;= 1;  //*2\uff0c\u4e0d\u7136\u8fdb\u4f4d\u4f1a\u70b8\u6389\uff0c\u5e76\u4e14\ud83e\udd8b\u53d8\u6362\u4f1a\u9519\n        return len;\n    }\n\n    //\u5f97\u5230\u7531\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u6362\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\uff08ifft=-1\u5219\u53cd\u8fc7\u6765\uff09\u7684\u6570\u7ec4\uff1aifft\u4e3a1\u65f6\u505afft\uff0c-1\u5219\u505aifft\u3002\n    void ntt(ll y[], int len, int ifft = 1) \n    {\n        __change(y, len);\n        for (int h = 2; h &lt;= len; h &lt;&lt;= 1) // \u5408\u5e76\u7684\u957f\u5ea6\n        {\n            //complex&lt;double&gt; w_n(cos(2 * PI / h), sin(ifft * 2 * PI / h)); //\u5bf9\u5e94\u957f\u5ea6\u7684\u5355\u4f4d\u590d\u6839\n            ll gn;\n            if(ifft==1) gn=__ksm(primitive_root,((ll)Mod-1)/h,Mod); //gn\n            else gn=__ksm(primitive_root,((ll)Mod-1)/h*(h-1),Mod);  //gn^-1\n            //else gn=ksm(332748118,(Mod-1)/h,Mod);\n            for (int j = 0; j &lt; len; j += h) //\u8d77\u59cb\u4f4d\u7f6e\n            {\n                //complex&lt;double&gt; w(1, 0);            //\u521d\u59cb\u7684w_n^k\n                ll g=1;\n                for (int k = j; k &lt; j + h / 2; k++) // \u904d\u5386\u4f4d\u7f6e\n                {\n                    ll u = y[k], v = (g * y[k + h / 2]%Mod); //\u5076\u6570\u9879\u3001\u5947\u6570\u9879\n                    y[k] = (u + v+Mod)%Mod;\n                    y[k + h / 2] = (u - v+Mod)%Mod;\n                    //w *= w_n;\n                    //debug\n                    //cout&lt;&lt;k&lt;&lt;\":\"&lt;&lt;y[k]&lt;&lt;endl;\n                    //cout&lt;&lt;k+h/2&lt;&lt;\":\"&lt;&lt;y[k+h/2]&lt;&lt;endl;\n\n                    g=(g*gn)%Mod;\n                }\n            }\n        }\n        if (ifft == -1)\n        {\n            ll len_inv=__ksm(len,Mod-2,Mod);\n            for (int i = 0; i &lt; len; i++)\n            {\n                y[i] = y[i] * len_inv %Mod;\n            }\n        }\n    }\n\n    //\u5bf9\u70b9\u503c\u8868\u793a\u6cd5\u7684\u6570\u7ec4y1\u3001y2\u505a\u4e58\u6cd5\u4fdd\u5b58\u81f3y3\u4e2d\u3002\n    void multi(ll y1[],ll y2[],ll y3[],int len) \n    {\n        for(int i=0;i&lt;len;i++)\n        {\n            y3[i]=(y1[i]*y2[i]%Mod+Mod)%Mod;\n        }\n    }\n}\nusing namespace NTT;\n\n\nnamespace CDQ_FFT\n{\n    int n;\n    ll ans[N]; \n    ll gg[N*2];\n    ll g[N*2],f[N*2];\n    //ans\uff1a\u7b54\u6848\u5e8f\u5217f\uff0c\u6c42\u89e3solve(l,r)\u65f6\uff0cl~mid\u7684\u7b54\u6848\u5e8f\u5217f\u5df2\u7ecf\u6c42\u51fa\uff0c\u800cmid+1~r\u4e2d\u4ec5\u4ec5\u4fdd\u5b58\u4e86\u90e8\u5206\u8d21\u732e\n    //gg\uff1a\u8f93\u5165\u7684g\u5e8f\u5217\n    //g\u3001f:\u7528\u4e8entt\u8ba1\u7b97\u7528\u7684\u5e8f\u5217\uff0c\u5728\u505a\u5206\u6cbb\u65f6\u8981\u53cd\u590d\u5199\u5165\n\n    //\u5bf9l~r\u8303\u56f4\u5185\u7684\u5e8f\u5217\u505a\u5206\u6cbbntt\n    //\u6ce8\u610f\uff1a\u4e0d\u53ef\u8c03\u6362\u5b50\u5206\u6cbb\u7684\u8c03\u7528\u987a\u5e8f\uff08\u63d0\u524d\u8c03\u7528\u4f1a\u5bfc\u81f4\u4f7f\u7528\u4e0d\u5b8c\u6574\u7684\u8d21\u732e\u503c\u53bb\u8ba1\u7b97\u65b0\u8d21\u732e\uff09\n    void solve(int l,int r)\n    {\n        if(l==r)\n            return ;\n        int mid=(l+r)&gt;&gt;1;\n\n        solve(l,mid);//\u5206\u6cbb\u505al~mid\u8303\u56f4\u5185\u7684ntt\n        //\u63a5\u4e0b\u6765\u8ba1\u7b97l~mid\u8303\u56f4\u5185\u7684f(0~mid)\u5bf9mid+1~r\u7684f\u7684\u8d21\u732e\u3002\n\n        int len=r-l+1;\n        len=getlen1(len);\n\n        //copy\n        for(int i=0;i&lt;len;i++) \n        {\n            g[i]=gg[i];\n        }\n        int j=0;\n        for(int i=l;i&lt;=mid;i++,j++)\n        {\n            f[j]=ans[i];  //\u6620\u5c04\u5173\u7cfb\uff1al-&gt;0, l+1-&gt;1\n        }\n        for(int i=mid+1;i&lt;=l+len-1;i++,j++)\n        {\n            f[j]=0;\n        }\n\n        ntt(g,len);\n        ntt(f,len);\n        multi(g,f,f,len);\n        ntt(f,len,-1);\n\n        for(int i=mid+1;i&lt;=r;i++)\n        {\n            ans[i]=(ans[i]+f[i-l])%Mod; //\u8fd9\u91cc\u5957\u7528\u4e0a\u9762\u7684\u6620\u5c04\u5173\u7cfb\n        }\n\n        solve(mid+1,r);//\u5206\u6cbb\u505amid+1~r\u8303\u56f4\u5185\u7684ntt\n    }\n}\nusing namespace CDQ_FFT;\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n-1;i++)\n    {\n        cin&gt;&gt;gg[i];\n    }\n    ans[0]=1;\n    solve(0,n-1);\n\n    for(int i=0;i&lt;=n-1;i++)\n    {\n        cout&lt;&lt;ans[i]&lt;&lt;\" \";\n    }\n\n\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_27","title":"\u2b50\u62c9\u683c\u6717\u65e5\u63d2\u503c","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#luogu-4791-lagrange","title":"luogu 4791 lagrange","text":"<pre><code>// \u62c9\u683c\u6717\u65e5\u63d2\u503c\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nconst int N=2e3+10;\nconst int Mod=998244353;\nlong long x[N],y[N],n,k;\n\nlong long ksm(long long a,long long b,long long Mod)\n{\n    long long ans=1;\n    while(b)\n    {\n        if(b&amp;1) ans=ans*a%Mod;\n        a=(a*a)%Mod;\n        b&gt;&gt;=1;\n    }\n    return ans;\n}\n\nlong long lagrange()\n{\n    long long fz,fm,temp,ans=0;\n\n    for(int i=1;i&lt;=n;i++)\n    {\n        fz=fm=1;\n        temp=y[i];\n        for(int j=1;j&lt;=n;j++)\n        {\n            if(j==i) continue;\n            fz=(fz*(k-x[j]+Mod)%Mod)%Mod;\n            fm=(fm*(x[i]-x[j]+Mod)%Mod)%Mod;\n        }\n        temp=(temp*fz)%Mod;\n        temp=(temp*ksm(fm,Mod-2,Mod))%Mod;\n\n        ans=(ans+temp)%Mod;\n    }\n    return ans;\n\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);cout.tie(0);\n    cin&gt;&gt;n&gt;&gt;k;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;x[i]&gt;&gt;y[i];\n    }\n    cout&lt;&lt;lagrange()&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_28","title":"\u89c4\u8303\u7ec4\u5408\u6570","text":"<pre><code>long long C(long long y,long long x)\n{\n    if(y&lt;0 || x&lt;0 || y&lt;x) return 0;//No sense\n    y%=Mod; //x far below than Mod so that x%Mod==x\n    if(y==0 &amp;&amp; x==0) return 1;\n    long long ans=1;\n    for(long long j=y;j&gt;=y-x+1;j--)\n    {\n        ans*=j;\n        ans%=Mod;\n    }\n    ans*=f_inv[x];\n    return ans%Mod;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_29","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#st","title":"ST\u8868\uff08\u4e00\u7ef4\uff09","text":"<pre><code>template &lt;typename T&gt;\nstruct ST_table {\n    static const int N=2e5+10,M=25;\n\n    T ma[N][M],mi[N][M];\n    int n,t;\n\n    void init(T a[]) {\n        t=log2(n)+1;\n        for (int i = 1; i &lt;= n; i++)\n            ma[i][0] = ma[i][0] = make_pair(a[i], i);\n        for (int k = 1; k &lt; t; k++) {\n            for (int i = 1; i &lt;= n - (1 &lt;&lt; k) + 1; i++) {\n            ma[i][k] = max(ma[i][k - 1], ma[i + (1 &lt;&lt; (k - 1))][k - 1]);\n            mi[i][k] = min(mi[i][k - 1], mi[i + (1 &lt;&lt; (k - 1))][k - 1]);\n            }\n        }\n    }\n\n    T ask_mi(int l, int r) {\n        int k = (int)log2(r - l + 1);\n        return min(mi[l][k], mi[r - (1 &lt;&lt; k) + 1][k]);\n    }\n\n    T ask_ma(int l, int r) {\n        int k = (int)log2(r - l + 1);\n        return max(ma[l][k], ma[r - (1 &lt;&lt; k) + 1][k]);\n    }\n};\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_30","title":"\u7ebf\u6bb5\u6811","text":"<p>\u540c\u65f6\u652f\u6301\u52a0\u6cd5\u3001\u4e58\u6cd5\u64cd\u4f5c\uff08\u5bf9p\u53d6\u6a21\uff09\u7684\u7ebf\u6bb5\u6811\u3002\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u5176\u6240\u7ef4\u62a4\u7684\u533a\u95f4\u5927\u5c0f\u3002</p> Funs || Methods Reliance Time Complexity Inputs Outputs Description __tagdown 1 u\uff1a\u6811\u8282\u70b9\u4e0b\u6807\u3002ln:\u5de6\u5b50\u6811\u5bf9\u5e94\u533a\u95f4\u957f\u5ea6\u3002rn\uff1a\u53f3\u5b50\u6811\u5bf9\u5e94\u533a\u95f4\u957f\u5ea6 \u6807\u8bb0\u4e0b\u653e\uff1a\u5148\u66f4\u65b0\u4e58\u6cd5\u6807\u8bb0\u540e\u66f4\u65b0\u52a0\u6cd5\u6807\u8bb0\uff0c\u6700\u540e\u6e05\u7a7au\u7684\u6807\u8bb0\u3002 build_tree nlogn u\uff1a\u6811\u8282\u70b9\u4e0b\u6807\uff08\u521d\u59cb\u8c03\u7528\u65f6u=1\uff09\u3002l\u3001r\uff1a\u8282\u70b9\u7ba1\u8f96\u7684\u5de6\u53f3\u7aef\u70b9 \u521d\u59cb\u5316\u70b9\u6bb5\u6811\uff1a\u66f4\u65b0\u6bcf\u4e2a\u8282\u70b9\u7684val\u503c\u4e3a\u5b69\u5b50val\u503c\u548c\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u503c\u88ab\u8bbe\u4e3aa[l]\u3002 asksum build_tree logn u\uff1a\u6811\u8282\u70b9\u4e0b\u6807\u3002L\u3001R\uff1a\u8be2\u95ee\u533a\u95f4\u3002 \u533a\u95f4\u548c \u8fd4\u56de\u533a\u95f4L\u3001R\u7684\u548c\u3002 segupd build_tree logn u\uff1a\u6811\u8282\u70b9\u4e0b\u6807\uff08\u521d\u59cb\u8c03\u7528\u65f6u=1\uff09\u3002L\u3001R\uff1a\u8be2\u95ee\u533a\u95f4\u3002addval\uff1a\u589e\u52a0\u7684\u503c \u533a\u95f4L,R\u52a0\u6cd5\u66f4\u65b0 segupd2 build_tree logn u\uff1a\u6811\u8282\u70b9\u4e0b\u6807\uff08\u521d\u59cb\u8c03\u7528\u65f6u=1\uff09\u3002L\u3001R\uff1a\u8be2\u95ee\u533a\u95f4\u3002addval\uff1a\u4e58\u6cd5\u7684\u503c \u533a\u95f4L,R\u4e58\u6cd5\u66f4\u65b0 <pre><code>//Luogu 3373 Segment t 2 (\u4e0b\u6807\u4fdd\u5b58\u7248)\n#include &lt;iostream&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Segment_tree\n{\n    const int MAXN=1e5+10; //MAXN\uff1a\u7ebf\u6bb5\u6811\u5927\u5c0f\u4e0a\u9650\n\n    //public\n    ll n, m, a[MAXN], p; //n:\u957f\u5ea6\uff0c m\uff1a\u8be2\u95ee\u4e2a\u6570\uff0c a\uff1a\u521d\u59cb\u6570\u7ec4\u4e2a\u6570\uff0c p\uff1a\u6a21\u6570\n\n    template&lt;typename Ty, int MAXN = MAXN&gt;\n    struct SEGMENT_TREE\n    {\n        struct NODE\n        {\n            Ty val, tagplus, tagmulti; //val, tagplus, tagmulti\uff1a\u503c\uff0c\u52a0\u6cd5\u6807\u8bb0\uff0c\u4e58\u6cd5\u6807\u8bb0\n            Ty l, r; //l\u3001r\uff1a\u7ebf\u6bb5\u6811\u8282\u70b9\u6240\u7ef4\u62a4\u7684\u533a\u95f4\n        }t[MAXN * 4];\n\n        //\u6807\u8bb0\u4e0b\u653e\uff1a\u5148\u66f4\u65b0\u4e58\u6cd5\u6807\u8bb0\u540e\u66f4\u65b0\u52a0\u6cd5\u6807\u8bb0\uff0c\u6700\u540e\u6e05\u7a7au\u7684\u6807\u8bb0\u3002\n        //ln:\u5de6\u5b50\u6811\u5bf9\u5e94\u533a\u95f4\u957f\u5ea6 rn\uff1a\u53f3\u5b50\u6811\u5bf9\u5e94\u533a\u95f4\u957f\u5ea6\n        void __tagdown(Ty u, Ty ln, Ty rn) \n        {   \n            //\u6309\u5f53\u524d\u8282\u70b9\uff08u0\uff09\u6807\u8bb0\u66f4\u65b0\u5de6\u53f3\u513f\u5b50\u7684\u503c\n            t[u * 2].val = (t[u * 2].val * t[u].tagmulti + t[u].tagplus * ln) % p;\n            t[u * 2 + 1].val = (t[u * 2 + 1].val * t[u].tagmulti + t[u].tagplus * rn) % p;\n            //\u66f4\u65b0\u5de6\u53f3\u513f\u5b50\u4e58\u6cd5\u6807\u8bb0(\u5148\u4e58\u540e\u52a0\u6cd5)\n            t[u * 2].tagmulti = (t[u * 2].tagmulti * t[u].tagmulti) % p;\n            t[u * 2 + 1].tagmulti = (t[u * 2 + 1].tagmulti * t[u].tagmulti) % p;\n            //\u66f4\u65b0\u5de6\u53f3\u513f\u5b50\u52a0\u6cd5\u6807\u8bb0\n            t[u * 2].tagplus = (t[u * 2].tagplus * t[u].tagmulti + t[u].tagplus) % p;\n            t[u * 2 + 1].tagplus = (t[u * 2 + 1].tagplus * t[u].tagmulti + t[u].tagplus) % p;\n            //\u91cd\u8bbe\u6807\u8bb0\n            t[u].tagplus = 0;\n            t[u].tagmulti = 1;\n        }\n\n        //\u521d\u59cb\u5316\u70b9\u6bb5\u6811\uff1a\u66f4\u65b0\u6bcf\u4e2a\u8282\u70b9\u7684val\u503c\u4e3a\u5b69\u5b50val\u503c\u548c\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u503c\u88ab\u8bbe\u4e3aa[l]\u3002\n        void build_tree(Ty u, Ty l, Ty r)\n        {\n            t[u].tagplus = 0;\n            t[u].tagmulti = 1;\n            t[u].l = l;\n            t[u].r = r;\n            if (l == r)\n            {\n                t[u].val = a[l];\n                return;\n            }\n            ll mid = (l + r) &gt;&gt; 1;\n            build_tree(u * 2, l, mid);\n            build_tree(u * 2 + 1, mid + 1, r);\n            t[u].val = (t[u * 2].val + t[u * 2 + 1].val) % p;\n        }\n\n        Ty asksum(Ty u, Ty L, Ty R) //LR:\u8be2\u95ee lr\uff1a\u8282\u70b9\n        {\n            if (L &lt;= t[u].l &amp;&amp; t[u].r &lt;= R)\n                return t[u].val % p;\n            Ty mid = (t[u].l + t[u].r) &gt;&gt; 1, ans = 0;\n            __tagdown(u, mid - t[u].l + 1, t[u].r - mid);\n            if (L &lt;= mid)\n            {\n                ans += asksum(u * 2, L, R);\n                ans %= p;\n            }\n            if (R &gt; mid)\n            {\n                ans += asksum(u * 2 + 1, L, R);\n                ans %= p;\n            }\n            return ans;\n        }\n\n        //\u52a0\u6cd5\u66f4\u65b0\n        void segupd(Ty u, Ty L, Ty R, Ty addval) \n        {\n            if (L &lt;= t[u].l &amp;&amp; t[u].r &lt;= R)\n            {\n                t[u].val = (t[u].val + addval * (t[u].r - t[u].l + 1)) % p;\n                t[u].tagplus = (addval + t[u].tagplus) % p;\n                return;\n            }\n            ll mid = (t[u].l + t[u].r) &gt;&gt; 1;\n            __tagdown(u, mid - t[u].l + 1, t[u].r - mid);\n            if (L &lt;= mid)\n                segupd(u * 2, L, R, addval);\n            if (mid &lt; R)\n                segupd(u * 2 + 1, L, R, addval);\n            t[u].val = (t[u * 2].val + t[u * 2 + 1].val) % p;\n        }\n\n        //\u4e58\u6cd5\u66f4\u65b0\n        void segupd2(Ty u, Ty L, Ty R, Ty addval) \n        {\n            if (L &lt;= t[u].l &amp;&amp; t[u].r &lt;= R)\n            {\n                t[u].tagplus = (t[u].tagplus * addval) % p;\n                t[u].tagmulti = (t[u].tagmulti * addval) % p;\n                t[u].val = (t[u].val * addval) % p;\n                return;\n            }\n            Ty mid = (t[u].l + t[u].r) &gt;&gt; 1;\n            __tagdown(u, mid - t[u].l + 1, t[u].r - mid);\n            if (L &lt;= mid)\n                segupd2(u * 2, L, R, addval);\n            if (mid &lt; R)\n                segupd2(u * 2 + 1, L, R, addval);\n            t[u].val = (t[u * 2].val + t[u * 2 + 1].val) % p;\n        }\n    };\n} // namespace Segment_tree\nusing namespace Segment_tree;\n\nSEGMENT_TREE&lt;ll&gt; tree;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (ll i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n    }\n    tree.build_tree(1, 1, n);\n    for (ll i = 1; i &lt;= m; i++)\n    {\n        ll caozuo, l, r;\n        cin &gt;&gt; caozuo &gt;&gt; l &gt;&gt; r;\n        if (caozuo == 2)\n        {\n            ll k;\n            cin &gt;&gt; k;\n            tree.segupd(1, l, r, k);\n        }\n        else if (caozuo == 1)\n        {\n            ll k;\n            cin &gt;&gt; k;\n            tree.segupd2(1, l, r, k);\n        }\n        else\n        {\n            cout &lt;&lt; tree.asksum(1, l, r) &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_31","title":"\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811","text":"<p>\u9759\u6001\u533a\u95f4\u7b2c k \u5c0f\u3002</p> <p>\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f\u6743\u503c(\u4e5f\u5373\uff0c\u6570\u7ec4\u7d22\u5f15\u4ee3\u8868\u503c\u672c\u8eab\uff0c\u6570\u7ec4\u5bf9\u5e94\u7684\u503c\u8868\u793a\u8fd9\u4e2a\u503c\u6709\u591a\u5c11\u4e2a)\u3002\u539f\u6570\u7ec4\u7684\u533a\u95f4\u5bf9\u5e94\u5230\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u5e94\u8be5\u662f\u4e0d\u540c\u7248\u672c\u7684\u6811\u6839\u3002</p> <ul> <li>\u8c03\u7528\u524d\u9700\u8981\u624b\u52a8\u8bbe\u5b9arange_upb\u3002</li> </ul> Funs || Methods Reliance Time Complexity Inputs Outputs Description build_tree NlogN l\uff0cr: \u6743\u503c\u5de6\u53f3\u8fb9\u754c \u521d\u59cb\u5316\u6743\u503c\u7ebf\u6bb5\u6811 change build_tree logN u\uff1a\u4e0a\u4e00\u7248\u672c\u6811\u6839\u4e0b\u6807\u3002l\u3001r\uff1a\u6743\u503c\u5de6\u53f3\u8fb9\u754c\u3002pos\uff1a\u4fee\u6539\u6743\u503c\u7684\u4f4d\u7f6e\u3002val(=1)\uff1a\u4fee\u6539\u6743\u503c\u5927\u5c0f \u5f53\u524d\u7248\u672c\u6839\u4e0b\u6807 \u5728\u4e0a\u4e00\u7248\u672c\u7684\u57fa\u7840\u4e0a\uff0c\u7ed9pos\u4f4d\u7f6e\u7684\u4e2a\u6570+1 ask build_tree logN pa\u3001pb\uff1a\u65e7\u7248\u672c\u3001\u65b0\u7248\u672c\u7ebf\u6bb5\u6811\u7684\u6839\u3002l\u3001r\uff1a\u4e8c\u5206\u6743\u503c\u8303\u56f4\uff08\u521d\u59cb\u4e3a1\u548crange_upb\uff09\u3002rnk\uff1a\u7b2crnk\u5c0f\u7684\u6570 \u4ecb\u4e8e\u65e7\u7248\u672c\u3001\u65b0\u7248\u672c\u7ebf\u6bb5\u6811\u4e4b\u95f4\u7684\u7b2crnk\u5c0f\u6570 \u8fd4\u56de\u4ecb\u4e8e\u65e7\u7248\u672c\u3001\u65b0\u7248\u672c\u7ebf\u6bb5\u6811\u4e4b\u95f4\uff08\u5bf9\u5e94\u6570\u7ec4\u533a\u95f4L\u3001R\uff09\u7684\u7b2crnk\u5c0f\u6570\u3002\u5982\u679c\u79bb\u6563\u5316\u4e86\u5219\u8fd9\u4e2a\u8fd4\u56de\u503c\u5e94\u8be5\u8868\u793a\u7d22\u5f15\u3002 <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;map&gt;\n#include &lt;algorithm&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Chairman_Tree {\n    const int N=2e5+5;\n\n    //public\n    int n,m; //n:\u6570\u7684\u4e2a\u6570 m:\u8be2\u95ee\u4e2a\u6570 \uff08\u5176\u5b9e\u8fd9\u4e24\u4e2a\u53d8\u91cf\u53ef\u4ee5\u653e\u5230\u5916\u9762\u2026\u2026\uff09\n    int range_upb;// range_upb:\u6743\u503c\u8303\u56f4\u4e0a\u9650\n\n    //local\n\n    template&lt;typename Ty&gt;\n    struct CHairman_Tree \n    {\n        //public\n        int root[N]; //root: \u4e0d\u540c\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u6811\u6839\n\n        //local\n        struct Node\n        {\n            int lc,rc; //lc\u3001rc\uff1a\u5de6\u53f3\u5b69\u5b50\u7d22\u5f15\n            Ty cnt; //cnt: \u6743\u503c\u548c\n        }t[20*N];\n        int total; //total: \u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u4e2a\u6570\n\n        //\u521d\u59cb\u5316\u6743\u503c\u7ebf\u6bb5\u6811\n        int build_tree(int l,int r)\n        {\n            int p=++total;\n            if(l==r)\n            {\n                t[p].cnt=0;\n                return p;\n            }\n            int mid=(l+r)&gt;&gt;1;\n            t[p].lc=build_tree(l,mid);\n            t[p].rc=build_tree(mid+1,r);\n            t[p].cnt=0;\n            return p;\n        }\n\n        //\u5728\u4e0a\u4e00\u7248\u672c\u7684\u57fa\u7840\u4e0a\uff0c\u7ed9pos\u4f4d\u7f6e\u7684\u4e2a\u6570+1\n        int change(int p,int l,int r,int pos,int val=1)\n        {\n            int q=++total; // new node\n            t[q]=t[p]; // copy\n            if(l==r)\n            {\n                t[q].cnt+=val;\n                return q;\n            }\n            int mid=(l+r)&gt;&gt;1;\n            if(pos&lt;=mid) t[q].lc=change(t[p].lc,l,mid,pos,val);\n            else t[q].rc=change(t[p].rc,mid+1,r,pos,val);\n            t[q].cnt=t[t[q].lc].cnt+t[t[q].rc].cnt;\n            return q;\n        }\n\n        //\u8fd4\u56de\u4ecb\u4e8e\u65e7\u7248\u672c\u3001\u65b0\u7248\u672c\u7ebf\u6bb5\u6811\u4e4b\u95f4\u7684\u7b2crnk\u5c0f\u6570\u3002\u5982\u679c\u79bb\u6563\u5316\u4e86\u5219\u8fd9\u4e2a\u8fd4\u56de\u503c\u5e94\u8be5\u8868\u793a\u7d22\u5f15\u3002\n        int ask(int pa,int pb,int l,int r,int rnk)// \u83b7\u5f97\u79bb\u6563\u5316\u540e\u7684\u503c\uff08\u5bf9\u503c\u57df\u8fdb\u884c\u4e8c\u5206\uff09\n        {\n            if(l==r)\n            {\n                return l;\n            }\n            int mid=(l+r)&gt;&gt;1;\n            int cnt=t[t[pb].lc].cnt-t[t[pa].lc].cnt; // Count of [L,mid]\n            if(cnt&gt;=rnk) return ask(t[pa].lc,t[pb].lc,l,mid,rnk);\n            else return ask(t[pa].rc,t[pb].rc,mid+1,r,rnk-cnt);\n        }\n    };\n}\nusing namespace Chairman_Tree;\n\nnamespace Discretization {\n\n    const int N=1e6+10;\n    typedef int Ty;\n\n    //public\n    Ty a[N],b[N];\n    int dlen;\n\n    // \u590d\u5236a\u5230b\n    void copy_to_b()\n    {\n        memcpy(b, a, sizeof(a));\n    }\n\n    // \u5bf9b\u6392\u5e8f\u3001\u53bb\u91cd\uff0c\u8fd4\u56de\u53bb\u91cd\u540e\u7684\u6570\u7ec4\u957f\u5ea6\n    int sort_and_unique(int n)\n    {\n        sort(b+1,b+1+n);\n        return dlen=unique(b+1,b+1+n)-b-1;\n    }\n\n    // \u8fd4\u56de\u79bb\u6563\u5316\u540e\u7684\u503c\uff081\u5f00\u59cb\u8ba1\u6570\uff09\n    inline int get_id(Ty x)\n    {\n        return lower_bound(b+1,b+1+dlen,x)-b;\n    }\n}\n//using namespace Discretization;\n\n\nCHairman_Tree&lt;int&gt; t;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin&gt;&gt;n&gt;&gt;m;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;Discretization::a[i];\n    }\n    //\u79bb\u6563\u5316\n    Discretization::copy_to_b();\n    range_upb=Discretization::sort_and_unique(n);\n    //\u5efa\u6811\n    t.build_tree(1,range_upb);\n    //\u4fee\u6539\u5e76\u5efa\u7acb\u5386\u53f2\u7248\u672c\n    for(int i=1;i&lt;=n;i++)\n    {\n        int x=Discretization::get_id(Discretization::a[i]);\n        t.root[i]=t.change(t.root[i-1], 1, range_upb, x);\n    }\n    //\u67e5\u8be2\u533a\u95f4\u7b2ck\u5927\uff1a\u901a\u8fc7\u4e0e\u5386\u53f2\u7248\u672c\u4f5c\u5dee\u5b9e\u73b0\u6743\u503c\u4e8c\u5206\n    for(int i=1;i&lt;=m;i++)\n    {\n        int l,r,k;\n        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;\n        int index=t.ask(t.root[l-1],t.root[r],1,range_upb,k);\n        cout&lt;&lt;Discretization::b[index]&lt;&lt;endl;\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#cdq","title":"CDQ\u5206\u6cbb","text":"<pre><code>    //Luogu P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\n//\u984c\u610f\uff1a\u6c42\u6eff\u8db3aj&lt;=ai, bj&lt;=bi, cj&lt;=ci (j!=i)\u7684\u9ede\u5c0d\u6578\u91cf\uff0c\u5c0d\u65bcd in [0,n)\uff0c\u6c42f(i)=d\u7684\u6578\u91cf\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 4e5 + 10;\n\nnamespace BIT\n{\n    const int MAXN = 4e5 + 10;\n\n    template &lt;typename Ty&gt;\n    struct Bit\n    {\n        //local\n        Ty t[MAXN];\n        int __lowbit(int x)\n        {\n            return x &amp; (-x);\n        }\n\n        void add(int pos, Ty val = 1)\n        {\n            while (pos &lt; MAXN)\n            {\n                t[pos] += val;\n                pos += __lowbit(pos);\n            }\n        }\n\n        Ty ask(int pos)\n        {\n            Ty ans = 0;\n            while (pos &gt;= 1)\n            {\n                ans += t[pos];\n                pos -= __lowbit(pos);\n            }\n            return ans;\n        }\n    };\n}\nusing namespace BIT;\n\nint n, k;\nstruct P\n{\n    int x, y, z;\n    int id;\n    int cnt;\n} a[N], b[N];\nint ap;\n\nstruct Q\n{\n    int y, z;\n    int typ; //0:op , 1:query\n    int id;\n    int cnt;\n} c[N];\nint cp;\n\nBit&lt;int&gt; tree;\n\nint cnt[N];\nint ans[N];\nint ans2[N];\n\nint cmpx(const P &amp;a, const P &amp;b)\n{\n    if (a.x == b.x &amp;&amp; a.y == b.y)\n        return a.z &lt; b.z;\n    if (a.x == b.x)\n        return a.y &lt; b.y;\n    return a.x &lt; b.x;\n}\n\nint cmpq(const Q &amp;a, const Q &amp;b)\n{\n    if (a.y == b.y &amp;&amp; a.z == b.z)\n        return a.typ &lt; b.typ;\n    if (a.y == b.y)\n        return a.z &lt; b.z;\n    return a.y &lt; b.y;\n}\n\nvoid solve(int l, int r)\n{\n    if (l == r)\n    {\n        return;\n    }\n    int mid = (l + r) / 2;\n    solve(l, mid);\n    solve(mid + 1, r);\n    cp = 0;\n    for (int i = l; i &lt;= mid; i++)\n    {\n        c[++cp] = {a[i].y, a[i].z, 0, a[i].id, a[i].cnt};\n    }\n    for (int i = mid + 1; i &lt;= r; i++)\n    {\n        c[++cp] = {a[i].y, a[i].z, 1, a[i].id, a[i].cnt};\n    }\n    sort(c + 1, c + 1 + cp, cmpq);\n\n    for (int i = 1; i &lt;= cp; i++)\n    {\n        if (c[i].typ == 0) //op\n        {\n            tree.add(c[i].z, c[i].cnt);\n        }\n        else //query\n        {\n            ans[c[i].id] += tree.ask(c[i].z);\n        }\n    }\n\n    //undo change of BIT\n    for (int i = 1; i &lt;= cp; i++)\n    {\n        if (c[i].typ == 0)\n        {\n            tree.add(c[i].z, -c[i].cnt);\n        }\n    }\n}\n\nvoid my_unique()\n{\n    ap = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        if (a[ap].x == b[i].x &amp;&amp; a[ap].y == b[i].y &amp;&amp; a[ap].z == b[i].z)\n        {\n            a[ap].cnt++;\n        }\n        else\n        {\n            a[++ap] = b[i];\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; b[i].x;\n        cin &gt;&gt; b[i].y;\n        cin &gt;&gt; b[i].z;\n        b[i].id = i;\n        b[i].cnt = 1;\n    }\n    sort(b + 1, b + 1 + n, cmpx);\n    my_unique();\n    sort(a + 1, a + 1 + ap, cmpx);\n\n    for (int i = 1; i &lt;= ap; i++)\n    {\n        cnt[a[i].id] = a[i].cnt;\n    }\n\n    solve(1, ap);\n\n    for (int i = 1; i &lt;= n; i++)\n    {\n        ans[i] += cnt[i] - 1;\n        if (ans[i] &gt;= 0)\n            ans2[ans[i]] += cnt[i];\n\n        // cout&lt;&lt;ans[i]&lt;&lt;endl;\n    }\n    // cout&lt;&lt;endl;\n\n    for (int i = 0; i &lt; n; i++)\n    {\n        cout &lt;&lt; ans2[i] &lt;&lt; endl;\n    }\n\n    return 0;\n}//Luogu P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\n//\u984c\u610f\uff1a\u6c42\u6eff\u8db3aj&lt;=ai, bj&lt;=bi, cj&lt;=ci (j!=i)\u7684\u9ede\u5c0d\u6578\u91cf\uff0c\u5c0d\u65bcd in [0,n)\uff0c\u6c42f(i)=d\u7684\u6578\u91cf\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 4e5 + 10;\n\nnamespace BIT\n{\n    const int MAXN = 4e5 + 10;\n\n    template &lt;typename Ty&gt;\n    struct Bit\n    {\n        //local\n        Ty t[MAXN];\n        int __lowbit(int x)\n        {\n            return x &amp; (-x);\n        }\n\n        void add(int pos, Ty val = 1)\n        {\n            while (pos &lt; MAXN)\n            {\n                t[pos] += val;\n                pos += __lowbit(pos);\n            }\n        }\n\n        Ty ask(int pos)\n        {\n            Ty ans = 0;\n            while (pos &gt;= 1)\n            {\n                ans += t[pos];\n                pos -= __lowbit(pos);\n            }\n            return ans;\n        }\n    };\n}\nusing namespace BIT;\n\nint n, k;\nstruct P\n{\n    int x, y, z;\n    int id;\n    int cnt;\n} a[N], b[N];\nint ap;\n\nstruct Q\n{\n    int y, z;\n    int typ; //0:op , 1:query\n    int id;\n    int cnt;\n} c[N];\nint cp;\n\nBit&lt;int&gt; tree;\n\nint cnt[N];\nint ans[N];\nint ans2[N];\n\nint cmpx(const P &amp;a, const P &amp;b)\n{\n    if (a.x == b.x &amp;&amp; a.y == b.y)\n        return a.z &lt; b.z;\n    if (a.x == b.x)\n        return a.y &lt; b.y;\n    return a.x &lt; b.x;\n}\n\nint cmpq(const Q &amp;a, const Q &amp;b)\n{\n    if (a.y == b.y &amp;&amp; a.z == b.z)\n        return a.typ &lt; b.typ;\n    if (a.y == b.y)\n        return a.z &lt; b.z;\n    return a.y &lt; b.y;\n}\n\nvoid solve(int l, int r)\n{\n    if (l == r)\n    {\n        return;\n    }\n    int mid = (l + r) / 2;\n    solve(l, mid);\n    solve(mid + 1, r);\n    cp = 0;\n    for (int i = l; i &lt;= mid; i++)\n    {\n        c[++cp] = {a[i].y, a[i].z, 0, a[i].id, a[i].cnt};\n    }\n    for (int i = mid + 1; i &lt;= r; i++)\n    {\n        c[++cp] = {a[i].y, a[i].z, 1, a[i].id, a[i].cnt};\n    }\n    sort(c + 1, c + 1 + cp, cmpq);\n\n    for (int i = 1; i &lt;= cp; i++)\n    {\n        if (c[i].typ == 0) //op\n        {\n            tree.add(c[i].z, c[i].cnt);\n        }\n        else //query\n        {\n            ans[c[i].id] += tree.ask(c[i].z);\n        }\n    }\n\n    //undo change of BIT\n    for (int i = 1; i &lt;= cp; i++)\n    {\n        if (c[i].typ == 0)\n        {\n            tree.add(c[i].z, -c[i].cnt);\n        }\n    }\n}\n\nvoid my_unique()\n{\n    ap = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        if (a[ap].x == b[i].x &amp;&amp; a[ap].y == b[i].y &amp;&amp; a[ap].z == b[i].z)\n        {\n            a[ap].cnt++;\n        }\n        else\n        {\n            a[++ap] = b[i];\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; b[i].x;\n        cin &gt;&gt; b[i].y;\n        cin &gt;&gt; b[i].z;\n        b[i].id = i;\n        b[i].cnt = 1;\n    }\n    sort(b + 1, b + 1 + n, cmpx);\n    my_unique();\n    sort(a + 1, a + 1 + ap, cmpx);\n\n    for (int i = 1; i &lt;= ap; i++)\n    {\n        cnt[a[i].id] = a[i].cnt;\n    }\n\n    solve(1, ap);\n\n    for (int i = 1; i &lt;= n; i++)\n    {\n        ans[i] += cnt[i] - 1;\n        if (ans[i] &gt;= 0)\n            ans2[ans[i]] += cnt[i];\n\n        // cout&lt;&lt;ans[i]&lt;&lt;endl;\n    }\n    // cout&lt;&lt;endl;\n\n    for (int i = 0; i &lt; n; i++)\n    {\n        cout &lt;&lt; ans2[i] &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#bit","title":"\u6811\u72b6\u6570\u7ec4(BIT)","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description __lowbit 1 x x&amp;-x \u521d\u59cb\u5316\u6743\u503c\u7ebf\u6bb5\u6811 add logn pos\uff1a\u6dfb\u52a0\u7684\u4f4d\u7f6e\u3002val\uff08=1\uff09\uff1a\u6dfb\u52a0\u7684\u503c\u3002 \u5c06pos\u4f4d\u7f6e\u7684\u503c\u52a0\u4e0aval ask logn pos\uff1a\u67e5\u8be2\u7684\u524d\u7f00\u4f4d\u7f6e \u8fd41~pos\u7684\u548c \u8fd4\u56de1~pos\u7684\u548c <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nnamespace BIT {\n    const int MAXN=4e5+10;\n\n    template &lt;typename Ty&gt;\n    struct Bit\n    {\n        //local\n        Ty t[MAXN];\n        int __lowbit(int x)\n        {\n            return x&amp;(-x);\n        }\n\n        void add(int pos,Ty val=1)\n        {\n            while(pos&lt;MAXN)\n            {\n                t[pos]+=val;\n                pos+=__lowbit(pos);\n            }\n        }\n\n        Ty ask(int pos)\n        {\n            Ty ans=0;\n            while(pos&gt;=1)\n            {\n                ans+=t[pos];\n                pos-=__lowbit(pos);\n            }\n            return ans;\n        }\n    };\n}\nusing namespace BIT;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_32","title":"\u5e76\u67e5\u96c6\uff08\u6309\u79e9\u5408\u5e76\uff09","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description init n n\uff1a\u5143\u7d20\u4e2a\u6570 \u521d\u59cb\u5316\u5e76\u67e5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u4ee4\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u4e3a\u5176\u672c\u8eab getfa init 1 x\uff1a\u8282\u70b9 x\u7684\u7236\u4eb2 \u53d6\u5f97\u7236\u4eb2\u5e76\u8def\u5f84\u538b\u7f29 merge init 1 x\u3001y\uff1a\u8282\u70b9 \u5408\u5e76\u540e\u7684\u7236\u4eb2\u8282\u70b9\u3002\u82e5\u4e3a-1\u8868\u660exy\u5df2\u7ecf\u5728\u540c\u4e00\u96c6\u5408 \u5408\u5e76x\u3001y\uff08\u6309\u79e9\u5408\u5e76\uff09 check init 1 x\u3001y\uff1a\u8282\u70b9 \u662f\u5426\u5df2\u7ecf\u5728\u540c\u4e00\u96c6\u5408 \u68c0\u67e5\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408 <pre><code>#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;unordered_set&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\ntypedef long long ll;\n\nnamespace Union_find_set {\nstruct Unionfindset {\n  static const int N = 3e5 + 10;\n  // local\n  int fa[N], sz[N]; //fa,sz\uff1a\u7236\u4eb2\u548c\u79e9\u7684\u5927\u5c0f\n\n    //\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n  void init(int n) {\n    for (int i = 1; i &lt;= n; i++) {\n      fa[i] = i;\n      sz[i] = 1;\n    }\n  }\n\n    //\u53d6\u5f97\u7236\u4eb2\u5e76\u8def\u5f84\u538b\u7f29\n  int getfa(int x) {\n    if (fa[x] == x)\n      return x;\n    return fa[x] = getfa(fa[x]);\n  }\n\n    //\u5408\u5e76x\u3001y\n  int merge(int x, int y) {\n    int x_fa = getfa(x), y_fa = getfa(y);\n    if (x_fa == y_fa)\n      return -1;\n    if (sz[x_fa] &gt; sz[y_fa]) {\n      swap(x, y);\n      swap(x_fa, y_fa);\n    }\n    fa[x_fa] = y_fa;\n    sz[y_fa] += sz[x_fa];\n\n    return y_fa;\n  }\n\n    //\u68c0\u67e5\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\n  bool check(int x, int y) { return getfa(x) == getfa(y); }\n} ufs;\n} // namespace Union_find_set\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0), cout.tie(0);\n  return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#kdtree","title":"KDTree\uff08\u4e8c\u7ef4\uff09","text":"<ul> <li>\u26a0\ufe0f\uff1a\u4f7f\u7528\u524d\u9700\u8981\u5148\u5904\u7406\u6811\u4e2d\u7684s\u6570\u7ec4\u548c\u53d8\u91cfn</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace KDTREE\n{\n    typedef ll Ty;\n    const int N=2e5+10;\n\n    //\u5e73\u65b9\n    template&lt;typename T&gt;\n    T sqr(T x)\n    {\n        return x*x;\n    }\n\n    struct Node\n    {\n        Ty x,y;\n        Ty L,R,U,D;\n        int lc,rc;\n        int d;\n        //x,y:\u70b9\u7684\u5750\u6807\n        //LRUD\uff1a\u70b9\u6240\u7ba1\u8f96\u7684\u5b50\u6811\u7684\u6700\u5c0f\u77e9\u5f62\u8986\u76d6\n        //lc\uff0crc\uff1a\u5de6\u53f3\u5b69\u5b50\n        // d\uff1a\u8be5\u8282\u70b9\u5b50\u6811\u662f\u6309\u54ea\u4e00\u7ef4\u5212\u5206\u7684\uff0c1\u662f\u6309x\uff0c2\u6309y\n\n        //\u8ddd\u79bb\u7684\u5e73\u65b9\n        Ty dis2(const Node &amp;b) const\n        {\n            return sqr(x-b.x)+sqr(y-b.y);\n        }\n    };\n\n    //\u6309x\u8f74\u5750\u6807\u6bd4\u8f83\n    bool __cmpx(const Node &amp;a,const Node &amp;b) \n    {\n        return a.x&lt;b.x;\n    }\n\n    //\u6309y\u8f74\u5750\u6807\u6bd4\u8f83\n    bool __cmpy(const Node &amp;a,const Node &amp;b) \n    {\n        return a.y&lt;b.y;\n    }\n\n    //\u4e8c\u7ef4kd\u6811\uff0c\u4f7f\u7528\u524d\u9700\u8981\u5148\u6574\u597dn\u548cs\u6570\u7ec4\n    struct Kdtree\n    {\n        Node s[N];\n        int n;\n        //s:\u70b9\uff08\u9700\u8981\u9884\u5148\u8bfb\u5165\uff09\n        //n\uff1a\u70b9\u7684\u4e2a\u6570\uff08\u9700\u8981\u9884\u5148\u8bfb\u5165\uff09\n\n        //\u5efa\u6811\u65f6\u7ef4\u62a4\u5b50\u6811\n        void __upd(int p)\n        {\n            s[p].L=s[p].R=s[p].x;\n            s[p].U=s[p].D=s[p].y;\n            if(s[p].lc)\n            {   //\u6ce8\u610f\u8fd9\u91ccmin\u548cmax\u7684\u6b21\u5e8f\n                s[p].L=min(s[p].L,s[s[p].lc].L);\n                s[p].R=max(s[p].R,s[s[p].lc].R);\n                s[p].U=max(s[p].U,s[s[p].lc].U);\n                s[p].D=min(s[p].D,s[s[p].lc].D);\n            }\n            if(s[p].rc)\n            {\n                s[p].L=min(s[p].L,s[s[p].rc].L);\n                s[p].R=max(s[p].R,s[s[p].rc].R);\n                s[p].U=max(s[p].U,s[s[p].rc].U);\n                s[p].D=min(s[p].D,s[s[p].rc].D);\n            }\n        }\n\n        //\u53d6\u5f97\u65b9\u5dee\u4ee5\u51b3\u5b9a\u5b50\u6811\u5212\u5206\u65b9\u5f0f\n        bool __get_variance(int l,int r)\n        {\n            double sumx=0,sumy=0;\n            for(int i=l;i&lt;=r;i++)\n            {\n                sumx+=s[i].x;\n                sumy+=s[i].y;\n            }\n            sumx/=r-l+1;\n            sumy/=r-l+1;\n            double vx=0,vy=0;\n            for(int i=l;i&lt;=r;i++)\n            {\n                // vx+=(s[i].x-sumx)*(s[i].x-sumx);\n                vx+=sqr(s[i].x-sumx);\n                // vy+=(s[i].y-sumy)*(s[i].y-sumy);\n                vy+=sqr(s[i].y-sumy);\n            }\n            if(vx&gt;=vy) return true;\n            return false;\n        }\n\n        //\u5efa\u6811\n        int build(int l,int r)\n        {\n            if(l&gt;r) return 0;\n            if(l==r)\n            {\n                __upd(l);\n                return l;\n            }\n            int mid=(l+r)/2;\n            bool mark=__get_variance(l,r);\n            if(mark)\n            {\n\n                nth_element(s+l,s+mid,s+r+1,__cmpx);\n                s[mid].d=1;\n            }\n            else\n            {\n\n                nth_element(s+l,s+mid,s+r+1,__cmpy);\n                s[mid].d=2;\n            }\n\n            s[mid].lc=build(l,mid-1);\n            s[mid].rc=build(mid+1,r);\n            __upd(mid);\n            return mid;\n        }\n\n        //\u4e0b\u6807\u4e3ap\u7684\u70b9\u5230\u4e0b\u6807\u4e3ab\u7684\u70b9\u6240\u7ef4\u62a4\u7684\u77e9\u5f62\u7684\u8ddd\u79bb\n        Ty __to_rectangle_dis(int p,int b)\n        {\n            Ty ans=0;\n            if(s[b].L&gt;s[p].x)\n            {\n                // ans+=(s[b].L-s[p].x)*(s[b].L-s[p].x);\n                ans+=sqr(s[b].L-s[p].x);\n            }\n            if(s[b].R&lt;s[p].x)\n            {\n                ans+=sqr(s[b].R-s[p].x);\n            }\n            if(s[b].U&lt;s[p].y)\n            {\n                ans+=sqr(s[b].U-s[p].y);\n            }\n            if(s[b].D&gt;s[p].y)\n            {\n                ans+=sqr(s[b].D-s[p].y);\n            }\n            return ans;\n        }\n\n        // \u8be2\u95ee\u4e0b\u6807\u4e3aindex\u7684\u70b9\u5230\u6811\u4e0a\u9664\u4e86\u81ea\u5df1\u5916\u6700\u8fd1\u70b9\u7684\u8ddd\u79bb\n        void query(int l,int r,int index,Ty &amp;ans)\n        {\n            if(l&gt;r)\n            {\n                return ;\n            }\n            int mid=(l+r)/2;\n            if(mid!=index)\n            {\n                ans=min(ans,s[mid].dis2(s[index]));\n            }\n            if(l==r) return ;\n            Ty dis1=__to_rectangle_dis(index,s[mid].lc);\n            Ty dis2=__to_rectangle_dis(index,s[mid].rc);\n            if(dis1&lt;dis2)\n            {\n                if(dis1&lt;ans) query(l,mid-1,index,ans);\n                if(dis2&lt;ans) query(mid+1,r,index,ans);\n            }\n            else\n            {\n                if(dis2&lt;ans) query(mid+1,r,index,ans);\n                if(dis1&lt;ans) query(l,mid-1,index,ans);\n            }\n            /*\n            if(dis1&lt;ans &amp;&amp; dis2&lt;ans)\n            {\n                if(dis1&lt;dis2)\n                {\n                    if(dis1&lt;ans) query(l,mid-1,index,ans);\n                    if(dis2&lt;ans) query(mid+1,r,index,ans);\n                }\n                else\n                {\n                    if(dis2&lt;ans) query(mid+1,r,index,ans);\n                    if(dis1&lt;ans) query(l,mid-1,index,ans);\n                }\n            }\n            else\n            {\n                if(dis1&lt;ans) query(l,mid-1,index,ans);\n                if(dis2&lt;ans) query(mid+1,r,index,ans);\n            }*/\n        }\n    }kdt;\n}\nusing namespace KDTREE;\n\n\nint main()\n{\n    //ios::sync_with_stdio(false);\n    //cin.tie(0),cout.tie(0);\n    scanf(\"%d\",&amp;kdt.n);\n    for(int i=1;i&lt;=kdt.n;i++)\n    {\n        Ty x,y;\n        scanf(\"%lld%lld\",&amp;x,&amp;y);\n        kdt.s[i].x=x;\n        kdt.s[i].y=y;\n    }\n    kdt.build(1,kdt.n);\n\n    Ty ans=5e18;\n    for(int i=1;i&lt;=kdt.n;i++)\n    {\n        kdt.query(1,kdt.n,i,ans);\n    }\n\n    printf(\"%.4lf\\n\",sqrt(ans));\n    return 0;\n}\n</code></pre> <p>Finding Hotels</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace KDTREE\n{\n    typedef ll Ty;\n    const int N=1e6+10;\n\n    //\u5e73\u65b9\n    template&lt;typename T&gt;\n    T sqr(T x)\n    {\n        return x*x;\n    }\n\n    struct Node\n    {\n        Ty x,y;\n        Ty L,R,U,D;\n        int lc,rc;\n        int d;\n        //x,y:\u70b9\u7684\u5750\u6807\n        //LRUD\uff1a\u70b9\u6240\u7ba1\u8f96\u7684\u5b50\u6811\u7684\u6700\u5c0f\u77e9\u5f62\u8986\u76d6\n        //lc\uff0crc\uff1a\u5de6\u53f3\u5b69\u5b50\n        // d\uff1a\u8be5\u8282\u70b9\u5b50\u6811\u662f\u6309\u54ea\u4e00\u7ef4\u5212\u5206\u7684\uff0c1\u662f\u6309x\uff0c2\u6309y\n\n        int c;\n        int cc;\n        int id;\n\n        //\u8ddd\u79bb\u7684\u5e73\u65b9\n        Ty dis2(const Node &amp;b) const\n        {\n            return sqr(x-b.x)+sqr(y-b.y);\n        }\n    };\n\n    //\u6309x\u8f74\u5750\u6807\u6bd4\u8f83\n    bool __cmpx(const Node &amp;a,const Node &amp;b) \n    {\n        return a.x&lt;b.x;\n    }\n\n    //\u6309y\u8f74\u5750\u6807\u6bd4\u8f83\n    bool __cmpy(const Node &amp;a,const Node &amp;b) \n    {\n        return a.y&lt;b.y;\n    }\n\n    //\u4e8c\u7ef4kd\u6811\uff0c\u4f7f\u7528\u524d\u9700\u8981\u5148\u6574\u597dn\u548cs\u6570\u7ec4\n    struct Kdtree\n    {\n        Node s[N];\n        int n;\n        //s:\u70b9\uff08\u9700\u8981\u9884\u5148\u8bfb\u5165\uff09\n        //n\uff1a\u70b9\u7684\u4e2a\u6570\uff08\u9700\u8981\u9884\u5148\u8bfb\u5165\uff09\n\n        //\u5efa\u6811\u65f6\u7ef4\u62a4\u5b50\u6811\n        void __upd(int p)\n        {\n            s[p].L=s[p].R=s[p].x;\n            s[p].U=s[p].D=s[p].y;\n            s[p].cc=s[p].c;\n            if(s[p].lc)\n            {   //\u6ce8\u610f\u8fd9\u91ccmin\u548cmax\u7684\u6b21\u5e8f\n                s[p].L=min(s[p].L,s[s[p].lc].L);\n                s[p].R=max(s[p].R,s[s[p].lc].R);\n                s[p].U=max(s[p].U,s[s[p].lc].U);\n                s[p].D=min(s[p].D,s[s[p].lc].D);\n\n                s[p].cc=min(s[p].cc,s[s[p].lc].cc);\n            }\n            if(s[p].rc)\n            {\n                s[p].L=min(s[p].L,s[s[p].rc].L);\n                s[p].R=max(s[p].R,s[s[p].rc].R);\n                s[p].U=max(s[p].U,s[s[p].rc].U);\n                s[p].D=min(s[p].D,s[s[p].rc].D);\n\n                s[p].cc=min(s[p].cc,s[s[p].rc].cc);\n            }\n        }\n\n        //\u53d6\u5f97\u65b9\u5dee\u4ee5\u51b3\u5b9a\u5b50\u6811\u5212\u5206\u65b9\u5f0f\n        bool __get_variance(int l,int r)\n        {\n            double sumx=0,sumy=0;\n            for(int i=l;i&lt;=r;i++)\n            {\n                sumx+=s[i].x;\n                sumy+=s[i].y;\n            }\n            sumx/=r-l+1;\n            sumy/=r-l+1;\n            double vx=0,vy=0;\n            for(int i=l;i&lt;=r;i++)\n            {\n                // vx+=(s[i].x-sumx)*(s[i].x-sumx);\n                vx+=sqr(s[i].x-sumx);\n                // vy+=(s[i].y-sumy)*(s[i].y-sumy);\n                vy+=sqr(s[i].y-sumy);\n            }\n            if(vx&gt;=vy) return true;\n            return false;\n        }\n\n        //\u5efa\u6811\n        int build(int l,int r,bool mark)\n        {\n            if(l&gt;r) return 0;\n            if(l==r)\n            {\n                __upd(l);\n                return l;\n            }\n            int mid=(l+r)/2;\n            // bool mark=__get_variance(l,r);\n            mark=__get_variance(l,r);\n            if(mark)\n            {\n                nth_element(s+l,s+mid,s+r+1,__cmpx);\n                s[mid].d=1;\n            }\n            else\n            {\n                nth_element(s+l,s+mid,s+r+1,__cmpy);\n                s[mid].d=2;\n            }\n\n            s[mid].lc=build(l,mid-1,((mark)?(0):(1)));\n            s[mid].rc=build(mid+1,r,((mark)?(0):(1)));\n            __upd(mid);\n            return mid;\n        }\n\n        Ty __to_rectangle_dis(Node &amp;nd,Node &amp;b)\n        {\n            Ty ans=0;\n            if(b.L&gt;nd.x)\n            {\n                // ans+=(s[b].L-s[p].x)*(s[b].L-s[p].x);\n                ans+=sqr(b.L-nd.x);\n            }\n            if(b.R&lt;nd.x)\n            {\n                ans+=sqr(b.R-nd.x);\n            }\n            if(b.U&lt;nd.y)\n            {\n                ans+=sqr(b.U-nd.y);\n            }\n            if(b.D&gt;nd.y)\n            {\n                ans+=sqr(b.D-nd.y);\n            }\n            return ans;\n        }\n\n        //\u4ee5\u70b9\u641c\u6700\u8fd1\u70b9\n        void query(int l,int r,Node &amp;nd,Ty &amp;ans, Node &amp;ans2)\n        {\n            if(l&gt;r) return ;\n            int mid=(l+r)/2;    \n            if(s[mid].c&lt;=nd.c)\n            {\n                // ans=min(ans,nd.dis2(s[mid]));\n                Ty dis=nd.dis2(s[mid]);\n                if(ans&gt;dis)\n                {\n                    ans=dis;\n                    ans2=s[mid];\n                }\n                else if(ans==dis)\n                {\n                    if(ans2.id&gt;s[mid].id)\n                    {\n                        ans=dis;\n                        ans2=s[mid];\n                    }\n                }\n            }\n            if(l==r) return ;\n\n            //\u526a\u679d\u5224\u636e\u2026\u2026\n            Ty dis1=__to_rectangle_dis(nd,s[s[mid].lc]);\n            Ty dis2=__to_rectangle_dis(nd,s[s[mid].rc]);\n\n            //...\n            if(dis1&lt;dis2)\n            {\n                if(dis1&lt;=ans &amp;&amp; s[s[mid].lc].cc&lt;=nd.c)\n                    query(l,mid-1,nd,ans,ans2);\n                if(dis2&lt;=ans &amp;&amp; s[s[mid].rc].cc&lt;=nd.c)\n                    query(mid+1,r,nd,ans,ans2);\n            }\n            else\n            {\n                if(dis2&lt;=ans &amp;&amp; s[s[mid].rc].cc&lt;=nd.c)\n                    query(mid+1,r,nd,ans,ans2);\n                if(dis1&lt;=ans &amp;&amp; s[s[mid].lc].cc&lt;=nd.c)\n                    query(l,mid-1,nd,ans,ans2);\n            }\n        }\n    }kdt;\n}\nusing namespace KDTREE;\n\n\nint T;\nint n1,n2;\nint main()\n{\n    scanf(\"%d\",&amp;T);\n    while(T--)\n    {\n        scanf(\"%d\",&amp;n1);\n        scanf(\"%d\",&amp;n2);\n        kdt.n=n1;\n        for(int i=1;i&lt;=n1;i++)\n        {\n            kdt.s[i]=kdt.s[0];\n            int x,y,c;\n            scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;c);\n            kdt.s[i].x=x;\n            kdt.s[i].y=y;\n            kdt.s[i].c=c;\n            kdt.s[i].id=i;\n        }   \n\n        kdt.build(1,kdt.n,1);\n\n\n        for(int i=1;i&lt;=n2;i++)\n        {\n            int x,y,c;\n            scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;c);\n            Node nd,ans2;\n            ll ans=1e18;\n            nd.x=x;\n            nd.y=y;\n            nd.c=c;\n\n            kdt.query(1,kdt.n,nd,ans,ans2);\n            printf(\"%lld %lld %d\\n\" , ans2.x , ans2.y, ans2.c);\n        }\n\n    }\n\n\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_33","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76","text":"<pre><code>// CF600E Lomsat gelral\n//\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u9898\u610f\u7ffb\u8bd1\uff1a\u6811\u7684\u8282\u70b9\u6709\u989c\u8272\uff0c\u4e00\u79cd\u989c\u8272\u5360\u9886\u4e86\u4e00\u4e2a\u5b50\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ca1\u6709\u5176\u4ed6\u989c\u8272\u5728\u8fd9\u4e2a\u5b50\u6811\u4e2d\u51fa\u73b0\u5f97\u6bd4\u5b83\u591a\u3002\u6c42\u5360\u9886\u6bcf\u4e2a\u5b50\u6811\u7684\u6240\u6709\u989c\u8272\u4e4b\u548c\u3002\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;memory.h&gt;\n#include &lt;algorithm&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 2e5 + 10;\nint n;\nstruct E\n{\n    int to, inext;\n} edge[N * 2];\nstruct NODE\n{\n    int sz, color, heavy_son;//\u5b50\u6811\u5927\u5c0f\uff0c\u70b9\u7684\u989c\u8272\uff0c\u91cd\u513f\u5b50\n} node[N];\nint head[N], total;\n\nvoid adde(int x, int y)\n{\n    edge[++total].to = y;\n    edge[total].inext = head[x];\n    head[x] = total;\n}\n\nnamespace dsu_on_tree\n{\n    int cnt[N];\n    ll sum=0,maxval=-1; //sum\uff0cmaxval\uff1a\u5f71\u54cd\u90e8\u5206\uff0csum\u8868\u793a\u6570\u91cf\u6700\u591a\u7684\u90a3\u4e2a\u989c\u8272\u7684\u4e2a\u6570\uff0cmaxval\u8868\u793a\u6570\u91cf\u6700\u591a\u7684\u90a3\u4e2a\u989c\u8272\u7684\u6807\u53f7\n    ll ans[N]; //\u7b54\u6848\u90e8\u5206\uff1a\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u4fdd\u5b58\u5728\u6b64\n\n    //\u7edf\u8ba1\u67d0\u4e2a\u5b50\u6811\u4e0b\uff08\u9664\u4e86heavy_son\u7684\u5b50\u6811\u56e0\u4e3a\u5df2\u7ecf\u7edf\u8ba1\u8fc7\u4e86\uff09\u5bf9\u7b54\u6848\u9020\u6210\u7684\u5f71\u54cd\n    void addans(int x, int fa, int heavy_son,int val) \n    {\n        //\u66b4\u529b\u600e\u4e48\u5199\u4e0b\u9762\u5c31\u600e\u4e48\u5199\n        cnt[node[x].color]+=val;\n        if(cnt[node[x].color]&gt;maxval)\n        {\n            maxval=cnt[node[x].color];\n            sum=node[x].color;\n        }\n        else if(cnt[node[x].color]==maxval) sum+=(ll)node[x].color;\n        for (int e = head[x]; e; e = edge[e].inext)\n        {\n            int y = edge[e].to;\n            if (y == fa || y == heavy_son)\n                continue;\n            addans(y, x, heavy_son, val);\n        }\n    }\n\n    //\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u5f97\u5230\u5b50\u6811size\u548cheavy_son\n    void dfs(int x, int fa)\n    {\n        node[x].sz = 1;\n        node[x].heavy_son = 0;\n        int maxsz = 0;\n        for (int e = head[x]; e; e = edge[e].inext)\n        {\n            int y = edge[e].to;\n            if (y == fa)\n                continue;\n            dfs(y, x);\n            node[x].sz += node[y].sz;\n            if (node[y].sz &gt; maxsz)\n            {\n                maxsz = node[y].sz;\n                node[x].heavy_son = y;\n            }\n        }\n    }\n\n    //\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c\u7edf\u8ba1\u7b54\u6848\n    void dfs2(int x, int fa, bool sv) //sv:\u662f\u5426\u4fdd\u7559\n    {\n        //\u8f7b\u513f\u5b50\uff08\u9012\u5f52\uff09\n        for (int e = head[x]; e; e = edge[e].inext)\n        {\n            int y = edge[e].to;\n            if (y == fa || y == node[x].heavy_son)\n                continue; //\u8df3\u8fc7\u7236\u4eb2\u548c\u91cd\u513f\u5b50\n            dfs2(y, x, 0);\n        }\n        //\u91cd\u513f\u5b50\uff08\u9012\u5f52\uff09\n        if (node[x].heavy_son)\n        {\n            dfs2(node[x].heavy_son, x, 1);\n        }\n        //\u8f7b\u513f\u5b50\uff08\u66b4\u529b\uff09\n        addans(x,fa,node[x].heavy_son,1);\n        ans[x]=sum;//update ans\n        if(sv==0)//\u64a4\u9500\u5b50\u6811\u4e0b\u7684\u6240\u6709\u5f71\u54cd\n        {\n            addans(x,fa,0,-1);\n            sum=0;\n            maxval=-1;\n        }\n    }\n} // namespace dsu_on_tree\nusing namespace dsu_on_tree;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; node[i].color;\n    }\n    for (int i = 1; i &lt;= n - 1; i++)\n    {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        adde(x, y);\n        adde(y, x);\n    }\n    dfs(1, 0); //root is 1, predo:heavy_son\n    dfs2(1,0,0);\n    for(int i=1;i&lt;=n;i++)\n    {\n        cout&lt;&lt;ans[i]&lt;&lt;\" \";\n    }\n    return 0;\n}\n</code></pre> <pre><code>/**\n * 2021\u725b\u5ba2\u591a\u68219 E Eyjafjalla\n \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4ee5 1 \u4e3a\u6839\u7684\u6709\u6839\u6811\uff0c\u5b69\u5b50\u7684\u70b9\u6743\u5c0f\u4e8e\u7236\u4eb2\u7684\u70b9\u6743\u3002\u591a\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u5305\u542b x \u8282\u70b9\u7684\u6743\u503c\u8303\u56f4\u4e3a [l, r] \u7684\u6781\u5927\u8fde\u901a\u7684\u5927\u5c0f\u3002\n \u505a\u6cd5\uff1a\u79bb\u7ebf\u7136\u540e\u79bb\u6563\u5316\uff0c\u4e4b\u540e\u7528\u4e2a\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u6bcf\u4e2a\u8be2\u95ee\u5728\u5b50\u6811\u4e2d\u7684\u7b54\u6848\u3002\n**/\n\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\n\nnamespace BIT {\n    const int MAXN=4e5+10;\n\n    template &lt;typename Ty&gt;\n    struct Bit\n    {\n        //local\n        Ty t[MAXN];\n        int __lowbit(int x)\n        {\n            return x&amp;(-x);\n        }\n\n        void add(int pos,Ty val=1)\n        {\n            while(pos&lt;MAXN)\n            {\n                t[pos]+=val;\n                pos+=__lowbit(pos);\n            }\n        }\n\n        Ty ask(int pos)\n        {\n            Ty ans=0;\n            while(pos&gt;=1)\n            {\n                ans+=t[pos];\n                pos-=__lowbit(pos);\n            }\n            return ans;\n        }\n    };\n}\nusing namespace BIT;\nBit&lt;int&gt; bit;\n\n//...\nint n;\nint w[N];\n\nint ww[N*2],ww_p;\nunordered_map&lt;int,int&gt; mp;\n\nstruct Q\n{\n    int x,l,r;\n    int ans;\n}query[N];\nint q;\n\n\nstruct E\n{\n    int to,inext;\n}edge[N*2];\nint head[N],total;\nint f[N][30];\nint vis[N];\n\nstruct Node\n{\n    vector&lt;int&gt; qid;\n    int sz;\n    int heavy_son;\n}node[N];\n\n//...\n\nvoid adde(int x,int y)\n{\n    edge[++total].to=y;\n    edge[total].inext=head[x];\n    head[x]=total;\n}\n\nint upb;\n\n//bfs\uff0c\u4f7f\u5f97\u80fd\u6811\u4e0a\u500d\u589e\nvoid predo(int rt=1)\n{\n    queue&lt;int&gt; q;\n    q.push(rt);\n    vis[rt]=1;\n    while(q.size())\n    {\n        int x=q.front();\n        q.pop();\n        for(int e=head[x];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            if(vis[y]==0)\n            {\n                vis[y]=vis[x]+1;\n                f[y][0]=x;\n                for(int k=1;k&lt;=upb;k++)\n                {\n                    f[y][k]=f[f[y][k-1]][k-1];\n                }\n                q.push(y);\n            }\n        }\n    }\n}\n\n//\u9884\u5904\u7406\u79bb\u7ebf\u7b54\u6848\nvoid predo2(int i)\n{\n    int x=query[i].x;\n    int r=query[i].r;\n    int l=query[i].l;\n\n    // int tmpans=x;\n    if(l&lt;=w[x] &amp;&amp;  w[x]&lt;=r)\n    {\n        for(int k=upb;k&gt;=0;k--)\n        {\n            if(f[x][k]!=0 &amp;&amp; w[f[x][k]]&lt;=r)\n            {\n                x=f[x][k];\n            }\n        }\n        node[x].qid.emplace_back(i);\n    }\n    else\n    {\n        query[i].ans=0;\n    }\n}\n\n//dsu on tree\n\nvoid dfs1(int x,int fa)\n{\n    node[x].sz=1;\n    node[x].heavy_son=0;\n    int maxsz=0;\n    for(int e=head[x];e;e=edge[e].inext)\n    {\n        int y=edge[e].to;\n        if(y==fa) continue;\n        dfs1(y,x);\n        node[x].sz+=node[y].sz;\n        if (node[y].sz &gt; maxsz)\n        {\n            maxsz = node[y].sz;\n            node[x].heavy_son = y;\n        }\n    }\n}\n\nvoid addans(int x,int fa,int heavy_son,int val=1)\n{   \n\n    bit.add(mp[w[x]],val);\n\n    for(int e=head[x];e;e=edge[e].inext)\n    {\n        int y=edge[e].to;\n        if(y==fa || y==heavy_son) continue;\n        addans(y,x,heavy_son,val);\n    }\n}\n\n//dsu on tree\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\nvoid dfs2(int x,int fa,bool sv)\n{\n    for(int e=head[x];e;e=edge[e].inext)\n    {\n        int y=edge[e].to;\n        if(y==fa || y==node[x].heavy_son) continue;\n        dfs2(y,x,0);\n    }\n    if(node[x].heavy_son)\n    {\n        dfs2(node[x].heavy_son,x,1);\n    }\n\n    addans(x,fa,node[x].heavy_son,1);\n\n    //getans\n    for(auto v:node[x].qid)\n    {\n        int l=query[v].l;\n        query[v].ans=node[x].sz-bit.ask(mp[l]-1);\n    }\n\n\n    if(sv==0)\n    {\n        addans(x,fa,0,-1); //\u91cd\u8981\uff1a\u5220\u9664\u5b50\u6811\u5f71\u54cd\u7684heavy_son\u4e00\u5b9a\u8981\u662f0\uff0c\u4e0d\u80fd\u548c\u4e4b\u524d\u90a3\u4e2a\u7528addans\u7684\u4e00\u6837\n    }\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;n;\n    upb=log2(n)+1;\n    for(int i=1;i&lt;=n-1;i++)\n    {\n        int x,y;\n        cin&gt;&gt;x&gt;&gt;y;\n        adde(x,y);\n        adde(y,x);\n    }\n\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;w[i];\n        ww[++ww_p]=w[i];\n    }\n\n    cin&gt;&gt;q;\n    for(int i=1;i&lt;=q;i++)\n    {   \n        cin&gt;&gt;query[i].x;\n        cin&gt;&gt;query[i].l;\n        cin&gt;&gt;query[i].r;\n\n        ww[++ww_p]=query[i].l;\n        ww[++ww_p]=query[i].r;\n    }\n    sort(ww+1,ww+1+ww_p);\n    for(int i=1;i&lt;=ww_p;i++)\n    {\n        mp[ww[i]]=i;\n    }\n\n    //bfs\n    predo();\n    //\u9884\u5904\u7406\u79bb\u7ebf\u7b54\u6848\n    for(int i=1;i&lt;=q;i++)\n    {\n        predo2(i);\n    }\n\n    dfs1(1,0);\n    dfs2(1,0,0);\n    for(int i=1;i&lt;=q;i++)\n    {\n        cout&lt;&lt;query[i].ans&lt;&lt;'\\n';\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#splay","title":"\u2b50Splay \u4f38\u5c55\u6a39","text":"<p>\uff08\u9644\u8a3b\uff1a\u53ef\u80fd\u9019\u500b\u7248\u672c\u7684Splay\u6709\u9ede\u554f\u984c\uff0c\u5230\u6642\u5019\u5f97\u63db\u6389\uff09\uff08\u5c1a\u672a\u6574\u7406\uff09</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_34","title":"\u666e\u901a\u5e73\u8861\u6811","text":"<p>\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff08\u53ef\u53c2\u8003\u9898\u76ee\u6807\u9898\uff09\uff0c\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\uff0c\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>\u63d2\u5165 xx \u6570</li> <li>\u5220\u9664 xx \u6570(\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u56e0\u53ea\u5220\u9664\u4e00\u4e2a)</li> <li>\u67e5\u8be2 xx \u6570\u7684\u6392\u540d(\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 +1+1 )</li> <li>\u67e5\u8be2\u6392\u540d\u4e3a xx \u7684\u6570</li> <li>\u6c42 xx \u7684\u524d\u9a71(\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e xx\uff0c\u4e14\u6700\u5927\u7684\u6570)</li> <li>\u6c42 xx \u7684\u540e\u7ee7(\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e xx\uff0c\u4e14\u6700\u5c0f\u7684\u6570)</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\n\nnamespace SPLAY\n{\n    const int N=114514;\n    using Ty=int;\n    const Ty Inf=1&lt;&lt;30; \n    //Inf\uff1a\u8bb0\u5f97longlong\u7684\u8bdd\u8981\u6539\u8fd9\u91cc\uff01\n    //\u6ce8\u610f\uff1aInf\u4e0d\u5e94\u8be5\u4e0e\u4efb\u4f55\u53ef\u80fd\u7684\u503c\u76f8\u7b49\uff0c\u5426\u5219\u4f60\u9700\u8981\u8003\u8651\u522b\u7684\u65b9\u5f0f\n    struct Splay\n    {\n        struct Node\n        {\n            int fa,ch[2];\n            Ty val; //val\uff1a\u8981\u7ef4\u62a4\u7684\u503c\n            Ty cnt,size; //cnt\u3001size\uff1a\u56fa\u5b9a\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e2a\u6570\u548c\u5b50\u6811\u5927\u5c0f\n        }t[N];\n\n        //root:\u6839\u8282\u70b9\u4e0b\u6807\n        //total:\u603b\u8282\u70b9\u6570\n        int root,total; \n\n        //\u66f4\u65b0\u8282\u70b9p\u7684\u4fe1\u606f\n        void __upd(int p)\n        {\n            if(p==0) return ;\n            t[p].size=t[t[p].ch[0]].size+t[t[p].ch[1]].size+t[p].cnt;\n        }\n\n        //\u5224\u65adp\u662f\u5426\u662f\u5728\u53f3\u513f\u5b50\u4f4d\u7f6e judge whether p is father's R-child\n        bool __get(int p)\n        {\n            return p==t[t[p].fa].ch[1];\n        }\n\n        //\u5728\u5185\u5b58\u8282\u70b9\u6c60\u4e2d\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u503c\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\n        int __add(Ty val)\n        {\n            t[++total].val=val;\n            t[total].cnt=t[total].size=1;\n            t[total].fa=0; \n            t[total].ch[0]=t[total].ch[1]=0;\n            return total;\n        }\n\n        void init()\n        {\n            root=1;\n            total=0;\n            __add(-Inf); //1\n            __add(Inf); //2\n            t[1].ch[1]=2;\n            t[2].fa=1;\n            __upd(root);\n        }\n\n        //zip or zap (depending on [whether p is father's R-child])\n        void __rotate(int p)\n        {\n            // z-&gt;y-&gt;p\n            int y=t[p].fa, z=t[y].fa, chk=__get(p); //!!!You must use previous version Get(p)\n            if(y==0 || p==0) return ;\n            // Modify p's R(L)Child as y's L(R)Child\n            t[y].ch[chk]=t[p].ch[chk^1];\n            if(t[p].ch[chk^1]) t[t[p].ch[chk^1]].fa=y;\n            // Then change p's Child\n            t[p].ch[chk^1]=y;\n            t[y].fa=p;\n            // Finally change p's father as z (which was y's father)\n            t[p].fa=z;\n            if(z) t[z].ch[y==t[z].ch[1]]=p;\n\n            __upd(y);\n            __upd(p);\n        }\n\n        //\u4f38\u5c55\u64cd\u4f5c : \n        // \u5982\u679c p \u7684\u7236\u4eb2\u662f\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u5c06 p \u5de6\u65cb\u6216\u53f3\u65cb\n        // \u5982\u679c p \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 p \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u76f8\u540c\uff0c\u9996\u5148\u5c06\u5176\u7236\u4eb2\u5de6\u65cb\u6216\u53f3\u65cb\uff0c\u7136\u540e\u5c06 p \u53f3\u65cb\u6216\u5de6\u65cb\n        // \u5982\u679c p \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 p \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u4e0d\u540c\uff0c\u5c06 p \u5de6\u65cb\u518d\u53f3\u65cb\u3001\u6216\u8005\u53f3\u65cb\u518d\u5de6\u65cb\n        void __splay(int p)\n        {\n            for(int f=t[p].fa;f=t[p].fa;__rotate(p))\n            {\n                if(t[f].fa) __rotate(__get(p)==__get(f) ? f : p); //Case 3,4:(p,y,z at the same line) | 5,6:(else)\n            }\n            root=p;\n        }\n\n        //\u63d2\u5165\u4e00\u4e2a\u503c\u4e3aval\u7684\u5143\u7d20\n        void insert(Ty val)\n        {\n            if(root==0)\n            {\n                root=__add(val);\n                __upd(root);\n                return ;\n            }\n\n            int p=root, f=0;\n            while(true)\n            {\n                if(t[p].val==val)\n                {\n                    t[p].cnt++;\n                    __upd(p);\n                    __upd(f);\n                    __splay(p);\n                    return ;\n                }\n\n                f=p; //f!=0;\n                p=t[p].ch[ t[p].val&lt;val ];\n\n                if(!p)//Child does not exist\n                {\n                    t[f].ch[ t[f].val&lt;val ] = __add(val);\n                    t[total].fa=f;\n                    __upd(total);\n                    __upd(f);\n                    __splay(total);\n                    return ;\n                }\n            }\n        }\n\n        //\u53d6\u5f97&gt;=val\u7684\u8282\u70b9\u6700\u5c0f\u6392\u540d\uff08\u4ece1\u8ba1\u6570\uff09\u548c\u4e0b\u6807\uff0c\u76f8\u5f53\u4e8elower_bound\n        //\u6ce8\u610f\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u4f1a\u7acb\u5373\u4f7f\u5f97\u88ab\u627e\u5230\u7684\u8282\u70b9\u88absplay\u5230\u6839\u8282\u70b9\uff0c\u4e0d\u8fc7\u4e0b\u6807\u4ecd\u7136\u662f\u6709\u6548\u7684\n        pair&lt;Ty,int&gt; get_rank_by_val(Ty val)\n        {\n            int p=root;\n            if(p==0) return {t[root].size+1,-1};\n\n            int sum=0; //\u5f53\u524d &lt; val \u7684\u8282\u70b9cnt\u4e4b\u548c\n            int ans=t[root].size+1; //ans:\u5f53\u524d\u6700\u597d\u6392\u540d\n            int cur=-1; //cur\uff1a\u5f53\u524d\u7b54\u6848\u7684\u4e0b\u6807\n\n            while(p)\n            {\n                if(t[p].val &lt; val) // &lt;\n                {\n                    sum+=t[p].cnt;\n                    if(t[p].ch[0]) sum+=t[t[p].ch[0]].size;\n                    p=t[p].ch[1];\n                }\n                else // &gt;= \n                {\n                    int tmpans=sum+1+((t[p].ch[0])?(t[t[p].ch[0]].size):(0));\n                    if(tmpans&lt;ans)\n                    {\n                        ans=tmpans;\n                        cur=p;\n                    }\n                    p=t[p].ch[0];\n                }\n            }\n\n            // *\u5982\u679c\u4e0d\u9009\u62e9\u5728init\u65f6\u63d2\u5165\u4e24\u4e2a\u521d\u59cb\u65e0\u7a77\u5927\u503c\uff0c\u5219\u8bf7\u5728\u8fd9\u91cc\u79fb\u9664\u8fd9\u6bb5\u4ee3\u7801\n            ans-=1;\n            // *\u79fb\u9664\u4ee3\u7801\u6bb5\u7ed3\u675f\n\n            if(cur!=-1) __splay(cur);\n            return {ans, cur};\n        }\n\n        //\u6839\u636e\u6392\u540d\uff08\u4ece1\u5f00\u59cb\uff09\u53d6\u5f97\u503c\u548c\u4e0b\u6807\n        //\u6ce8\u610f\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u4f1a\u7acb\u5373\u4f7f\u5f97\u88ab\u627e\u5230\u7684\u8282\u70b9\u88absplay\u5230\u6839\u8282\u70b9\uff0c\u4e0d\u8fc7\u4e0b\u6807\u4ecd\u7136\u662f\u6709\u6548\u7684\n        pair&lt;Ty,int&gt; get_val_by_rank(int rank)\n        {\n            // *\u5982\u679c\u4e0d\u9009\u62e9\u5728init\u65f6\u63d2\u5165\u4e24\u4e2a\u521d\u59cb\u65e0\u7a77\u5927\u503c\uff0c\u5219\u8bf7\u5728\u8fd9\u91cc\u79fb\u9664\u8fd9\u6bb5\u4ee3\u7801\n            rank+=1;\n            // *\u79fb\u9664\u4ee3\u7801\u6bb5\u7ed3\u675f\n\n            int p=root;\n\n\n            while (true)\n            {\n                if(t[p].ch[0] &amp;&amp; t[t[p].ch[0]].size &gt;= rank)\n                {\n                    p=t[p].ch[0];\n                }\n                else\n                {\n                    rank-=t[p].cnt+t[t[p].ch[0]].size;\n                    if(rank&lt;=0)\n                    {\n                        __splay(p);\n                        return {t[p].val,p};\n                    }\n                    p=t[p].ch[1];\n                }\n            }\n        }\n\n        //\u6839\u636eval\u7684\u503c\uff0c\u5bfb\u627e\u5bf9\u5e94\u8282\u70b9\u7684\u540e\u7ee7\uff0c\u8fd4\u56de\u8282\u70b9\u4e0b\u6807\n        //\u6ce8\u610f\uff1a1.\u4e00\u5b9a\u8981\u4fdd\u8bc1\u8282\u70b9\u5b58\u5728\uff0c 2.\u4e00\u5b9a\u8981\u4fdd\u8bc1\u6811\u4e2d\u6709\u65e0\u7a77\u5c0f\u548c\u65e0\u7a77\u5927\u4e24\u4e2a\u8282\u70b9\uff0c\u4e14\u4e0b\u6807\u5206\u522b\u662f1\u30012\n        int get_next_index(Ty val)\n        {\n            int ans=2,p=root; //t[ans].val== Inf (INIT)\n            while (p)\n            {\n                if(val==t[p].val)//search success\n                {\n                    if(t[p].ch[1])\n                    {\n                        p=t[p].ch[1];\n                        while(t[p].ch[0]) p=t[p].ch[0];\n                        ans=p;\n                    }\n                    break;\n                }\n                //else update ans using path\n                if(t[p].val&gt;val &amp;&amp; t[p].val&lt;t[ans].val) ans=p;\n                p=(t[p].val&lt;val) ? t[p].ch[1] : t[p].ch[0];\n            }\n            return ans; //Notice that return value is subscript\n        }\n\n        //\u6839\u636eval\u7684\u503c\uff0c\u5bfb\u627e\u5bf9\u5e94\u8282\u70b9\u7684\u524d\u9a71\uff0c\u8fd4\u56de\u8282\u70b9\u4e0b\u6807\n        //\u6ce8\u610f\uff1a1.\u4e00\u5b9a\u8981\u4fdd\u8bc1\u8282\u70b9\u5b58\u5728\uff0c 2.\u4e00\u5b9a\u8981\u4fdd\u8bc1\u6811\u4e2d\u6709\u65e0\u7a77\u5c0f\u548c\u65e0\u7a77\u5927\u4e24\u4e2a\u8282\u70b9\uff0c\u4e14\u4e0b\u6807\u5206\u522b\u662f1\u30012\n        int get_pre_index(Ty val)\n        {\n            int ans=1,p=root; //t[ans].val== -Inf (INIT)\n            while (p)\n            {\n                if(val==t[p].val)//search success\n                {\n                    if(t[p].ch[0])\n                    {\n                        p=t[p].ch[0];\n                        while(t[p].ch[1]) p=t[p].ch[1];\n                        ans=p;\n                    }\n                    break;\n                }\n                //else update ans using path\n                if(t[p].val&lt;val &amp;&amp; t[p].val&gt;t[ans].val) ans=p;\n                p=(t[p].val&lt;val) ? t[p].ch[1] : t[p].ch[0];\n            }\n            return ans;//Notice that return value is subscript\n        }\n\n        //\u6839\u636eval\u5220\u53bb\u8282\u70b9\uff1a\u5148\u901a\u8fc7lower_bound\u627e\u5230\u7b2c\u4e00\u4e2a\u7b49\u4e8eval\u7684\u8282\u70b9\uff0c\u628a\u4ed6splay\u5230\u6839\uff0c\u7136\u540e\u5220\u9664\u4e4b\n        //\u6ce8\u610f\uff1a\u6811\u4e2d\u4e00\u5b9a\u8981\u6709\u7b49\u4e8eval\u503c\u7684\u8282\u70b9\uff01\n        void del(Ty val)\n        {\n            if(get_rank_by_val(val).second==-1) return;\n            if(t[root].cnt&gt;1)\n            {\n                t[root].cnt--;\n                __upd(root);\n                return ;\n            }\n\n            int p=root;\n            int q=get_pre_index(val);\n            __splay(q);\n            t[t[p].ch[1]].fa=q;\n            t[q].ch[1]=t[p].ch[1];\n        }\n    }splay_tree;\n\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    SPLAY::splay_tree.init();\n\n    int n;\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        int op,x;\n        cin&gt;&gt;op&gt;&gt;x;\n        if(op==1) SPLAY::splay_tree.insert(x);\n        else if(op==2) SPLAY::splay_tree.del(x);\n        else if(op==3) cout&lt;&lt; SPLAY::splay_tree.get_rank_by_val(x).first&lt;&lt;endl;\n        else if(op==4) cout&lt;&lt; SPLAY::splay_tree.get_val_by_rank(x).first&lt;&lt;endl;\n        else if(op==5) cout&lt;&lt; SPLAY::splay_tree.t[SPLAY::splay_tree.get_pre_index(x)].val&lt;&lt;endl;\n        else cout&lt;&lt; SPLAY::splay_tree.t[SPLAY::splay_tree.get_next_index(x)].val&lt;&lt;endl;\n    }\n    return 0;\n}\n\n\n/*\n\u65e7\u7684\u64cd\u4f5c\nint Get_Rank_By_Val(int x)\n{\n    int ans=0,p=root;\n    while (true)\n    {\n        if(x&lt;t[p].val)\n        {\n            p=t[p].ch[0];\n        }\n        else\n        {\n            ans+=t[t[p].ch[0]].size;\n            if(x==t[p].val)\n            {\n                Splay(p);\n                return ans+1;\n            }\n            ans+=t[p].cnt;\n            p=t[p].ch[1];\n        }\n    }\n}\n*/\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_35","title":"\u6587\u827a\u5e73\u8861\u6811","text":"<p>\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff08\u53ef\u53c2\u8003\u9898\u76ee\u6807\u9898\uff09\uff0c\u6765\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u6570\u5217\u3002 \u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u7ffb\u8f6c\u4e00\u4e2a\u533a\u95f4\uff0c\u4f8b\u5982\u539f\u6709\u5e8f\u5e8f\u5217\u662f 5 4 3 2 1\uff0c\u7ffb\u8f6c\u533a\u95f4\u662f [2,4][2,4] \u7684\u8bdd\uff0c\u7ed3\u679c\u662f 5 2 3 4 1\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N=114514;\n\nnamespace SPLAY\n{\n    const int N=114514;\n    using Ty=int;\n    const Ty Inf=1&lt;&lt;30; \n    //Inf\uff1a\u8bb0\u5f97longlong\u7684\u8bdd\u8981\u6539\u8fd9\u91cc\uff01\n    //\u6ce8\u610f\uff1aInf\u4e0d\u5e94\u8be5\u4e0e\u4efb\u4f55\u53ef\u80fd\u7684\u503c\u76f8\u7b49\uff0c\u5426\u5219\u4f60\u9700\u8981\u8003\u8651\u522b\u7684\u65b9\u5f0f\n    struct Splay\n    {\n        struct Node\n        {\n            int fa,ch[2];\n            Ty val; //val\uff1a\u8981\u7ef4\u62a4\u7684\u503c\n            Ty cnt,size; //cnt\u3001size\uff1a\u56fa\u5b9a\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e2a\u6570\u548c\u5b50\u6811\u5927\u5c0f\n            int T; //T:\u53cd\u8f6c\u6807\u8bb0\n        }t[N];\n\n        //root:\u6839\u8282\u70b9\u4e0b\u6807\n        //total:\u603b\u8282\u70b9\u6570\n        int root,total; \n\n        //\u66f4\u65b0\u8282\u70b9p\u7684\u4fe1\u606f\n        void __upd(int p)\n        {\n            if(p==0) return ;\n            t[p].size=t[t[p].ch[0]].size+t[t[p].ch[1]].size+t[p].cnt;\n        }\n\n        //\u5224\u65adp\u662f\u5426\u662f\u5728\u53f3\u513f\u5b50\u4f4d\u7f6e judge whether p is father's R-child\n        bool __get(int p)\n        {\n            return p==t[t[p].fa].ch[1];\n        }\n\n        //\u5728\u5185\u5b58\u8282\u70b9\u6c60\u4e2d\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u503c\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\n        int __add(Ty val)\n        {\n            t[++total].val=val;\n            t[total].cnt=t[total].size=1;\n            t[total].fa=0; \n            t[total].ch[0]=t[total].ch[1]=0;\n            t[total].T=0;\n            return total;\n        }\n\n        void init()\n        {\n            root=1;\n            total=0;\n            __add(-Inf); //1\n            __add(Inf); //2\n            t[1].ch[1]=2;\n            t[2].fa=1;\n            __upd(root);\n        }\n\n        //\u4e0b\u4f20\u53cd\u8f6c\u6807\u8bb0\n        void __spread(int p)\n        {\n            if(t[p].T)\n            {\n                swap(t[t[p].ch[0]].ch[0],t[t[p].ch[0]].ch[1]); //LChild\n                swap(t[t[p].ch[1]].ch[0],t[t[p].ch[1]].ch[1]); //RChild\n                t[t[p].ch[0]].T^=1;\n                t[t[p].ch[1]].T^=1;\n                t[p].T=0;\n            }\n        }\n\n        //zip or zap (depending on [whether p is father's R-child])\n        void __rotate(int p)\n        {\n            __spread(p);\n            // z-&gt;y-&gt;p\n            int y=t[p].fa, z=t[y].fa, chk=__get(p); //!!!You must use previous version Get(p)\n            if(y==0 || p==0) return ;\n            // Modify p's R(L)Child as y's L(R)Child\n            t[y].ch[chk]=t[p].ch[chk^1];\n            if(t[p].ch[chk^1]) t[t[p].ch[chk^1]].fa=y;\n            // Then change p's Child\n            t[p].ch[chk^1]=y;\n            t[y].fa=p;\n            // Finally change p's father as z (which was y's father)\n            t[p].fa=z;\n            if(z) t[z].ch[y==t[z].ch[1]]=p;\n\n            __upd(y);\n            __upd(p);\n        }\n\n        //\u4f38\u5c55\u64cd\u4f5c : \n        // \u5982\u679c p \u7684\u7236\u4eb2\u662f\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u5c06 p \u5de6\u65cb\u6216\u53f3\u65cb\n        // \u5982\u679c p \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 p \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u76f8\u540c\uff0c\u9996\u5148\u5c06\u5176\u7236\u4eb2\u5de6\u65cb\u6216\u53f3\u65cb\uff0c\u7136\u540e\u5c06 p \u53f3\u65cb\u6216\u5de6\u65cb\n        // \u5982\u679c p \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 p \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u4e0d\u540c\uff0c\u5c06 p \u5de6\u65cb\u518d\u53f3\u65cb\u3001\u6216\u8005\u53f3\u65cb\u518d\u5de6\u65cb\n        void __splay(int p)\n        {\n            __spread(p);\n            for(int f=t[p].fa;f=t[p].fa;__rotate(p))\n            {\n                if(t[f].fa) __rotate(__get(p)==__get(f) ? f : p); //Case 3,4:(p,y,z at the same line) | 5,6:(else)\n            }\n            root=p;\n        }\n\n        //\u5c06p\u4e0d\u65ad\u65cb\u8f6c\u5230\u6839\u524d\u4e3a\u6b62\n        void __splay2(int p)\n        {\n            __spread(p);\n            for(int f=t[p].fa;f=t[p].fa,f!=root;__rotate(p))\n            {\n                if(t[f].fa!=root) __rotate(__get(p)==__get(f) ? f : p); //Case 3,4:(p,y,z at the same line) | 5,6:(else)\n            }\n        }\n\n        //\u63d2\u5165\u4e00\u4e2a\u503c\u4e3aval\u7684\u5143\u7d20\n        void insert(Ty val)\n        {\n            if(root==0)\n            {\n                root=__add(val);\n                __upd(root);\n                return ;\n            }\n\n            int p=root, f=0;\n            while(true)\n            {\n                if(t[p].val==val)\n                {\n                    t[p].cnt++;\n                    __upd(p);\n                    __upd(f);\n                    __splay(p);\n                    return ;\n                }\n\n                f=p; //f!=0;\n                p=t[p].ch[ t[p].val&lt;val ];\n\n                if(!p)//Child does not exist\n                {\n                    t[f].ch[ t[f].val&lt;val ] = __add(val);\n                    t[total].fa=f;\n                    __upd(total);\n                    __upd(f);\n                    __splay(total);\n                    return ;\n                }\n            }\n        }\n\n        //\u6839\u636e\u6392\u540d\uff08\u4ece1\u5f00\u59cb\uff09\u53d6\u5f97\u503c\u548c\u4e0b\u6807\n        //\u6ce8\u610f\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u4f1a\u7acb\u5373\u4f7f\u5f97\u88ab\u627e\u5230\u7684\u8282\u70b9\u88absplay\u5230\u6839\u8282\u70b9\uff0c\u4e0d\u8fc7\u4e0b\u6807\u4ecd\u7136\u662f\u6709\u6548\u7684\n        pair&lt;Ty,int&gt; get_val_by_rank(int rank, bool root_RChild_rotate)\n        {\n            // *\u5982\u679c\u4e0d\u9009\u62e9\u5728init\u65f6\u63d2\u5165\u4e24\u4e2a\u521d\u59cb\u65e0\u7a77\u5927\u503c\uff0c\u5219\u8bf7\u5728\u8fd9\u91cc\u79fb\u9664\u8fd9\u6bb5\u4ee3\u7801\n            rank+=1;\n            // *\u79fb\u9664\u4ee3\u7801\u6bb5\u7ed3\u675f\n            int p=root;\n\n            while (true)\n            {\n                __spread(p);\n                if(t[p].ch[0] &amp;&amp; t[t[p].ch[0]].size &gt;= rank)\n                {\n                    p=t[p].ch[0];\n                }\n                else\n                {\n                    rank-=t[p].cnt+t[t[p].ch[0]].size;\n                    if(rank&lt;=0)\n                    {\n                        if(root_RChild_rotate) __splay2(p);\n                        else __splay(p);\n                        return {t[p].val,p};\n                    }\n                    p=t[p].ch[1];\n                }\n            }\n        }\n\n        void reverse(int l,int r)\n        {\n            get_val_by_rank(l-1,0); //l-1 is root\n            get_val_by_rank(r+1,1); //r+1 is rchild of l-1 now\n            //now r+1's lchild is the range needed to be reversed.\n\n            int p=root;\n            __spread(p);\n            p=t[p].ch[1];\n            __spread(p);\n            p=t[p].ch[0];\n            __spread(p);\n\n            swap(t[p].ch[0],t[p].ch[1]);\n            t[p].T^=1;\n        }\n\n        void output(int p)\n        {\n            __spread(p);\n            if(t[p].ch[0])\n            {\n                output(t[p].ch[0]);\n            }\n            if(p &amp;&amp; p!=1 &amp;&amp; p!=2)\n            {\n                cout&lt;&lt;t[p].val&lt;&lt;\" \";\n            }\n            if(t[p].ch[1])\n            {\n                output(t[p].ch[1]);\n            }\n        }\n\n    }splay_tree;\n\n}\n\nint n,m;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin&gt;&gt;n&gt;&gt;m;\n    SPLAY::splay_tree.init();\n    for(int i=1;i&lt;=n;i++)\n    {\n        SPLAY::splay_tree.insert(i);\n    }\n\n    for(int i=1;i&lt;=m;i++)\n    {\n        int l,r;\n        cin&gt;&gt;l&gt;&gt;r;\n\n        SPLAY::splay_tree.reverse(l,r);\n    }\n    SPLAY::splay_tree.output(SPLAY::splay_tree.root);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_36","title":"\u5409\u5982\u4e00\u7ebf\u6bb5\u6811","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_37","title":"\u533a\u95f4\u53d6\u6700\u5c0f\u503c+\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u4e0e\u548c","text":"<p>\uff08\u4eceOI-wiki\u6284\u7684\uff09</p> <p>\u533a\u95f4\u53d6 min\uff0c\u610f\u5473\u7740\u53ea\u5bf9\u90a3\u4e9b\u5927\u4e8e \\(t\\) \u7684\u6570\u6709\u66f4\u6539\u3002\u56e0\u6b64\u8fd9\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u4e0d\u518d\u662f\u6574\u4e2a\u533a\u95f4\uff0c\u800c\u662f\u201c\u8fd9\u4e2a\u533a\u95f4\u4e2d\u5927\u4e8e \\(t\\) \u7684\u6570\u201d\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6709\u8fd9\u6837\u7684\u601d\u8def\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u8be5\u533a\u95f4\u7684\u6700\u5927\u503c \\(Max\\)\u3001\u6b21\u5927\u503c \\(Se\\)\u3001\u533a\u95f4\u548c \\(Sum\\) \u4ee5\u53ca\u6700\u5927\u503c\u7684\u4e2a\u6570 \\(Cnt\\)\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u533a\u95f4\u5bf9 \\(t\\) \u53d6 \\(\\min\\) \u7684\u64cd\u4f5c\u3002</p> <ol> <li>\u5982\u679c \\(Max\\le t\\)\uff0c\u663e\u7136\u8fd9\u4e2a \\(t\\) \u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u76f4\u63a5\u8fd4\u56de\uff1b</li> <li>\u5982\u679c \\(Se&lt;t\\le Max\\)\uff0c\u90a3\u4e48\u8fd9\u4e2a \\(t\\) \u5c31\u80fd\u66f4\u65b0\u5f53\u524d\u533a\u95f4\u4e2d\u7684\u6700\u5927\u503c\u3002\u4e8e\u662f\u6211\u4eec\u8ba9\u533a\u95f4\u548c\u52a0\u4e0a \\(Cnt(t-Max)\\)\uff0c\u7136\u540e\u66f4\u65b0 \\(Max\\) \u4e3a \\(t\\)\uff0c\u5e76\u6253\u4e00\u4e2a\u6807\u8bb0\u3002</li> <li>\u5982\u679c \\(t\\le Se\\)\uff0c\u90a3\u4e48\u8fd9\u65f6\u4f60\u53d1\u73b0\u4f60\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u4e2a\u6570\u6d89\u53ca\u5230\u66f4\u65b0\u7684\u95ee\u9898\u3002\u4e8e\u662f\u6211\u4eec\u7684\u7b56\u7565\u5c31\u662f\uff0c\u66b4\u529b\u9012\u5f52\u5411\u4e0b\u64cd\u4f5c\u3002\u7136\u540e\u4e0a\u4f20\u4fe1\u606f\u3002</li> </ol> <p>\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5982\u4f55\uff1f\u4f7f\u7528\u52bf\u80fd\u5206\u6790\u6cd5\u53ef\u4ee5\u5f97\u5230\u590d\u6742\u5ea6\u662f \\(O(m\\log n)\\) \u7684\u3002\u5177\u4f53\u5206\u6790\u8fc7\u7a0b\u89c1\u8bba\u6587\u3002</p> <p>5306_Gorgeous_Sequence3_myfastio <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nint T;\n\nnamespace JSJSEgmentTree\n{\n    using Ty=ll;\n    const int MAXN=2e6+10;\n    const Ty Inf=1e17;\n\n    int n,m;\n    Ty a[MAXN];\n\n    struct JSJSegmentTree\n    {\n        struct Node\n        {\n            Ty maxval,sec_maxval,maxval_cnt;\n            Ty mintag;\n            Ty sum;\n            int l,r;\n        }t[MAXN*4];\n\n        void __upd(int p)\n        {\n            t[p].sum=t[p*2].sum + t[p*2+1].sum;\n\n            if(t[p*2].maxval == t[p*2+1].maxval)\n            {\n                t[p].maxval = t[p*2].maxval;\n                t[p].maxval_cnt = t[p*2].maxval_cnt + t[p*2+1].maxval_cnt;\n                t[p].sec_maxval = max(t[p*2].sec_maxval, t[p*2+1].sec_maxval);\n            }\n            else if(t[p*2].maxval &gt; t[p*2+1].maxval)\n            {\n                t[p].maxval = t[p*2].maxval;\n                t[p].maxval_cnt = t[p*2].maxval_cnt;\n                t[p].sec_maxval = max(t[p*2].sec_maxval, t[p*2+1].maxval);\n            }\n            else\n            {\n                t[p].maxval = t[p*2+1].maxval;\n                t[p].maxval_cnt = t[p*2+1].maxval_cnt;\n                t[p].sec_maxval = max(t[p*2].maxval, t[p*2+1].sec_maxval);\n            }\n        }\n\n        void __tagpush(int p, Ty mintag)\n        {\n            if(t[p].maxval&gt;mintag)\n            {\n                t[p].sum+= (mintag - t[p].maxval) * t[p].maxval_cnt;\n\n                t[p].maxval = mintag; //  mintag &lt; t[p].maxval &lt;= t[p].mintag always hold\n                t[p].mintag = mintag;\n            }\n        }\n\n        void __tagdown(int p)\n        {\n            if(t[p].mintag!=Inf)\n            {\n                __tagpush(p*2, t[p].mintag);\n                __tagpush(p*2+1, t[p].mintag);\n\n                t[p].mintag=Inf;\n            }\n        }\n\n        void build_tree(int p,int l,int r)\n        {\n            t[p].mintag=Inf;\n            t[p].l=l;\n            t[p].r=r;\n            if(l==r)\n            {\n                t[p].sum = t[p].maxval = a[l];\n                t[p].maxval_cnt = 1;\n                t[p].sec_maxval = -Inf;\n                return ;\n            }\n\n            int mid=(l+r)/2;\n            build_tree(p*2,l,mid);\n            build_tree(p*2+1,mid+1,r);\n            __upd(p);\n        }\n\n        void modify_min(int p,int L,int R,Ty val)\n        {\n            if(t[p].maxval &gt; val)\n            {\n                if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R &amp;&amp; t[p].sec_maxval&lt;val)\n                {\n                    return __tagpush(p, val);\n                }\n                __tagdown(p);\n                int mid=(t[p].l + t[p].r)/2;\n                if(L&lt;=mid)\n                {\n                    modify_min(p*2,L,R,val);\n                }\n                if(mid&lt;R)\n                {\n                    modify_min(p*2+1,L,R,val);\n                }\n                __upd(p);\n            }\n        }\n\n        Ty query_sum(int p,int L,int R)\n        {\n            if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R)\n            {\n                return t[p].sum;\n            }\n            __tagdown(p);\n            int mid=(t[p].l + t[p].r)/2;\n            Ty ans=0;\n            if(L&lt;=mid)\n            {\n                ans+=query_sum(p*2,L,R);\n            }\n            if(mid&lt;R)\n            {\n                ans+=query_sum(p*2+1,L,R);\n            }\n            return ans;\n        }\n\n        Ty query_max(int p,int L,int R)\n        {\n            if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R)\n            {\n                return t[p].maxval;\n            }\n            __tagdown(p);\n            int mid=(t[p].l + t[p].r)/2;\n            Ty ans=-Inf;\n            if(L&lt;=mid)\n            {\n                ans=max(query_max(p*2,L,R),ans);\n            }\n            if(mid&lt;R)\n            {\n                ans=max(query_max(p*2+1,L,R),ans);\n            }\n            return ans;\n        }\n    };\n}\nusing namespace JSJSEgmentTree;\n\nJSJSegmentTree t;\n\nnamespace Fast_IO {\n\n    char __nc()\n    {\n        static char buf[1000000], *p = buf, *q = buf;\n        return p == q &amp;&amp; (q = (p = buf) + fread(buf, 1, 1000000, stdin), p == q)\n                ? EOF\n                : *p++;\n    }\n\n    template &lt;typename T&gt; inline void read(T &amp;x) {\n    char c;\n    int sgn = 1;\n    x = 0;\n    c = __nc();\n    while (c &gt; '9' || c &lt; '0') {\n        if (c == '-')\n        sgn = -1;\n        c = __nc();\n    }\n    while (c &lt;= '9' &amp;&amp; c &gt;= '0') {\n        x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c - '0');\n        c = __nc();\n    }\n    x *= sgn;\n    }\n\n    template &lt;typename T&gt; inline void print(T x) {\n    if (x &lt; 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x &gt; 9) {\n        print(x / 10);\n    }\n    putchar(x % 10 + '0');\n    }\n} // namespace Fast_IO\nusing namespace Fast_IO;\n\n\nint main()\n{\n    read(T);\n    for(int _=1;_&lt;=T;_++)\n    {\n        read(n);\n        read(m);\n\n        for(int i=1;i&lt;=n;i++)\n        {\n            read(a[i]);\n        }\n\n        t.build_tree(1,1,n);\n\n        for(int i=1;i&lt;=m;i++)\n        {\n            int op;\n            read(op);\n\n            if(op==0)\n            {\n                int l,r;\n                ll val;\n                read(l);\n                read(r);\n                read(val);\n                t.modify_min(1,l,r,val);\n            }\n            else if(op==1) //get maxval\n            {\n                int l,r;\n                read(l);\n                read(r);\n                printf(\"%lld\\n\",t.query_max(1,l,r));\n            }\n            else //op==2: get sum\n            {\n                int l,r; \n                read(l);\n                read(r);\n                printf(\"%lld\\n\",t.query_sum(1,l,r));\n            }\n        }\n\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#bzoj4695","title":"BZOJ4695 \u6700\u5047\u5973\u9009\u624b","text":"<p>\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217\uff0c\u652f\u6301\u533a\u95f4\u52a0 \\(x\\)/\u533a\u95f4\u5bf9 \\(x\\) \u53d6 \\(\\max\\)/\u533a\u95f4\u5bf9 \\(x\\) \u53d6 \\(\\min\\)/\u6c42\u533a\u95f4\u548c/\u6c42\u533a\u95f4\u6700\u5927\u503c/\u6c42\u533a\u95f4\u6700\u5c0f\u503c\u3002</p> <p>\\(N,M\\le 5\\times 10^5,|A_i|\\le 10^8\\)\u3002</p> <p>\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u7ef4\u62a4\u6700\u5927\u3001\u6b21\u5927\u3001\u6700\u5927\u4e2a\u6570\u3001\u6700\u5c0f\u3001\u6b21\u5c0f\u3001\u6700\u5c0f\u4e2a\u6570\u3001\u533a\u95f4\u548c\u3002\u9664\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u533a\u95f4 \\(\\max\\)\u3001\u533a\u95f4 \\(\\min\\)\u3001\u533a\u95f4\u52a0\u7684\u6807\u8bb0\u3002\u76f8\u6bd4\u4e0a\u4e00\u9053\u9898\uff0c\u8fd9\u5c31\u6d89\u53ca\u5230\u6807\u8bb0\u4e0b\u4f20\u7684\u987a\u5e8f\u95ee\u9898\u4e86\u3002\u6211\u4eec\u91c7\u7528\u8fd9\u6837\u7684\u7b56\u7565\uff1a</p> <ol> <li>\u6211\u4eec\u8ba4\u4e3a\u533a\u95f4\u52a0\u7684\u6807\u8bb0\u662f\u6700\u4f18\u5148\u7684\uff0c\u5176\u4f59\u4e24\u79cd\u6807\u8bb0\u5730\u4f4d\u5e73\u7b49\u3002</li> <li>\u5bf9\u4e00\u4e2a\u7ed3\u70b9\u52a0\u4e0a\u4e00\u4e2a \\(v\\) \u6807\u8bb0\uff0c\u9664\u4e86\u7528 \\(v\\) \u66f4\u65b0\u536b\u661f\u4fe1\u606f\u548c\u5f53\u524d\u7ed3\u70b9\u7684\u533a\u95f4\u52a0\u6807\u8bb0\u5916\uff0c\u6211\u4eec\u7528\u8fd9\u4e2a v \u66f4\u65b0\u533a\u95f4 \\(\\max\\) \u548c\u533a\u95f4 \\(\\min\\) \u7684\u6807\u8bb0\u3002</li> <li>\u5bf9\u4e00\u4e2a\u7ed3\u70b9\u53d6 \\(v\\) \u7684 \\(\\min\\)\uff08\u8fd9\u91cc\u5ffd\u7565\u66b4\u641c\u7684\u8fc7\u7a0b\uff0c\u5047\u5b9a\u6807\u8bb0\u6ee1\u8db3\u6dfb\u52a0\u7684\u6761\u4ef6\uff09\uff0c\u9664\u4e86\u66f4\u65b0\u536b\u661f\u4fe1\u606f\uff0c\u6211\u4eec\u8981\u4e0e\u533a\u95f4 \\(\\max\\) \u7684\u6807\u8bb0\u505a\u6bd4\u8f83\u3002\u5982\u679c \\(v\\) \u5c0f\u4e8e\u533a\u95f4 \\(\\max\\) \u7684\u6807\u8bb0\uff0c\u5219\u6240\u6709\u7684\u6570\u6700\u540e\u90fd\u4f1a\u53d8\u6210 v\uff0c\u90a3\u4e48\u628a\u533a\u95f4 \\(\\max\\) \u7684\u6807\u8bb0\u4e5f\u53d8\u6210 \\(v\\)\u3002\u5426\u5219\u4e0d\u7ba1\u3002</li> <li>\u533a\u95f4\u53d6 v \u7684 \\(\\max\\) \u540c\u7406\u3002</li> </ol> <p>\u53e6\u5916\uff0cBZOJ \u8fd9\u9053\u9898\u5361\u5e38\u2026\u2026\u591a\u6570\u7ec4\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u6bd4\u7ed3\u6784\u4f53\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u5927\u2026\u2026\u5728\u7ef4\u62a4\u4fe1\u606f\u7684\u65f6\u4faf\uff0c\u5f53\u53ea\u6709\u4e00\u4e24\u4e2a\u6570\u7684\u65f6\u4faf\u53ef\u80fd\u53d1\u751f\u6570\u96c6\u91cd\u5408\uff0c\u6bd4\u5982\u4e00\u4e2a\u6570\u65e2\u662f\u6700\u5927\u503c\u53c8\u662f\u6b21\u5c0f\u503c\u3002\u8fd9\u79cd\u8981\u7279\u5224\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace JSJSEgmentTree\n{\n    using Ty=ll;\n    const int MAXN=5e5+10;\n    const Ty Inf=1e17;\n\n    int n,m;\n    Ty a[MAXN];\n\n    struct JSJSegmentTree\n    {\n        struct Node\n        {\n            Ty maxval,sec_maxval,maxval_cnt;\n            Ty minval,sec_minval,minval_cnt;\n            Ty mintag,maxtag,addtag;\n            Ty sum;\n            int l,r;\n        }t[MAXN*4];\n\n        void __upd(int p)\n        {\n            t[p].sum=t[p*2].sum + t[p*2+1].sum;\n\n            if(t[p*2].maxval == t[p*2+1].maxval)\n            {\n                t[p].maxval = t[p*2].maxval;\n                t[p].maxval_cnt = t[p*2].maxval_cnt + t[p*2+1].maxval_cnt;\n                t[p].sec_maxval = max(t[p*2].sec_maxval, t[p*2+1].sec_maxval);\n            }\n            else if(t[p*2].maxval &gt; t[p*2+1].maxval)\n            {\n                t[p].maxval = t[p*2].maxval;\n                t[p].maxval_cnt = t[p*2].maxval_cnt;\n                t[p].sec_maxval = max(t[p*2].sec_maxval, t[p*2+1].maxval);\n            }\n            else\n            {\n                t[p].maxval = t[p*2+1].maxval;\n                t[p].maxval_cnt = t[p*2+1].maxval_cnt;\n                t[p].sec_maxval = max(t[p*2].maxval, t[p*2+1].sec_maxval);\n            }\n\n            if(t[p*2].minval == t[p*2+1].minval)\n            {\n                t[p].minval = t[p*2].minval;\n                t[p].minval_cnt = t[p*2].minval_cnt + t[p*2+1].minval_cnt;\n                t[p].sec_minval = min(t[p*2].sec_minval, t[p*2+1].sec_minval);\n            }\n            else if(t[p*2].minval &lt; t[p*2+1].minval)\n            {\n                t[p].minval = t[p*2].minval;\n                t[p].minval_cnt = t[p*2].minval_cnt;\n                t[p].sec_minval = min(t[p*2].sec_minval, t[p*2+1].minval);\n            }\n            else\n            {\n                t[p].minval = t[p*2+1].minval;\n                t[p].minval_cnt = t[p*2+1].minval_cnt;\n                t[p].sec_minval = min(t[p*2].minval, t[p*2+1].sec_minval);\n            }\n        }\n\n        void __tagpush_add(int p, Ty val)\n        {\n            t[p].sum += (t[p].r-t[p].l+1ll)*val;\n            t[p].maxval += val;\n            t[p].minval += val;\n\n            if(t[p].sec_maxval != -Inf) t[p].sec_maxval += val;\n            if(t[p].sec_minval != Inf) t[p].sec_minval += val;\n            if(t[p].maxtag != -Inf) t[p].maxtag += val;\n            if(t[p].mintag != Inf) t[p].mintag += val;\n\n            t[p].addtag += val;\n        }\n\n        void __tagpush_min(int p, Ty val)\n        {\n            if(t[p].maxval &gt; val)\n            {\n                t[p].sum+=(1ll*val-t[p].maxval)*t[p].maxval_cnt;\n\n                if(t[p].sec_minval == t[p].maxval) t[p].sec_minval=val;\n                if(t[p].minval == t[p].maxval) t[p].minval = val;\n                if(t[p].maxtag &gt; val) t[p].maxtag = val;\n\n                t[p].maxval = t[p].mintag = val;\n            }\n        }\n\n        void __tagpush_max(int p, Ty val)\n        {   \n            if(t[p].minval &lt; val)\n            {\n                t[p].sum+=(1ll*val-t[p].minval)*t[p].minval_cnt;\n\n                if(t[p].sec_maxval == t[p].minval) t[p].sec_maxval = val;\n                if(t[p].maxval == t[p].minval) t[p].maxval = val;\n                if(t[p].mintag &lt; val) t[p].mintag = val;\n\n                t[p].minval = t[p].maxtag = val;\n            }\n        }\n\n        void __tagdown(int p)\n        {\n            if(t[p].addtag)\n            {\n                __tagpush_add(p*2,t[p].addtag);\n                __tagpush_add(p*2+1,t[p].addtag);\n                t[p].addtag=0;\n            }\n            if(t[p].maxtag!=-Inf)\n            {\n                __tagpush_max(p*2,t[p].maxtag);\n                __tagpush_max(p*2+1,t[p].maxtag);\n                t[p].maxtag=-Inf;\n            }\n            if(t[p].mintag!=Inf)\n            {\n                __tagpush_min(p*2,t[p].mintag);\n                __tagpush_min(p*2+1,t[p].mintag);\n                t[p].mintag=Inf;\n            }\n        }\n\n        void build_tree(int p,int l,int r)\n        {\n            t[p].mintag=Inf;\n            t[p].maxtag=-Inf;\n            t[p].l=l;\n            t[p].r=r;\n            if(l==r)\n            {\n                t[p].sum = t[p].maxval = t[p].minval = a[l];\n                t[p].maxval_cnt =t[p].minval_cnt= 1;\n                t[p].sec_maxval = -Inf;\n                t[p].sec_minval = Inf;\n                return ;\n            }\n\n            int mid=(l+r)/2;\n            build_tree(p*2,l,mid);\n            build_tree(p*2+1,mid+1,r);\n            __upd(p);\n        }\n\n        void modify_add(int p,int L,int R,Ty val)\n        {\n            if(L&lt;= t[p].l &amp;&amp; t[p].r &lt;= R)\n            {\n                return __tagpush_add(p,val);\n            }\n            __tagdown(p);\n            int mid=(t[p].l + t[p].r)/2;\n            if(L&lt;=mid) modify_add(p*2,L,R,val);\n            if(mid&lt;R) modify_add(p*2+1,L,R,val);\n            __upd(p);\n        }\n\n        void modify_min(int p,int L,int R,Ty val)\n        {\n            if(t[p].maxval &gt; val)\n            {\n                if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R &amp;&amp; t[p].sec_maxval&lt;val)\n                {\n                    return __tagpush_min(p, val);\n                }\n                __tagdown(p);\n                int mid=(t[p].l + t[p].r)/2;\n                if(L&lt;=mid)\n                {\n                    modify_min(p*2,L,R,val);\n                }\n                if(mid&lt;R)\n                {\n                    modify_min(p*2+1,L,R,val);\n                }\n                __upd(p);\n            }\n        }\n\n        void modify_max(int p,int L,int R,Ty val)\n        {\n            if(t[p].minval &lt; val)\n            {\n                if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R &amp;&amp; t[p].sec_minval&gt;val)\n                {\n                    return __tagpush_max(p, val);\n                }\n                __tagdown(p);\n                int mid=(t[p].l + t[p].r)/2;\n                if(L&lt;=mid)\n                {\n                    modify_max(p*2,L,R,val);\n                }\n                if(mid&lt;R)\n                {\n                    modify_max(p*2+1,L,R,val);\n                }\n                __upd(p);\n            }\n        }\n\n        Ty query_sum(int p,int L,int R)\n        {\n            if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R)\n            {\n                return t[p].sum;\n            }\n            __tagdown(p);\n            int mid=(t[p].l + t[p].r)/2;\n            Ty ans=0;\n            if(L&lt;=mid)\n            {\n                ans+=query_sum(p*2,L,R);\n            }\n            if(mid&lt;R)\n            {\n                ans+=query_sum(p*2+1,L,R);\n            }\n            return ans;\n        }\n\n        Ty query_max(int p,int L,int R)\n        {\n            if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R)\n            {\n                return t[p].maxval;\n            }\n            __tagdown(p);\n            int mid=(t[p].l + t[p].r)/2;\n            Ty ans=-Inf;\n            if(L&lt;=mid)\n            {\n                ans=max(query_max(p*2,L,R),ans);\n            }\n            if(mid&lt;R)\n            {\n                ans=max(query_max(p*2+1,L,R),ans);\n            }\n            return ans;\n        }\n\n        Ty query_min(int p,int L,int R)\n        {\n            if(L&lt;=t[p].l &amp;&amp; t[p].r&lt;=R)\n            {\n                return t[p].minval;\n            }\n            __tagdown(p);\n            int mid=(t[p].l + t[p].r)/2;\n            Ty ans=Inf;\n            if(L&lt;=mid)\n            {\n                ans=min(query_min(p*2,L,R),ans);\n            }\n            if(mid&lt;R)\n            {\n                ans=min(query_min(p*2+1,L,R),ans);\n            }\n            return ans;\n        }\n    };\n}\nusing namespace JSJSEgmentTree;\n\nJSJSegmentTree t;\n\nnamespace Fast_IO {\n\n    char __nc()\n    {\n        static char buf[1000000], *p = buf, *q = buf;\n        return p == q &amp;&amp; (q = (p = buf) + fread(buf, 1, 1000000, stdin), p == q)\n                ? EOF\n                : *p++;\n    }\n\n    template &lt;typename T&gt; inline void read(T &amp;x) {\n    char c;\n    int sgn = 1;\n    x = 0;\n    c = __nc();\n    while (c &gt; '9' || c &lt; '0') {\n        if (c == '-')\n        sgn = -1;\n        c = __nc();\n    }\n    while (c &lt;= '9' &amp;&amp; c &gt;= '0') {\n        x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c - '0');\n        c = __nc();\n    }\n    x *= sgn;\n    }\n\n    template &lt;typename T&gt; inline void print(T x) {\n    if (x &lt; 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x &gt; 9) {\n        print(x / 10);\n    }\n    putchar(x % 10 + '0');\n    }\n} // namespace Fast_IO\nusing namespace Fast_IO;\n\nint main()\n{\n    read(n);\n    for(int i=1;i&lt;=n;i++) read(a[i]);\n    t.build_tree(1,1,n);\n    read(m);\n    for(int i=1;i&lt;=m;i++)\n    {\n        int op,l,r;\n        ll val;\n        read(op),read(l),read(r);\n        if(op&lt;=3) read(val);\n        if(op==1) //add\n        {\n            t.modify_add(1,l,r,val);\n        }\n        else if(op==2) //max\n        {\n            t.modify_max(1,l,r,val);\n        }\n        else if(op==3) //min\n        {\n            t.modify_min(1,l,r,val);\n        }\n        else if(op==4) //sum\n        {\n            print(t.query_sum(1,l,r));\n            putchar('\\n');\n        }\n        else if(op==5) //max\n        {\n            print(t.query_max(1,l,r));\n            putchar('\\n');\n        }\n        else //min\n        {\n            print(t.query_min(1,l,r));\n            putchar('\\n');\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_38","title":"\u56fe\u8bba","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_39","title":"\u90bb\u63a5\u8868","text":"<p>\u56fe\u8bba\u7b97\u6cd5\u7684\u5b9e\u73b0\u4e3b\u8981\u4f9d\u8d56\u4e8e\u6b64\u3002\u9664\u975e\u6709\u7279\u6b8a\u8bf4\u660e\uff0c\u5426\u5219\u5927\u90e8\u5206\u56fe\u8bba\u7b97\u6cd5\u7684\u9ed8\u8ba4\u8f93\u5165\u63a5\u53e3\u5305\u62ec\u6b64\u6bb5\u6240\u8ff0\u7684\u90bb\u63a5\u8868\u3002</p> <ul> <li>\ud83d\udd25\uff1atotal\u3001head\u3002</li> </ul>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_40","title":"\u5e26\u8fb9\u6743\u7684\u7248\u672c","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description adde 1 x,y,w: x\u5230y\u7684\u8fb9\u6743\u4e3aw\u7684\u8fb9 edge, total \u6dfb\u52a0\u8fb9 <pre><code>namespace Edges\n{\n    typedef int Ty;\n    const int N=1e4+10,M=2e5+100;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    struct E\n    {\n        int from, to, inext;\n        Ty w;\n    } edge[M];\n    int head[N], total;\n\n    void adde(int x, int y, Ty w)\n    {\n        edge[++total].from = x;\n        edge[total].to = y;\n        edge[total].w = w;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#lca","title":"LCA","text":"<p>\u500d\u589e\u6cd5\u3002</p> <ul> <li>\ud83d\udd25\uff1atotal\uff0chead\uff0cd\uff0cdist</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n// #include &lt;memory.h&gt;\n#include &lt;queue&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\nusing namespace std;\ntypedef long long ll;\nint T;\n\nnamespace Edges\n{\n    const int N=20010;\n    typedef long long Ty;\n\n    //public\n    struct E\n    {\n        int to,inext;\n        Ty w;\n    }edge[N*2];\n    int head[N],total;\n\n    int n,m;\n\n    void adde(int x,int y, Ty w)\n    {\n        edge[++total].to=y;\n        edge[total].w=w;\n        edge[total].inext=head[x];\n        head[x]=total;\n    }\n}\nusing namespace Edges;\n\nnamespace LCA\n{\n    //local\n    int d[N],f[N][20],dist[N],t;\n    //d:\u6df1\u5ea6\n    //f\uff1a\u500d\u589e\u6570\u7ec4\n    //dist:\u6839\u5230\u7b2cx\u4e2a\u70b9\u7684\u5e26\u6743\u8ddd\u79bb\n    //t: t=log2(n)+1\n\n    //bfs\u5e76\u9884\u5904\u7406\u500d\u589e\u6570\u7ec4f\n    void bfs(int rt=1)//init\n    {\n        t=int(log2(n))+1;\n        queue&lt;int&gt; q;\n        q.push(rt);\n        d[rt]=1;\n        while(q.size())\n        {\n            int x=q.front();\n            q.pop();\n            for(int i=head[x];i;i=edge[i].inext)\n            {\n                int y=edge[i].to;\n                if (d[y]==0)\n                {\n                    d[y]=d[x]+1;\n                    dist[y]=dist[x]+edge[i].w;\n                    f[y][0]=x;\n                    for(int k=1;k&lt;=t;k++)\n                    {\n                        f[y][k]=f[f[y][k-1]][k-1];\n                    }\n                    q.push(y);\n                }\n            }\n        }\n    }\n\n    //\u901a\u8fc7\u500d\u589e\u6570\u7ec4\u5f97\u5230LCA\n    int lca(int x,int y)\n    {\n        if(d[x]&gt;d[y]) swap(x,y); //d[x]&lt;=d[y]\n        //make d[y]=d[x]\n        for(int k=t;k&gt;=0;k--)\n        {\n            if(d[f[y][k]]&gt;=d[x]) y=f[y][k];\n        }\n        if(x==y) return x;\n        //then climb together\n        for(int k=t;k&gt;=0;k--)\n        {\n            if(f[x][k]!=f[y][k]) x=f[x][k],y=f[y][k];\n        }\n        return f[x][0];\n    }\n\n}\nusing namespace LCA;\n\nint indegree[N];\nint main()\n{\n    ios::sync_with_stdio(false);\n    // cin&gt;&gt;T;\n    scanf(\"%d\",&amp;T);\n    while (T--)\n    {\n        total=0;\n        memset(head,0,sizeof(head));\n        memset(d,0,sizeof(d));\n        memset(dist,0,sizeof(dist));\n        memset(f,0,sizeof(f));\n        memset(indegree,0,sizeof(indegree));\n        // cin&gt;&gt;n&gt;&gt;m;\n        scanf(\"%d\",&amp;n);\n        // scanf(\"%d\",&amp;m);\n\n        t=int(log2(n))+1;\n        // t=(int)(log(n*1.0)/log(2.0))+1;\n        for(int i=1;i&lt;=n-1;i++)\n        {\n            int x,y;\n            // cin&gt;&gt;x&gt;&gt;y;\n            scanf(\"%d\",&amp;x);\n            scanf(\"%d\",&amp;y);\n\n            adde(x,y,0);\n            indegree[y]++;\n        }\n\n        for(int i=1;i&lt;=n;i++)\n        {\n            if(indegree[i]==0)\n            {\n                bfs(i);\n                break;\n            }\n        }\n\n        int x,y;\n        scanf(\"%d\",&amp;x);\n        scanf(\"%d\",&amp;y);\n        printf(\"%d\\n\",lca(x,y));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#hld","title":"\u6811\u94fe\u5256\u5206HLD","text":"<p>\u901a\u8fc7\u4e24\u6b21dfs\u5b9e\u73b0\uff0c\u7b2c\u4e00\u6b21dfs\u6807\u8bb0\u91cd\u5b50\u8282\u70b9\u3001\u6df1\u5ea6\u3001\u7236\u4eb2\u3001\u5b50\u6811\u5927\u5c0f\uff1b\u7b2c\u4e8c\u6b21\u6807\u8bb0dfn\uff08\u91cd\u8fb9\u4f18\u5148\u904d\u5386\uff09\u3001rnk\uff08dfn\u7684\u53cd\u51fd\u6570\uff0c\u4e5f\u5373\u901a\u8fc7dfn\u83b7\u5f97\u8282\u70b9\u539f\u6807\u53f7\uff09\u3001top\uff08\u6240\u5728\u91cd\u94fe\u94fe\u9876\uff09\u3002\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u94fe\u4e0adfn\u4fe1\u606f\u3002</p> <p>\u8def\u5f84\u4e0a\u7ef4\u62a4\uff1a\u6bcf\u6b21\u9009\u62e9\u6df1\u5ea6\u8f83\u5927\u7684\u94fe\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u4e24\u70b9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002</p> <p>\u5b50\u6811\u7ef4\u62a4\uff1a\u8bb0\u5f55\u6240\u5728\u5b50\u6811\u8fde\u7eed\u533a\u95f4\u672b\u7aef\u7684\u7ed3\u70b9\uff08\u4ed6\u55b5\u7684\u4e0d\u662f\u76f4\u63a5\u8bb0\u5f55\u5b50\u6811dfn\u6700\u5927\u662f\u8c01\u5c31\u884c\u4e86\u5417\uff08\uff09\uff09</p> <p>LCA\uff1a\u548c\u8def\u5f84\u4e0a\u7ef4\u62a4\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u5f53\u4e24\u4e2a\u8282\u70b9\u8df3\u5230\u540c\u4e00\u94fe\u65f6\uff0c\u53d6\u6df1\u5ea6\u8f83\u5c0f\u8282\u70b9\u4f5c\u4e3aLCA</p> <ul> <li>\ud83e\udd2b\uff1adfs\u3001dfs2\u3001init_wdfn\u3001build_tree</li> <li>\ud83d\udd25\uff1atotal\u3001head\u3001dfn\u3001node\u3001w_dfn</li> <li>\u6ce8\u610f\u7ebf\u6bb5\u6811\u4e0a\u53ef\u80fd\u4e5f\u8981\u6e05\u7a7a\uff081~4n\uff0c\u6211\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u60c5\u51b5\u2026\u2026\uff09</li> </ul> <pre><code>//HLD [P2590 [ZJOI2008\\]\u6811\u7684\u7edf\u8ba1]\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Edges\n{\n    typedef int Ty;\n    const int N=5e5+10,M=2e5+10;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    struct E\n    {\n        int to, inext;\n        // Ty w;\n    } edge[M];\n    int head[N], total;\n\n    void adde(int x, int y)\n    {\n        edge[++total].to = y;\n        // edge[total].w = w;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n\nnamespace SEGMENT_TREE\n{\n    typedef int Ty;\n    const Ty INF=1145141919;\n\n    Ty w_dfn[N]; //w_dfn: \u7531dfn\u5230\u6743\u503c\u7684\u6620\u5c04\n\n    //\u7ef4\u62a4dfn\u7528\u7684\u7ebf\u6bb5\u6811\n    struct Segment_tree\n    {\n        struct SEGMENT_TREE\n        {\n            Ty maxval,sum;\n            int l,r;\n        }t[N*4]; //\u7ef4\u62a4\u5173\u4e8edfn\u7684\u4fe1\u606f\n\n        void __upd(int p)\n        {\n            t[p].maxval=max(t[p*2].maxval,t[p*2+1].maxval);\n            t[p].sum=t[p*2].sum+t[p*2+1].sum;\n        }\n\n        //\u5efa\u6811\n        void build_tree(int p,int l,int r)\n        {\n            t[p].l=l;\n            t[p].r=r;\n            if(l==r)\n            {\n                t[p].maxval=t[p].sum=w_dfn[l];\n                return ;\n            }\n            int mid=(l+r)/2;\n            build_tree(p*2,l,mid);\n            build_tree(p*2+1,mid+1,r);\n            __upd(p);\n        }\n\n        //\u5355\u70b9\u4fee\u6539\n        void singlechange(int p,int pos,Ty val)\n        {\n            if(t[p].l == t[p].r )\n            {\n                w_dfn[t[p].l]=val;\n                t[p].maxval=t[p].sum=w_dfn[t[p].l];\n                return ;\n            }\n            int mid=(t[p].l+t[p].r)/2;\n            if(pos&lt;=mid) singlechange(p*2,pos,val);\n            else singlechange(p*2+1,pos,val);\n            __upd(p);\n        }\n\n        //\u8be2\u95ee\u533a\u95f4\u6700\u5927\u503c\n        int ask_maxval(int p,int l,int r)\n        {\n            if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r)\n            {\n                return t[p].maxval;\n            }\n            Ty ans=-INF;\n            int mid=(t[p].l+t[p].r)/2;\n            if(l&lt;=mid) ans=max(ans,ask_maxval(p*2,l,r));\n            if(mid&lt;r) ans=max(ans,ask_maxval(p*2+1,l,r));\n\n            return ans;\n        }\n\n        //\u8be2\u95ee\u533a\u95f4\u548c\n        int ask_sum(int p,int l,int r)\n        {\n            if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r)\n            {\n                return t[p].sum;\n            }\n            Ty ans=0;\n            int mid=(t[p].l+t[p].r)/2;\n            if(l&lt;=mid) ans+=ask_sum(p*2,l,r);\n            if(mid&lt;r) ans+=ask_sum(p*2+1,l,r);\n            return ans;\n        }\n    }tree;\n}\nusing namespace SEGMENT_TREE;\n\n\nnamespace HLD\n{\n    typedef int Ty;\n\n    struct NODE\n    {\n        int fa,hson,top,size,depth,dfn;\n        Ty w;\n    }node[N];\n\n    //local\n    int dfn=0; //dfn:\u7b2c\u4e8c\u6b21dfs\u9700\u8981\u4f7f\u7528dfn\n\n    //\u7b2c\u4e00\u6b21dfs\uff1a\u6807\u8bb0\u91cd\u5b50\u8282\u70b9\u3001\u6df1\u5ea6\u3001\u7236\u4eb2\u3001\u5b50\u6811\u5927\u5c0f\n    void dfs(int x,int depth)\n    {\n        node[x].depth=depth;\n        node[x].hson=0;\n        node[x].size=1;\n        for(int e=head[x];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            if(y==node[x].fa)\n                continue;\n            node[y].fa=x;\n            dfs(y,depth+1);\n            node[x].size+=node[y].size;\n            if(node[x].hson==0 || node[node[x].hson].size&lt; node[y].size)\n            {\n                node[x].hson=y;\n            }\n        }\n    }\n\n    //\u7b2c\u4e8c\u6b21dfs\uff1a\u6807\u8bb0dfn\uff08\u91cd\u8fb9\u4f18\u5148\u904d\u5386\uff09\u3001rnk\uff08dfn\u7684\u53cd\u51fd\u6570\uff0c\u4e5f\u5373\u901a\u8fc7dfn\u83b7\u5f97\u8282\u70b9\u539f\u6807\u53f7\uff09\u3001top\uff08\u6240\u5728\u91cd\u94fe\u94fe\u9876\uff09\n    void dfs2(int x,int top)\n    {\n        node[x].top=top;\n        dfn++;\n        node[x].dfn=dfn;\n        if(node[x].hson)\n        {\n            dfs2(node[x].hson,top);\n            for(int e=head[x];e;e=edge[e].inext)\n            {\n                int y=edge[e].to;\n                if(y==node[x].fa || y==node[x].hson)\n                    continue;\n                dfs2(y,y);\n            }\n        }\n    }\n\n    //\u53d6\u5f97x\u3001y\u8def\u5f84\u4e0a\u7684\u548c\n    Ty get_sum(int x,int y)\n    {\n        Ty ans=0;\n        while(node[x].top != node[y].top)\n        {\n            if(node[node[x].top].depth &lt; node[node[y].top].depth)\n            {\n                swap(x,y);\n            }\n            ans+=tree.ask_sum(1,node[node[x].top].dfn,node[x].dfn);\n            x=node[node[x].top].fa;\n        }\n        if(node[x].depth&lt;node[y].depth)\n            swap(x,y);\n        ans+=tree.ask_sum(1,node[y].dfn,node[x].dfn);\n        return ans;\n    }\n\n    //\u53d6\u5f97x\u3001y\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\n    Ty get_max(int x,int y)\n    {\n        Ty ans=-INF;\n        while (node[x].top!=node[y].top)\n        {\n            if(node[node[x].top].depth&lt;node[node[y].top].depth)\n                swap(x,y);\n            ans=max(tree.ask_maxval(1,node[node[x].top].dfn,node[x].dfn),ans); //!!\n            x=node[node[x].top].fa;\n        }\n        if(node[x].depth&lt;node[y].depth)\n            swap(x,y);\n        ans=max(tree.ask_maxval(1,node[y].dfn,node[x].dfn),ans);\n        return ans;\n    }\n\n    //\u9884\u5b58\u70b9\u6743\u5230dfn\u6743\u4e0a\n    void init_wdfn()\n    {\n        for(int i=1;i&lt;=n;i++)\n        {\n            w_dfn[node[i].dfn]=node[i].w;\n        }\n        // tree.build_tree(1,1,n);\n    }\n}\nusing namespace HLD;\n\n\nint main()\n{\n    scanf(\"%d\",&amp;n);\n    for(int i=1;i&lt;=n-1;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&amp;x,&amp;y);\n        adde(x,y);\n        adde(y,x);\n    }\n    dfs(1,1);\n    dfs2(1,1);\n    for(int i=1;i&lt;=n;i++)\n    {\n        //Ty\n        scanf(\"%d\",&amp;node[i].w);\n    }\n    init_wdfn();\n    tree.build_tree(1,1,n);\n\n    int q;\n    scanf(\"%d\",&amp;q);\n    for(int i=1;i&lt;=q;i++)\n    {\n        char op[10];\n        int x,y;\n        scanf(\"%s\",op);\n        scanf(\"%d%d\",&amp;x,&amp;y);\n        if(op[0]=='C')\n        {\n            tree.singlechange(1,node[x].dfn,y);\n        }\n        else if(op[1]=='M')\n        {\n            // cout&lt;&lt;get_max(x,y)&lt;&lt;endl;\n            printf(\"%d\\n\",get_max(x,y));\n        }\n        else if(op[1]=='S')\n        {\n            // cout&lt;&lt;get_sum(x,y)&lt;&lt;endl;\n            printf(\"%d\\n\",get_sum(x,y));\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#edcc","title":"\u65e0\u5411\u56feEDCC","text":"<pre><code>//\u65e0\u5411\u56fe\u7684\u6865\u3001\u8fb9\u53cc\u8054\u901a\u5206\u91cf\n// POJ 3694\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Edges\n{\n    typedef int Ty;\n    const int N=1e5+10,M=4e5+10;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    struct E\n    {\n        int to, inext;\n        bool is_cut;\n        // is_cut: \u662f\u5426\u4e3a\u5272\u8fb9\n    } edge[M];\n    int head[N], total=1; //\u26a0\ufe0f\u6ce8\u610f\uff1a\u4ece1\u5f00\u59cb\u8ba1\u6570\uff01\n\n    //\u65b0\u56fe\u4e2d\u7684\u8fb9\n    E edge_c[M];\n    int head_c[N], total_c;\n\n    void adde(int x, int y)\n    {\n        edge[++total].to = y;\n        edge[total].is_cut = false;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n\n    void adde_c(int x,int y)\n    {\n        edge_c[++total_c].to=y;\n        edge_c[total_c].inext=head_c[x];\n        head_c[x]=total_c;\n    }\n}\nusing namespace Edges;\n\nnamespace EDCC\n{\n    struct Node\n    {\n        int dfn,low,c; \n        //dfn,low\uff1adfn\u548c\u6700\u5c0f\u53ef\u8ffd\u6eaf\u503c\n        //c: \u70b9\u6240\u5c5e\u7684edcc\u7f16\u53f7\n    }node[N];\n\n    //public\n    int dfn=0;\n    int edcc_cnt=0;\n    //dfn:\u5168\u5c40dfn\u7f16\u53f7\u8ba1\u6570\u5668\n    //edcc_cnt\uff1a\u5728\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u8ba1\u7b97edcc\u6570\u76ee\n\n    //tarjan\u6c42\u51fa\u6865. in_edge:\u8fdb\u5165\u70b9x\u7684\u8fb9\u5728\u539f\u56fe\u4e2d\u7684\u4e0b\u6807\uff0c\u7528\u4e8e\u963b\u6b62\u904d\u5386\u53cd\u5411\u8fb9\n    void tarjan(int x,int in_edge)\n    {\n        node[x].dfn=node[x].low=++dfn;\n        for(int e=head[x];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            if(!node[y].dfn)\n            {\n                tarjan(y,e);\n                node[x].low=min(node[x].low,node[y].low);\n                if(node[y].low&gt;node[x].dfn)\n                {\n                    edge[e].is_cut=edge[e^1].is_cut=true;\n                }\n            }\n            else if(e!=(in_edge^1))\n            {\n                node[x].low=min(node[x].low,node[y].dfn);\n            }\n        }\n    }\n\n    //\u5bf9\u6240\u6709\u70b9\u505a\u4e00\u6b21tarjan\n    void tarjan_forall(int n=n)\n    {\n        for(int i=1;i&lt;=n;i++)\n        {\n            if(node[i].dfn==0)\n            {\n                tarjan(i,-1);\n            }\n        }\n    }\n\n    //int edcc_cnt=0;\n    //dfs\u6807\u8bb0\u5404\u70b9\u6240\u5c5e\u7684edcc\n    void __edcc_dfs(int x)\n    {\n        node[x].c=edcc_cnt;\n        for(int e=head[x];e;e=edge[e].inext)\n        {\n            if(edge[e].is_cut) continue;\n            int y=edge[e].to;\n            if(node[y].c) continue;\n            __edcc_dfs(y);\n        }\n    }\n\n    //dfs\u6807\u8bb0\u5404\u70b9\u6240\u5c5e\u7684edcc\uff08\u5bf9\u6240\u6709\u70b9\uff09\n    void edcc_forall(int n=n)\n    {\n        for(int i=1;i&lt;=n;i++)\n        {\n            if(node[i].c)\n            {\n                edcc_cnt++;\n                __edcc_dfs(i);\n            }\n        }\n    }\n\n    //edcc\u7f29\u70b9\uff1a\u5728\u65b0\u56fe\u4e0a\u5efa\u56fe\n    void edcc_suodian()\n    {\n        for(int i=2;i&lt;=total;i++) //\u6ce8\u610f\u8fd9\u91cc\u904d\u5386\u7684\u662f\u8fb9\n        {\n            int x=edge[i].to,y=edge[i^1].to;\n            if(node[x].c == node[y].c) continue;\n            adde_c(node[x].c,node[y].c);\n        }\n    }\n}\nusing namespace EDCC;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#vdcc","title":"\u65e0\u5411\u56feVDCC\uff08\u70b9\u53cc\uff09","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Edges\n{\n    typedef int Ty;\n    const int N=6e5+10,M=6e5+10;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    struct E\n    {\n        int to, inext;\n    } edge[M];\n    int head[N], total=1; //\u26a0\ufe0f\u6ce8\u610f\uff1a\u4ece1\u5f00\u59cb\u8ba1\u6570\uff01\n\n    //\u65b0\u56fe\u4e2d\u7684\u8fb9\n    E edge_c[M];\n    int head_c[N], total_c;\n\n    void adde(int x, int y)\n    {\n        edge[++total].to = y;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n\n    void adde_c(int x,int y)\n    {\n        edge_c[++total_c].to=y;\n        edge_c[total_c].inext=head_c[x];\n        head_c[x]=total_c;\n    }\n\n}\nusing namespace Edges;\n\nnamespace VDCC\n{\n    struct Node\n    {\n        int dfn,low; \n        int c;\n        bool is_cutpoint;\n        //dfn,low\uff1adfn\u548c\u6700\u5c0f\u53ef\u8ffd\u6eaf\u503c\n        //is_cutpoint: \u662f\u5272\u70b9\u6807\u8bb0\n\n        //c: \u4e00\u822c\u70b9\u6240\u5c5e\u7684edcc\u7f16\u53f7 / \u5272\u70b9\u5728\u65b0\u56fe\u4e2d\u6240\u5c5e\u7684\u70b9\u7684\u7f16\u53f7\n    }node[N];\n\n    //public\n    int dfn=0;\n    int vdcc_cnt=0;\n    vector&lt;int&gt; vdcc[N];\n    //dfn:\u5168\u5c40dfn\u7f16\u53f7\u8ba1\u6570\u5668\n    //vdcc_cnt\uff1a\u5728\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u8ba1\u7b97vdcc\u6570\u76ee\n    //vdcc: \u4fdd\u5b58\u6240\u6709vdcc\u4e2d\u70b9\u7684\u7f16\u53f7\u7684vector\u96c6\u5408\n\n    //local\n    int st[N],st_p;\n    //st:\u6808\n\n    //tarjan\u6c42\u51fa\u5272\u70b9\uff0c\u540c\u65f6\u987a\u5e26\u6c42\u51favdcc\n    void tarjan(int x,int root) //for vdcc\n    {\n        node[x].dfn=node[x].low=++dfn;\n        if(x==root &amp;&amp; head[x]==0)\n        {\n            vdcc[++vdcc_cnt].push_back(x);\n            // single[x]=true;\n            return ;\n        }\n        st[++st_p]=x;\n        int flag=0;\n        for(int e=head[x];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            if(!node[y].dfn)\n            {\n                tarjan(y,root);\n                node[x].low=min(node[x].low,node[y].low);\n                if(node[x].dfn&lt;=node[y].low)\n                {\n                    flag++;\n                    if(x!=root || flag&gt;1) node[x].is_cutpoint=true;\n                    vdcc_cnt++;\n                    int z;\n                    do\n                    {\n                        z=st[st_p--];\n                        vdcc[vdcc_cnt].push_back(z);\n                    } while (z!=y);\n                    vdcc[vdcc_cnt].push_back(x);\n                }\n            }\n            else\n                node[x].low=min(node[x].low,node[y].dfn);\n        }\n    }\n\n    //\u4e00\u822c\u7684\u6c42\u5272\u70b9\uff0c\u4e0d\u6c42\u51favdcc\n    void tarjan2(int x,int root,int in_edge=-1)\n    {\n        node[x].dfn=node[x].low=++dfn;\n        int flag=0;\n        for(int e=head[x];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            if(!node[y].dfn)\n            {\n                tarjan2(y,root,in_edge);\n                node[x].low=min(node[x].low,node[y].low);\n                if(node[x].dfn&lt;=node[y].low)\n                {\n                    flag++;\n                    if((x==root &amp;&amp; flag&gt;=2) || (x!=root))\n                    {\n                        node[x].is_cutpoint=true;\n                    }\n                }\n            }\n            else if(e!=(in_edge^1))\n            //\u6216\u8005\u76f4\u63a5else\n                node[x].low=min(node[x].low,node[y].dfn);\n        }\n    }\n\n    //tarjan\u6c42\u51fa\u5272\u70b9\u548cvdcc\uff08\u5bf9\u6240\u6709\u70b9\uff09\n    void tarjan_forall(int n=n)\n    {\n        for(int i=1;i&lt;=n;i++)\n        {\n            if(node[i].dfn==0)\n            {\n                tarjan(i,i);\n            }\n        }\n    }\n\n    //vdcc\u7f29\u70b9\uff1a\u5728\u65b0\u56fe\u4e0a\u5efa\u56fe\n    //\u4e3a\u6240\u6709\u5272\u70b9\u7684c\u65b0\u5206\u914d\u7f16\u53f7(vdcc_cnt+1 ~ vdcc_cnt*2)\uff0c\u5176\u4ed6\u70b9\u7684c\u4fdd\u5b58\u81ea\u5df1\u6240\u5c5e\u7684vdcc\u7f16\u53f7\n    //\u65b0\u7684\u56fe\u4f1a\u662f\u4ee5\u5404\u4e2a\u5272\u70b9\u4e3a\u4e2d\u5fc3\u8fde\u63a5\u5230\u5404\u4e2avdcc\u7f29\u6210\u7684\u70b9\uff08\u7528vdcc\u7f16\u53f7\u8868\u793a\uff09\u7684\u56fe\u3002\n    void vdcc_suodian()\n    {\n        int num=vdcc_cnt;\n        for(int i=1;i&lt;=n;i++)\n        {\n            if(node[i].is_cutpoint)\n                node[i].c=++num; // node[i].new_id\n        }\n\n        total_c=1;\n        for(int i=1;i&lt;=vdcc_cnt;i++)\n        {\n            for(auto x:vdcc[i])\n            {\n                if(node[x].is_cutpoint)\n                {\n                    adde_c(i,node[x].c);\n                    adde_c(node[x].c,i);\n                }\n                else node[x].c=i;\n            }\n        }\n    }\n}\nusing namespace VDCC;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#tarjan","title":"\u6709\u5411\u56fetarjan\u7f29\u70b9","text":"<pre><code>// LUOGU 3387 \u7f29\u70b9 (\u6709\u5411\u56fetarjan\u7f29\u70b9)\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\nconst int N=2e4+5,M=2e5+5;\nstruct E\n{\n    int to,inext;\n}edge[M],edge_c[M];\nint head[N],total;\nint head_c[N],total_c;\nint n,m,a[N];\n//vector&lt;int&gt; scc[N];\nint st[N],st_p,cnt,c[N],sum[N]; //stack, scc_count, scc_sum\nint dfn[N],low[N],dfn_cnt;\nbool inst[N]; //in stack\nint in_degree[N];\n\nvoid adde(int x,int y)\n{\n    edge[++total].to=y;\n    edge[total].inext=head[x];\n    head[x]=total;\n}\n\nvoid adde_c(int x,int y)\n{\n    edge_c[++total_c].to=y;\n    edge_c[total_c].inext=head_c[x];\n    head_c[x]=total_c;\n}\n\nvoid tarjan(int x)\n{\n    dfn[x]=low[x]=++dfn_cnt;\n    st[++st_p]=x; inst[x]=true;\n    for(int e=head[x];e;e=edge[e].inext)\n    {\n        int y=edge[e].to;\n        if(!dfn[y])\n        {\n            tarjan(y);\n            low[x]=min(low[x],low[y]);\n        }\n        else if(inst[y])\n            low[x]=min(low[x],dfn[y]);\n\n    }\n    if(dfn[x]==low[x]) //scc judge success\n    {\n        cnt++; //scc_cnt++\n        while (st[st_p]!=x)\n        {\n            int y=st[st_p];\n            //scc[cnt].emplace_back(y);\n            inst[y]=false;\n            c[y]=cnt;\n            sum[cnt]+=a[y];\n            st_p--;\n        }\n        //x\n        //scc[cnt].emplace_back(x);\n        inst[x]=false;\n        c[x]=cnt;\n        sum[cnt]+=a[x];\n        st_p--;\n    }\n}\n\nvoid creat_new_graph()\n{\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int e=head[i];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            if(c[i]==c[y]) continue; //same scc\n            else \n            {\n                adde_c(c[i],c[y]);\n                in_degree[c[y]]++;\n            }\n        }\n    }\n}\n\nint f[N],ans=0;\nvoid topo() //for Graph2\n{\n    queue&lt;int&gt; q;\n    for(int i=1;i&lt;=cnt;i++)\n    {\n        if(!in_degree[i])\n        {\n            q.push(i);\n            f[i]=sum[i];\n            ans=max(ans,f[i]);\n        }\n    }\n\n    while (q.size())\n    {\n        int x=q.front();\n        q.pop();\n\n        for(int e=head_c[x];e;e=edge_c[e].inext)\n        {\n            int y=edge_c[e].to;\n            f[y]=max(f[y],f[x]+sum[y]);\n            ans=max(ans,f[y]);\n            in_degree[y]--;\n            if(!in_degree[y])\n                q.push(y);\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin&gt;&gt;n&gt;&gt;m;\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;a[i];\n    for(int i=1;i&lt;=m;i++)\n    {\n        int x,y;\n        cin&gt;&gt;x&gt;&gt;y;\n        adde(x,y);\n    }\n    for(int i=1;i&lt;=n;i++)\n    {\n        if(!dfn[i]) tarjan(i);\n    }\n    creat_new_graph();\n    topo();\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_41","title":"\u5308\u7259\u5229","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Edges\n{\n    typedef int Ty;\n    const int N=1e4+10,M=2e5+100;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    struct E\n    {\n        int  to, inext;\n        Ty w;\n    } edge[M];\n    int head[N], total;\n\n    void adde(int x, int y, Ty w)\n    {\n        edge[++total].to = y;\n        edge[total].w = w;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n\n\nnamespace Hungary\n{\n    const int N=1e4+10;\n\n    //local\n    bool vis[N];\n    int match[N];\n    //vis:\u5308\u7259\u5229\u7b97\u6cd5\u4e2d\u7528\u4e8e\u6807\u8bb0\u8282\u70b9\u662f\u5426\u8d70\u8fc7\n    //match:\u4e8c\u5206\u56fe\u7684\u53f3\u4fa7\u8282\u70b9\u5bf9\u5e94\u7684\u5de6\u4fa7\u8282\u70b9\u5339\u914d\u8c01\uff08\u5982\u679c\u662f\u5728\u540c\u4e00\u5f20\u56fe\u4e2d\u4f7f\u7528\u7edf\u4e00\u7f16\u53f7\u5219\u4e5f\u53ef\u4fdd\u5b58\u5de6\u4fa7\u70b9\u7684\u5339\u914d\u60c5\u51b5\uff09\n    //\u9644\u6ce8\uff1a\u539f\u7b97\u6cd5\u91cc\u9762\u5de6\u4fa7\u8282\u70b9\u7684\u7f16\u53f7\u548c\u53f3\u4fa7\u8282\u70b9\u7684\u6807\u53f7\u662f\u53ef\u4ee5\u76f8\u540c\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\u628a\u5de6\u4fa7\u548c\u53f3\u4fa7\u770b\u6210\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u56fe\n\n    //\u5bfb\u627e\u4e00\u6761\u589e\u5e7f\u8def\u5e76\u6539\u53d8\u5339\u914d\n    bool __dfs(int x)\n    {\n        for(int e=head[x];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            if(!vis[y])\n            {\n                vis[y]=true;\n                if(!match[y] || __dfs(match[y]))\n                {\n                    match[y]=x;\n                    // match[x]=y; //\u80fd\u4f7f\u7528\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u70b9\u7f16\u53f7\u552f\u4e00\uff08\u5de6\u4fa7\u70b9\u4e0e\u53f3\u4fa7\u70b9\u7f16\u53f7\u4e0d\u4f1a\u76f8\u540c\uff09\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    void __clear_visit(int n=n)\n    {\n        for(int i=1;i&lt;=n*2;i++) vis[i]=false; //\u6ce8\u610f\u8981\u6539\u8303\u56f4\n    }\n\n    //\u4e8c\u5206\u56fe\u5339\u914d\n    int do_Hungary()\n    {\n        int ans=0;\n        for(int i=1;i&lt;=n;i++) //\u4e8c\u5206\u56fe\u7684\u4e00\u4fa7\uff08\u5de6\u4fa7\uff09\u6709n\u4e2a\u70b9\uff0c\u7f16\u53f7\u4e3a1~n\n        {\n            __clear_visit();\n            if(__dfs(i)) ans++;\n        }   \n        return ans;\n    }\n}\nusing namespace Hungary;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#km-bfs","title":"KM-BFS","text":"<pre><code>//2021\u725b\u5ba2\u591a\u68215 J Jewels\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\n// typedef long long ll;\nusing ll=long long;\n// const int N=2e5+10;\n\nnamespace KMKM\n{\n    using Ty=ll;\n    const int N=310;\n    const Ty Inf=1e18;  \n\n    int n;\n    Ty g[N][N];\n    //g\uff1a\u5e26\u6743\u5de6\u53f3\u5b50\u56fe\uff08\u4e8c\u5206\u56fe\uff0c\u5de6\u53f3\u4e24\u8fb9\u4e0b\u6807\u90fd\u662f\u4ece1\u5f00\u59cb\uff09\n\n    int matchx[N],matchy[N];\n    int pre[N];\n    bool visx[N],visy[N];\n    Ty lx[N],ly[N];\n    Ty slack[N];\n    //match:\u5339\u914d\u70b9\u6620\u5c04\u96c6\u5408\u3002\u8981\u6c42\u4e00\u5b9a\u662f\u5b8c\u7f8e\u5339\u914d\uff0c\u56e0\u6b64\u4e00\u5b9a\u5b58\u5728\n    //slack\uff1a\u677e\u5f1b\u6570\u7ec4\uff0c\u8bb0\u5f55\u4e86delta\u503c\n    //lx\u3001ly\uff1a\u6807\u53f7\u6570\u7ec4\uff0c\u53c2\u89c1\u674e\u715c\u4e1c\u84dd\u4e66\n\n    //\u521d\u59cb\u5316\u6807\u53f7\u6570\u7ec4\u7684\u503c\n    void __init(int n)\n    {\n        for(int i=1;i&lt;=n;i++)\n        {\n            lx[i]=ly[i]=0;\n            for(int j=1;j&lt;=n;j++)\n            {\n                lx[i]=max(lx[i],g[i][j]);\n            }\n        }\n    }\n\n    bool __check(int y, queue&lt;int&gt; &amp;q)\n    {\n        visy[y]=1;\n        if(matchy[y]!=0)\n        {\n            q.push(matchy[y]);\n            visx[matchy[y]]=1;\n            return false;\n        }\n        while(y!=0)\n        {\n            matchy[y]=pre[y];\n            swap(y,matchx[pre[y]]);\n        }\n        return true;\n    }\n\n    void __bfs(int u)\n    {\n        queue&lt;int&gt; q;\n        q.push(u);\n        visx[u]=1;\n        while(true)\n        {\n            while(q.size())\n            {\n                int x=q.front();\n                q.pop();\n                for(int y=1;y&lt;=n;y++)\n                {\n                    if(visy[y]==0)\n                    {\n                        Ty delta=lx[x]+ly[y]-g[x][y];\n                        if(slack[y]&gt;=delta)\n                        {\n                            pre[y]=x;\n                            if(delta)\n                            {\n                                slack[y]=delta;\n                            }\n                            else if(__check(y,q))\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n\n            Ty delta=Inf;\n            for(int j=1;j&lt;=n;j++)\n            {\n                if(visy[j]==0)\n                {\n                    delta=min(delta,slack[j]);\n                }\n            }\n            for(int j=1;j&lt;=n;j++)\n            {\n                if(visx[j])\n                {\n                    lx[j]-=delta;\n                }\n                if(visy[j])\n                {\n                    ly[j]+=delta;\n                }\n                else\n                {\n                    slack[j]-=delta;\n                }\n            }\n            for(int j=1;j&lt;=n;j++)\n            {\n                if(visy[j]==0 &amp;&amp; slack[j]==0 &amp;&amp; __check(j,q))\n                {\n                    return;\n                }\n            }\n\n        }\n    }\n\n    //\u6700\u5927\u6743\u503c\u5339\u914d\u3002\u8981\u60f3\u53d6\u5f97\u6700\u5c0f\u6743\u503c\u5339\u914d\uff0c\u5c06\u6743\u503c\u53d6\u53cd\u3002\n    void KM()\n    {\n        __init(n);\n        for(int i=1;i&lt;=n;i++)\n        {\n            fill(slack,slack+1+n,Inf);\n            fill(visx,visx+1+n,0);\n            fill(visy,visy+1+n,0);\n            __bfs(i);\n        }\n    }\n\n}\nusing namespace KMKM;\n\n\nstruct J\n{\n    ll x, y, z, v;\n} a[310];\n\nll gw(ll t, int i)\n{\n    return a[i].v * a[i].v * t * t + a[i].z * 2 * a[i].v * t;\n}\n\n\nint main()\n{\n\n    scanf(\"%d\", &amp;n);\n    ll ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        // cin&gt;&gt;a[i].x\n        scanf(\"%lld\", &amp;a[i].x);\n        scanf(\"%lld\", &amp;a[i].y);\n        scanf(\"%lld\", &amp;a[i].z);\n        scanf(\"%lld\", &amp;a[i].v);\n        ans += a[i].x * a[i].x;\n        ans += a[i].y * a[i].y;\n        ans += a[i].z * a[i].z;\n    }\n\n\n    for (int i = 1; i &lt;= n; i++) //t=0~n-1\n    {\n        ll t = i - 1;\n        for (int j = 1; j &lt;= n; j++)\n        {\n            ll val = gw(t, j);\n            g[i][j]=-val;\n        }\n    }\n\n    KM();\n\n    for(int i=1;i&lt;=n;i++)\n    {\n        ans+=-g[i][matchx[i]];\n    }   \n    printf(\"%lld\\n\",ans);\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#edmonds-karp","title":"\u7f51\u7edc\u6d41\uff1aEdmonds Karp","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description __bfs n Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\u3002S\u3001T\uff1a\u6e90\u70b9\u548c\u6c47\u70b9 incf\uff1a\u6e90\u70b9\u5230\u70b9x\u7684\u6700\u5c0f\u5269\u4f59\u5bb9\u91cf\u3002pre\uff1a\u70b9x\u7684\u524d\u9a71\u6570\u7ec4 \u904d\u5386\u6b8b\u5dee\u7f51\u7edc\u627e\u5230\u6700\u957f\u589e\u5e7f\u8def\u3002 __update m Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\uff1bincf\u3001pre\uff1a\u540c\u4e0a\u8f93\u51fa\u3002S\u3001T\uff1a\u6e90\u70b9\u548c\u6c47\u70b9 \u8fd4\u56de\u6b64\u6b21\u66f4\u65b0\u7684\u6d41\u91cf\u5927\u5c0f\u3002Edges\uff1a\u66f4\u65b0\u540e\u7684\u6b8b\u5dee\u7f51\u7edc\u3002 \u4ece\u6c47\u70b9t\u5f00\u59cb\u5012\u7740\u66f4\u65b0\u589e\u5e7f\u8def\u4ee5\u53ca\u53cd\u5411\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf get_maxflow nm^2 s,t\uff1a\u6e90\u70b9\u4e0e\u6c47\u70b9 \u6700\u5927\u6d41\u5927\u5c0f \u53d6\u5f97\u6700\u5927\u6d41 <pre><code>//\u7f51\u7edc\u6d41\uff1aEdmonds_Karp\u7b97\u6cd5\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;memory.h&gt;\nusing namespace std;\ntypedef long long ll;\nnamespace Edges\n{\n    typedef ll Ty;\n    const int N=1e4+10,M=2e5+100;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    //\u6b8b\u5dee\u7f51\u7edc\u7684\u8fb9\n    struct E\n    {\n        int from, to, inext;\n        Ty w;\n    } edge[M];\n    int head[N], total;\n\n    void adde(int x, int y, Ty w)\n    {\n        edge[++total].from = x;\n        edge[total].to = y;\n        edge[total].w = w;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n\nnamespace Edmonds_Karp\n{\n    typedef ll Ty;\n    const int N=1e4+10; //N\uff1a\u70b9\u4e2a\u6570\n    const Ty Inf=1e18; //Inf\uff1a\u6d41\u91cf\u65e0\u7a77\u5927\u503c\n    //public\n    int S,T; //S,T:\u6e90\u70b9\u548c\u6c47\u70b9\n\n    //local\n    bool v[N]; //v:__bfs\u65f6\u4f7f\u7528\u7684\u6807\u8bb0\u904d\u5386\u6570\u7ec4\n    int pre[N]; //pre\uff1a__bfs\u65f6\u4f7f\u7528\u7684\u8bb0\u5f55\u74f6\u9888\u8def\u524d\u9a71\u8f6c\u79fb\u65b9\u5411\u7684\u6570\u7ec4\n    Ty incf[N]; //incf\uff1a\u589e\u5e7f\u8def\n\n    //\u904d\u5386\u6b8b\u5dee\u7f51\u7edc\u627e\u5230\u6700\u957f\u589e\u5e7f\u8def\u3002\u4ece\u6c47\u70b9t\u5f00\u59cb\u5012\u7740\u66f4\u65b0\u589e\u5e7f\u8def\u4ee5\u53ca\u53cd\u5411\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\n    bool __bfs(int s, int t)\n    {\n        memset(v, 0, sizeof(v));\n        queue&lt;int&gt; q;\n        q.push(s);\n        v[s] = 1;\n        incf[s] = Inf;\n        while (q.size())\n        {\n            int x = q.front();\n            q.pop();\n            for (int e = head[x]; e; e = edge[e].inext)\n            {\n                int y = edge[e].to;\n                if (edge[e].w &amp;&amp; !v[y])\n                {\n                    incf[y] = min(incf[x], edge[e].w);\n                    pre[y] = e;\n                    v[y] = 1;\n                    q.push(y);\n                    if (y == t)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    //\u4ece\u6c47\u70b9t\u5f00\u59cb\u5012\u7740\u66f4\u65b0\u589e\u5e7f\u8def\u4ee5\u53ca\u53cd\u5411\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\n    Ty __update(int s, int t)\n    {\n        int x = t;\n        while (x != s)\n        {\n            int e = pre[x];\n            edge[e].w -= incf[t];\n            if (e % 2)\n                edge[e + 1].w += incf[t];\n            else\n                edge[e - 1].w -= incf[t];\n            x = edge[e].from;\n        }\n        return incf[t];\n    }\n\n    //\u53d6\u5f97\u6700\u5927\u6d41\n    Ty get_maxflow(int s=S,int t=T)\n    {\n        Ty maxflow = 0;\n        while (__bfs(s, t))\n            maxflow += __update(s, t);\n        return maxflow;\n    }\n}\n\nusing namespace Edmonds_Karp;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; T;\n    for (int i = 1; i &lt;= m; i++)\n    {\n        int x, y, w;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        adde(x, y, w);\n        adde(y, x, 0);\n    }\n    ll maxflow=get_maxflow(S,T);\n    cout &lt;&lt; maxflow &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#dinic","title":"\u7f51\u7edc\u6d41\uff1aDinic","text":"<p>\u522b\u5fd8\u4e86\u52a0\u8fb9\u7684\u65f6\u5019\u52a0\u53cd\u5411\u8fb9\u3002</p> <p>10.12\u66f4\u65b0\uff1a\u73b0\u5728\u66f4\u65b0\u4e3a\u5e26\u5f53\u524d\u5f27\u4f18\u5316\u7684\u7248\u672c\uff0c\u53c2\u89c1\u6ce8\u91ca</p> <p>\uff08\u2b50\uff1a\u8fd9\u73a9\u610f\u8fd8\u6709\u4e2a\u6700\u77ed\u5f27\u4f18\u5316\u6211\u6ca1\u6574\u2026\u2026\u6709\u5f85\u8fdb\u4e00\u6b65\u6539\u8fdb\uff09</p> Funs || Methods Reliance Time Complexity Inputs Outputs Description __bfs n Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\u3002S\u3001T\uff1a\u6e90\u70b9\u548c\u6c47\u70b9 d\uff1a\u5c42\u6b21\u6570\u7ec4 \u53d6\u5f97\u5f53\u524d\u6b8b\u5dee\u7f51\u7edc\u4eces\u89e6\u53d1\u7684\u5404\u4e2a\u70b9\u7684\u5c42\u6b21 __dinic n Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\u3002d\uff1a\u5c42\u6b21\u6570\u7ec4\u3002S\u3001T\uff1a\u6e90\u70b9\u548c\u6c47\u70b9\u3002 \u8fd4\u56de\u6b64\u6b21\u66f4\u65b0\u7684\u6d41\u91cf\u5927\u5c0f\u3002Edges\uff1a\u66f4\u65b0\u540e\u7684\u6b8b\u5dee\u7f51\u7edc\u3002 \u5728\u5206\u5c42\u56fe\u4e0a\u66f4\u65b0\u6700\u5927\u6d41\u5e76\u8fd4\u56de\u66f4\u65b0\u503c get_maxflow (n^2)*m s,t\uff1a\u6e90\u70b9\u4e0e\u6c47\u70b9\u3002 \u6700\u5927\u6d41\u5927\u5c0f \u53d6\u5f97\u6700\u5927\u6d41 <pre><code>//\u7f51\u7edc\u6d41\uff1aDinic\u7b97\u6cd5\n//\u5e26\u5f53\u524d\u5f27\u4f18\u5316\n#include &lt;iostream&gt;\n#include &lt;memory.h&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nnamespace Edges\n{\n    typedef ll Ty;\n    const int N=1e4+10,M=2e5+100;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    //\u6b8b\u5dee\u7f51\u7edc\u7684\u8fb9\n    struct E\n    {\n        int from, to, inext;\n        Ty w;\n    } edge[M];\n    int head[N], total;\n\n    void adde(int x, int y, Ty w)\n    {\n        edge[++total].from = x;\n        edge[total].to = y;\n        edge[total].w = w;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n\n\nnamespace Dinic\n{\n    typedef ll Ty;\n    const int N=1e4+10; //N\uff1a\u70b9\u4e2a\u6570\n    const Ty Inf=1e18; //Inf\uff1a\u6d41\u91cf\u65e0\u7a77\u5927\u503c\n    //public\n    int S,T; //S,T:\u6e90\u70b9\u548c\u6c47\u70b9\n\n    //local\n    int d[N]; //d\uff1a\u5c42\u6b21\u6570\u7ec4\n    int cur_head[N]; // cur_head: \u7528\u4e8e\u5f53\u524d\u5f27\u4f18\u5316\n\n    //\u53d6\u5f97\u5f53\u524d\u6b8b\u5dee\u7f51\u7edc\u4eces\u89e6\u53d1\u7684\u5404\u4e2a\u70b9\u7684\u5c42\u6b21\n    bool __bfs(int s, int t)\n    {\n        memset(d, 0, sizeof(d));\n        memcpy(cur_head, head,sizeof(head)); //\u7528\u4e8e\u5f53\u524d\u5f27\u4f18\u5316\n        queue&lt;int&gt; q;\n        q.push(s);\n        d[s] = 1;\n        while (q.size())\n        {\n            int x = q.front();\n            q.pop();\n            // for (int e = head[x]; e; e = edge[e].inext)\n            for(int e=cur_head[x];e;e=edge[e].inext)\n            {\n                cur_head[x]=e; //\u66f4\u65b0\u5f53\u524d\u5f27\uff1a\u539f\u56e0\u662f\u4e00\u6761\u8fb9\u589e\u5e7f\u4e00\u6b21\u540e\u5c31\u4e0d\u4f1a\u518d\u6b21\u589e\u5e7f\u4e86\uff0c\u6240\u4ee5\u4e0b\u6b21\u589e\u5e7f\u65f6\u4e0d\u9700\u8981\u518d\u8003\u8651\u8fd9\u6761\u8fb9\u3002\n                int y = edge[e].to;\n                if (edge[e].w &amp;&amp; !d[y])\n                {\n                    q.push(y);\n                    d[y] = d[x] + 1;\n                    if (y == t)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    // \u5728\u5206\u5c42\u56fe\u4e0a\u66f4\u65b0\u6700\u5927\u6d41\u5e76\u8fd4\u56de\u66f4\u65b0\u503c\n    Ty __dinic(int x, Ty flow, int t)\n    {\n        if (x == t)\n            return flow;\n        Ty rest = flow, delta;\n        for (int e = head[x]; e; e = edge[e].inext)\n        {\n            if (rest == 0)\n                return flow; //!!!\n            if (edge[e].w &amp;&amp; d[edge[e].to] == d[x] + 1)\n            {\n                delta = __dinic(edge[e].to, min(edge[e].w, rest), t);\n                if (!delta)\n                    d[edge[e].to] = 0; //pruning\n                edge[e].w -= delta;\n                if (e % 2)\n                    edge[e + 1].w += delta;\n                else\n                    edge[e - 1].w += delta; //+= ?\n                rest -= delta;\n            }\n        }\n        return flow - rest;\n    }\n\n    // \u53d6\u5f97\u6700\u5927\u6d41\n    Ty get_maxflow(int s=S,int t=T)\n    {\n        Ty maxflow = 0;\n        while (__bfs(s, t))\n        {\n            Ty flow;\n            while (flow = __dinic(s, Inf, t))\n                maxflow += flow;\n        }\n        return maxflow;\n    }\n}\n\nusing namespace Dinic;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; T;\n    for (int i = 1; i &lt;= m; i++)\n    {\n        int x, y, w;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        adde(x, y, w); //\u522b\u5fd8\u4e86\u52a0\u53cd\u5411\u8fb9\uff01\n        adde(y, x, 0);\n    }\n    ll maxflow = get_maxflow(S,T);\n    cout &lt;&lt; maxflow &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#hlpp","title":"\u7f51\u7edc\u6d41\uff1aHLPP\uff08\u6700\u9ad8\u6807\u53f7\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\uff09","text":"<p>\u26a0\ufe0f\u6ce8\u610f\uff1a\u9700\u8981\u5c06total\u521d\u59cb\u5316\u4e3a1\u3002</p> Funs || Methods Reliance Time Complexity Inputs Outputs Description __ht_init n Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\uff1bs\u3001t\uff1a\u6e90\u70b9\u548c\u6c47\u70b9 \u8fd4\u56de\u503c\u8868\u793as\u3001t\u662f\u5426\u8fde\u901a\u3002ht\uff1a\u9ad8\u5ea6\u6570\u7ec4\u3002 \u4ecet\u5f00\u59cb\u8ba1\u7b97\u5404\u70b9\u9ad8\u5ea6\u3002\u8fd4\u56de\u503c\u8868\u793as\u3001t\u662f\u5426\u8fde\u901a __gap_init n ht\uff1a\u9ad8\u5ea6\u6570\u7ec4\uff1bs\u3001t\uff1a\u6e90\u70b9\u548c\u6c47\u70b9 gap\uff1a\u7edf\u8ba1\u5bf9\u5e94\u9ad8\u5ea6\u4e2a\u6570\u7684\u70b9\u6570\u7684\u6570\u7ec4 \u7edf\u8ba1\u5bf9\u5e94\u9ad8\u5ea6\u4e2a\u6570\u7684\u70b9\u6570 __s_init s\u76f8\u90bb\u70b9\u6570 Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\uff1bs\u3001t\uff1a\u6e90\u70b9\u548c\u6c47\u70b9 pq\uff1a\u6700\u9ad8\u6807\u53f7\u4f18\u5148\u961f\u5217\u3002vis\uff1a\u8bbf\u95ee\u6570\u7ec4\u3002 \u7528\u6e90\u70b9s\u76f8\u90bb\u7684\u70b9\u521d\u59cb\u5316\u4f18\u5148\u961f\u5217 __push u\u76f8\u90bb\u70b9\u6570 Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\uff1bs\u3001t\uff1a\u6e90\u70b9\u548c\u6c47\u70b9\u3002u\uff1a\u8282\u70b9\u6807\u53f7\u3002 ex\uff1a\u8d85\u989d\u6d41\u6570\u7ec4\u3002vis\uff1a\u8bbf\u95ee\u6570\u7ec4\uff08\u662f\u5426\u5728\u4f18\u5148\u961f\u5217\u4e2d\uff09\u3002Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\u3002 \u5c06\u70b9u\u5411\u7740\u76f8\u90bb\u70b9\u63a8\u9001\u8d85\u989d\u6d41 __relabel u\u76f8\u90bb\u70b9\u6570 Edges\uff1a\u6b8b\u5dee\u7f51\u7edc\uff1bht\uff1a\u9ad8\u5ea6\u6570\u7ec4\uff1bu\uff1a\u8282\u70b9\u6807\u53f7\u3002 ht\uff1a\u9ad8\u5ea6\u6570\u7ec4 \u4e3a\u70b9u\u91cd\u8d34\u9ad8\u5ea6\u6807\u7b7e get_maxflow n^2*sqrt(m) s,t\uff1a\u6e90\u70b9\u4e0e\u6c47\u70b9 \u6700\u5927\u6d41\u5927\u5c0f \u53d6\u5f97\u6700\u5927\u6d41 <pre><code>#include &lt;iostream&gt;\n#include &lt;memory.h&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nnamespace Edges\n{\n    typedef ll Ty;\n    const int N=2e4+10,M=4e5+100;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    //\u6b8b\u5dee\u7f51\u7edc\u7684\u8fb9\n    struct E\n    {\n        int from, to, inext;\n        Ty w;\n    } edge[M];\n    int head[N], total=1; //total\uff1a\u5e94\u5f53\u521d\u59cb\u5316\u4e3a1\n\n    void adde(int x, int y, Ty w)\n    {\n        edge[++total].from = x;\n        edge[total].to = y;\n        edge[total].w = w;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n\nnamespace HLPP {\n    typedef ll Ty;\n    const int N=2e4+10;  //N\uff1a\u70b9\u4e2a\u6570\n    const int Inf2=0x3f3f3f3f; //inf2\uff1a\u9ad8\u5ea6\u65e0\u7a77\u5927\u503c\n    const Ty Inf=1e18;  //Inf\uff1a\u6d41\u91cf\u65e0\u7a77\u5927\u503c\n\n    //public\n    int S,T; //S,T:\u6e90\u70b9\u548c\u6c47\u70b9\n\n    //local\n    int ht[N],gap[N]; //ht, gap\uff1a\u9ad8\u5ea6\u548c\u7edf\u8ba1\u5bf9\u5e94\u9ad8\u5ea6\u6709\u591a\u5c11\u4e2a\u6570\u7684gap\u6570\u7ec4\n    Ty ex[N]; //ex\uff1a\u8d85\u989d\u6d41\n    bool vis[N]; //vis\uff1a\u6807\u8bb0\u67d0\u70b9\u662f\u5426\u88ab\u904d\u5386\n    struct __cmp\n    {\n        bool operator()(int a,int b) const\n        {\n            return ht[a]&lt;ht[b];\n        }\n    }; //\u4f2a\u88c5\u6bd4\u8f83\u51fd\u6570\u7c7b\n    priority_queue&lt;int,vector&lt;int&gt;,__cmp&gt; pq; //pq\uff1a\u4f18\u5148\u961f\u5217\uff0c\u7528\u4e8e\u53d6\u51fa\u6700\u5927\u6807\u53f7\u7684\u70b9\n    //\u4ecet\u5f00\u59cb\u8ba1\u7b97\u5404\u70b9\u9ad8\u5ea6\u3002\u8fd4\u56de\u503c\u8868\u793as\u3001t\u662f\u5426\u8fde\u901a\n    bool __ht_init(int s=S,int t=T)\n    {\n        memset(ht, 0x3f, sizeof(ht));\n        queue&lt;int&gt; q;\n        q.push(t);\n        ht[t]=0;\n        while (q.size()) \n        {\n            int u=q.front();\n            q.pop();\n            for(int e=head[u];e;e=edge[e].inext)\n            {\n                int y=edge[e].to;\n                if(edge[e^1].to &amp;&amp; ht[y]&gt;ht[u]+1)\n                {\n                    ht[y]=ht[u]+1;\n                    q.push(y);\n                }\n            }\n        }\n        return ht[s]!=Inf2;\n    }\n    //\u7edf\u8ba1\u5bf9\u5e94\u9ad8\u5ea6\u4e2a\u6570\u7684\u70b9\u6570\n    void __gap_init()\n    {\n        memset(gap,0,sizeof(gap));\n        for(int i=1;i&lt;=n;i++)\n        {\n            if(ht[i]!=Inf2)\n            {\n                gap[ht[i]]++;\n            }\n        }\n    }\n    //\u7528\u6e90\u70b9s\u76f8\u90bb\u7684\u70b9\u521d\u59cb\u5316\u4f18\u5148\u961f\u5217\n    void __s_init(int s=S,int t=T)\n    {\n        memset(ex,0,sizeof(ex));\n        for(int e=head[s];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            Ty w=edge[e].w;\n            if(w==0)\n                continue;\n            ex[s]-=w;\n            ex[y]+=w;\n            edge[e].w-=w;\n            edge[e^1].w+=w;\n            if(y!=s &amp;&amp; y!=t &amp;&amp; vis[y]==0)\n            {\n                pq.push(y);\n                vis[y]=true;\n            }\n        }\n    }\n    //\u5c06\u70b9u\u5411\u7740\u76f8\u90bb\u70b9\u63a8\u9001\u8d85\u989d\u6d41\n    bool __push(int u,int s=S,int t=T)\n    {\n        for(int e=head[u];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            Ty w=edge[e].w;\n            if(w==0 || ht[u]!=ht[y]+1)\n                continue;\n            Ty k=min(w,ex[u]);\n\n            ex[u]-=k;\n            ex[y]+=k;\n            edge[e].w-=k;\n            edge[e^1].w+=k;\n            if(y!=s &amp;&amp; y!=t &amp;&amp; vis[y]==0)\n            {\n                pq.push(y);\n                vis[y]=true;\n            }\n            if(ex[u]==0)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    // \u4e3a\u70b9u\u91cd\u8d34\u9ad8\u5ea6\u6807\u7b7e\n    void __relabel(int u)\n    {\n        ht[u]=Inf2;\n        for(int e=head[u];e;e=edge[e].inext)\n        {\n            int y=edge[e].to;\n            Ty w=edge[e].w;\n            if(w)\n            {\n                ht[u]=min(ht[u],ht[y]+1);\n            }\n        }\n        //ht[u]++;\n    }\n    //\u53d6\u5f97\u6700\u5927\u6d41\n    Ty get_maxflow(int s=S,int t=T)\n    {\n        if(__ht_init(s,t)==0) // \u56fe\u4e0d\u8fde\u901a\n            return 0;\n        ht[s]=n; //\u521d\u59cb\u5316s\u7684\u9ad8\u5ea6\n        while (pq.size()) { //\u6e05\u7a7a\u961f\u5217\n            pq.pop();\n        }\n\n        __gap_init();\n        __s_init(s,t);\n        while (pq.size()) \n        {\n            int u=pq.top();\n            pq.pop();\n            vis[u]=0;\n            while (__push(u,s,t)) \n            {\n                if(--gap[ht[u]]==0)\n                {\n                    for(int i=1;i&lt;=n;i++)\n                    {\n                        //gap optimization\n                        //\u5728\u7b97\u6cd5\u7684\u67d0\u4e00\u65f6\u523b\uff0ch(u)=t \u7684\u7ed3\u70b9\u4e2a\u6570\u4e3a0\uff0c\u90a3\u4e48\u5bf9\u4e8eh(i)&gt;t\u7684\u7ed3\u70b9i\u5c31\u6c38\u8fdc\u65e0\u6cd5\u63a8\u9001\u8d85\u989d\u6d41\u5230t\uff0c\u56e0\u6b64\u53ea\u80fd\u9001\u56des\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5728\u8fd9\u65f6\u76f4\u63a5\u8ba9\u4ed6\u4eec\u7684\u9ad8\u5ea6\u53d8\u6210n+1\uff0c\u4ee5\u5c3d\u5feb\u63a8\u9001\u56des\uff0c\u51cf\u5c11\u91cd\u8d34\u6807\u7b7e\u7684\u64cd\u4f5c\u3002\n                        if(i!=s &amp;&amp; i!=t &amp;&amp; ht[i]&gt;ht[u] &amp;&amp; ht[i]&lt;n+1) \n                        {\n                            ht[i]=n+1;\n                        }\n                    }\n                }\n                __relabel(u);\n                gap[ht[u]]++;\n            }\n        }\n        return ex[t];\n    }\n\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; HLPP::S &gt;&gt; HLPP::T;\n    for (int i = 1; i &lt;= m; i++)\n    {\n        int x, y;\n        ll w;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        adde(x, y, w); //\u522b\u5fd8\u4e86\u52a0\u53cd\u5411\u8fb9\uff01\n        adde(y, x, 0);\n    }\n    ll maxflow = HLPP::get_maxflow(HLPP::S,HLPP::T);\n    cout &lt;&lt; maxflow &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#mcmfek","title":"\u2b50\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff08MCMF\uff09\uff1aEK","text":"<ul> <li>\u26a0\ufe0f\u6ce8\u610f\uff1a\u8fd9\u73a9\u610f\u4e0d\u80fd\u76f4\u63a5\u7528\u4e8e\u6709\u8d1f\u73af\uff08\u8d39\u7528\u8d1f\u73af\uff09\u7684\u56fe\u4e2d\u3002</li> </ul> <pre><code>//\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n#include &lt;iostream&gt;\n#include &lt;memory.h&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\nusing namespace std;\ntypedef long long ll;\nnamespace Edges\n{\n    typedef int Ty;\n    const int N=5e3+10,M=1.2e5+100;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    //\u6b8b\u5dee\u7f51\u7edc\u7684\u8fb9\n    struct E\n    {\n        int from, to, inext;\n        Ty w,c; //w:\u6d41\u91cf, c: \u5355\u4f4d\u8d39\u7528\n    } edge[M];\n    int head[N], total;\n\n    void adde(int x, int y, Ty w, Ty c)\n    {\n        edge[++total].from = x;\n        edge[total].to = y;\n        edge[total].w = w;\n        edge[total].c=c;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n\nnamespace MCMF_EK {\n    typedef int Ty;\n    const int N=5e3+10; //N\uff1a\u70b9\u4e2a\u6570\n    const Ty Inf=0x3f3f3f3f;  //Inf\uff1a\u6d41\u91cf\u65e0\u7a77\u5927\u503c\n    // const int Inf2=0x3f3f3f3f; //inf2\uff1a\u5c42\u6b21\u65e0\u7a77\u5927\u503c\n\n    //public\n    int S,T; //S,T: \u6e90\u70b9\u3001\u6c47\u70b9\n\n    //local\n    bool v[N];\n    int pre[N];\n    Ty incf[N],d[N]; \n    //incf\uff1a\u589e\u5e7f\u8def,\n    //v:__spfa\u65f6\u4f7f\u7528\u7684\u6807\u8bb0\u5728\u961f\u5217\u4e2d\u6570\u7ec4, \n    //pre\uff1a__bfs\u65f6\u4f7f\u7528\u7684\u8bb0\u5f55\u74f6\u9888\u8def\u524d\u9a71\u8f6c\u79fb\u65b9\u5411\u7684\u6570\u7ec4, \n    //d: spfa\u6700\u77ed\u8def\n\n    bool __spfa(int s=S,int t=T)\n    {\n        queue&lt;int&gt; q;\n        // memset(d,0x3f,sizeof(d)); //c\n        //memset(v,0,sizeof(v));\n        for(int i=1;i&lt;=n;i++) //\u6ce8\u610f\u8fd9\u4e2a\u5730\u65b9\u7684n\u53ef\u80fd\u8981\u6539\n        {\n            d[i]=Inf;   //\u6ce8\u610f\u8fd9\u4e2a\u6e05\u7a7a\u4e0d\u80fd\u4f7f\u7528Inf2\uff0c\u56e0\u4e3ad\u7684\u503c\u4e0d\u518d\u662f\u5c42\u6b21\u800c\u662f\u8d39\u7528\u6700\u77ed\u8def\u957f\u5ea6\u4e86\n            v[i]=0;\n        }\n\n        q.push(s);\n        d[s]=0;\n        v[s]=1;\n        incf[s]=Inf;\n        while(q.size())\n        {\n            int x=q.front();\n            q.pop();\n            v[x]=0;\n            for(int e=head[x];e;e=edge[e].inext)\n            {\n                int y=edge[e].to;\n                if(edge[e].w &amp;&amp; d[y]&gt;d[x]+edge[e].c)\n                {\n                    d[y]=d[x]+edge[e].c;\n                    incf[y]=min(incf[x],edge[e].w);\n                    pre[y]=e;\n                    if(!v[y])\n                    {\n                        v[y]=1;\n                        q.push(y);\n                    }\n                }\n            }\n        }\n        if(d[t]==Inf) return false; //no connect\n        return true;\n    }\n\n    Ty __update(Ty&amp; maxflow,int s=S,int t=T)\n    {\n        int x=t;\n        while(x!=s)\n        {\n            int e=pre[x];\n            edge[e].w-=incf[t];\n            if(e%2) edge[e+1].w+=incf[t];\n            else edge[e-1].w+=incf[t];\n            x=edge[e].from;\n        }\n        maxflow+=incf[t];\n        return incf[t]*d[t];\n    }\n\n    auto get_mcmf(int s=S,int t=T)\n    {\n        Ty maxflow=0, cost=0;\n        while (__spfa(s,t)) \n        {\n            cost+=__update(maxflow,s,t);\n        }\n        return make_pair(maxflow, cost);\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;MCMF_EK::S&gt;&gt;MCMF_EK::T;\n    for(int i=1;i&lt;=m;i++)\n    {\n        int x,y;\n        ll w,c;\n        cin&gt;&gt;x&gt;&gt;y&gt;&gt;w&gt;&gt;c;\n        adde(x,y,w,c); //!\n        adde(y,x,0,-c); //!\n    }\n\n    auto ans=MCMF_EK::get_mcmf();\n    cout&lt;&lt;ans.first&lt;&lt;\" \"&lt;&lt;ans.second&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#zkw","title":"ZKW \u8d39\u7528\u6d41","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Edges\n{\n    typedef int Ty;\n    const int N=5e3+10,M=1.2e5+10;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    //\u6b8b\u5dee\u7f51\u7edc\u7684\u8fb9\n    struct E\n    {\n        int from, to, inext;\n        Ty w , c;\n    } edge[M];\n    int head[N], total;\n\n    void adde(int x, int y, Ty w, Ty c)\n    {\n        edge[++total].from = x;\n        edge[total].to = y;\n        edge[total].w = w;\n        edge[total].c=c;\n        edge[total].inext = head[x];\n        head[x] = total;\n    }\n}\nusing namespace Edges;\n\nnamespace MCMF_ZKW {\n    typedef int Ty;\n    const int N=5e3+10; //N\uff1a\u70b9\u4e2a\u6570\n    const Ty Inf=0x3f3f3f3f;  //Inf\uff1a\u6d41\u91cf\u65e0\u7a77\u5927\u503c\n    // const int Inf2=0x3f3f3f3f; //inf2\uff1a\u5c42\u6b21\u65e0\u7a77\u5927\u503c\n\n    //public\n    int S,T; //S,T: \u6e90\u70b9\u3001\u6c47\u70b9\n\n    //local\n    bool v[N];\n    Ty d[N]; \n    //incf\uff1a\u589e\u5e7f\u8def\n    //d: spfa\u6700\u77ed\u8def\n\n    //\u4f7f\u7528SLF\u4f18\u5316\u7684spfa\u5bfb\u627e\u5206\u5c42\u56fe\n    bool __spfa(int s=S,int t=T)\n    {\n        deque&lt;int&gt; q;\n        // memset(d,0x3f,sizeof(d)); //c\n        //memset(v,0,sizeof(v));\n        for(int i=1;i&lt;=n;i++)\n        {\n            d[i]=Inf;   //\u6ce8\u610f\u8fd9\u4e2a\u6e05\u7a7a\u4e0d\u80fd\u4f7f\u7528Inf2\uff0c\u56e0\u4e3ad\u7684\u503c\u4e0d\u518d\u662f\u5c42\u6b21\u800c\u662f\u8d39\u7528\u6700\u77ed\u8def\u957f\u5ea6\u4e86\n            v[i]=0;\n        }\n\n        q.push_back(s);\n        d[s]=0;\n        v[s]=1;\n\n        while(q.size())\n        {\n            int x=q.front();\n            q.pop_front();\n            v[x]=0;\n            for(int e=head[x];e;e=edge[e].inext)\n            {\n                int y=edge[e].to;\n                if(edge[e].w&gt;0 &amp;&amp; d[y]&gt;d[x]+edge[e].c)\n                {\n                    d[y]=d[x]+edge[e].c;\n\n                    if(!v[y])\n                    {\n                        v[y]=1;\n                        if(q.size() &amp;&amp; d[y]&lt;d[q.front()])\n                        {\n                            q.push_front(y);\n                        }\n                        else q.push_back(y);\n                    }\n                }\n            }\n        }\n        //no connect\n        return d[t]&lt;Inf;\n    }\n\n    //\u4f7f\u7528dinic\u7b97\u6cd5\u63a8\u9001\u6d41\u3002\u8fd4\u56de\u7684\u662f\u6d41\u7684\u6539\u53d8\u91cf\u3002\n    Ty __dinic(int x, int t, Ty flow, Ty &amp;maxflow, Ty &amp;cost)\n    {\n        if (x == t)\n        {\n            maxflow+=flow;\n            return flow;\n        }\n        Ty rest = flow, delta;\n        v[x]=true;\n        for (int e = head[x]; e; e = edge[e].inext)\n        {\n            if (rest == 0)\n                return flow; //!!!\n            int y=edge[e].to;\n            if(v[y]) continue;\n            if (edge[e].w&gt;0 &amp;&amp; d[y] == d[x] + edge[e].c)\n            {\n                delta = __dinic(y, t, min(edge[e].w, rest), maxflow, cost);\n                if (!delta)\n                    d[y] = 0; //pruning\n                edge[e].w -= delta;\n                if (e % 2)\n                    edge[e + 1].w += delta;\n                else\n                    edge[e - 1].w += delta; //+= ?\n\n                cost+= delta*edge[e].c; //\u66f4\u65b0\u8d39\u7528\n                rest -= delta;\n            }\n        }\n        return flow - rest;\n    }\n\n    //\u53d6\u5f97\u6700\u5927\u6d41\u6700\u5c0f\u8d39\u7528\n    auto get_mcmf(int s=S,int t=T)\n    {\n        Ty maxflow=0, cost=0;\n        while (__spfa(s,t)) \n        {\n            // cost+=__update(maxflow,s,t);\n            __dinic(s,t,Inf,maxflow,cost);\n        }\n        return make_pair(maxflow, cost);\n    }\n}\n\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;MCMF_ZKW::S&gt;&gt;MCMF_ZKW::T;\n    for(int i=1;i&lt;=m;i++)\n    {\n        int x,y;\n        ll w,c;\n        cin&gt;&gt;x&gt;&gt;y&gt;&gt;w&gt;&gt;c;\n        adde(x,y,w,c); //!\n        adde(y,x,0,-c); //!\n    }\n\n    auto ans=MCMF_ZKW::get_mcmf();\n    cout&lt;&lt;ans.first&lt;&lt;\" \"&lt;&lt;ans.second&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#vector","title":"\u4f7f\u7528vector\u7684\u7248\u672c\uff0c\u5e38\u6570\u662f\u524d\u8005\u7684\u4e00\u534a\u5de6\u53f3","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\n\nnamespace Edges\n{\n    typedef ll Ty;\n    const int N=5e5+10,M=1e6+10;\n\n    //public\n    int n,m; //n,m: \u70b9\u3001\u8fb9\u6570\u91cf\n\n    //\u6b8b\u5dee\u7f51\u7edc\u7684\u8fb9\n    struct E\n    {\n        int from, to;\n        Ty w , c;\n        int dualedge_num;\n    };\n    // int head[N], total;\n    int total;\n    vector&lt;E&gt; head[N];\n\n    int adde(int x, int y, Ty w, Ty c)\n    {\n        ++total;\n        // edge[++total].from = x;\n        // edge[total].to = y;\n        // edge[total].w = w;\n        // edge[total].c=c;\n        // edge[total].inext = head[x];\n        // head[x] = total;\n        // head[x].emplace_back(x,y,w,c);\n        head[x].push_back({x,y,w,c});\n        return head[x].size()-1;\n    }\n\n    void adde2(int x, int y, Ty w, Ty c)\n    {\n        int dual1=adde(x,y,w,c);\n        int dual2=adde(y,x,0,-c);\n        head[x].back().dualedge_num=dual2;\n        head[y].back().dualedge_num=dual1;\n    }\n}\nusing namespace Edges;\n\n#include &lt;bitset&gt;\n\nnamespace MCMF_ZKW {\n    typedef ll Ty;\n    const int N=5e5+10; //N\uff1a\u70b9\u4e2a\u6570\n    const Ty Inf=1e18;  //Inf\uff1a\u6d41\u91cf\u65e0\u7a77\u5927\u503c\n    // const int Inf2=0x3f3f3f3f; //inf2\uff1a\u5c42\u6b21\u65e0\u7a77\u5927\u503c\n\n    //public\n    int S,T; //S,T: \u6e90\u70b9\u3001\u6c47\u70b9\n\n    //local\n    // bool v[N];\n    bitset&lt;N&gt; v;\n    Ty d[N]; \n    //incf\uff1a\u589e\u5e7f\u8def\n    //d: spfa\u6700\u77ed\u8def\n\n    //\u4f7f\u7528SLF\u4f18\u5316\u7684spfa\u5bfb\u627e\u5206\u5c42\u56fe\n    bool __spfa(int s=S,int t=T)\n    {\n        queue&lt;int&gt; q;\n                // memset(d,0x3f,sizeof(d)); //c\n        //memset(v,0,sizeof(v));\n        fill(d+1,d+1+n,Inf);\n        // fill(v+1,v+1+n,0);\n        for(int i=1;i&lt;=n;i++)\n        {\n            // d[i]=Inf;   //\u6ce8\u610f\u8fd9\u4e2a\u6e05\u7a7a\u4e0d\u80fd\u4f7f\u7528Inf2\uff0c\u56e0\u4e3ad\u7684\u503c\u4e0d\u518d\u662f\u5c42\u6b21\u800c\u662f\u8d39\u7528\u6700\u77ed\u8def\u957f\u5ea6\u4e86\n            v[i]=0;\n        }\n\n        q.push(s);\n        d[s]=0;\n        v[s]=1;\n\n        while(q.size())\n        {\n            int x=q.front();\n            q.pop();\n            v[x]=0;\n            // for(int e=head[x];e;e=edge[e].inext)\n            for(auto &amp;e:head[x])\n            {\n                // int y=edge[e].to;\n                int y=e.to;\n                // if(edge[e].w&gt;0 &amp;&amp; d[y]&gt;d[x]+edge[e].c)\n                if(e.w&gt;0 &amp;&amp;  d[y]&gt;d[x]+e.c)\n                {\n                    // d[y]=d[x]+edge[e].c;\n                    d[y]=d[x]+e.c;\n\n                    if(!v[y])\n                    {\n                        v[y]=1;\n                        // if(q.size() &amp;&amp; d[y]&lt;d[q.front()])\n                        // {\n                        //     q.push_front(y);\n                        // }\n                        // else \n                            q.push(y);\n                    }\n                }\n            }\n        }\n        //no connect\n        return d[t]&lt;Inf;\n    }\n\n    //\u4f7f\u7528dinic\u7b97\u6cd5\u63a8\u9001\u6d41\u3002\u8fd4\u56de\u7684\u662f\u6d41\u7684\u6539\u53d8\u91cf\u3002\n    Ty __dinic(int x, int t, Ty flow, Ty &amp;maxflow, Ty &amp;cost)\n    {\n        if (x == t)\n        {\n            maxflow+=flow;\n            return flow;\n        }\n        Ty rest = flow, delta;\n        v[x]=true;\n        // for (int e = head[x]; e; e = edge[e].inext)\n        for(auto &amp;e:head[x])\n        {\n            if (rest == 0)\n                return flow; //!!!\n            // int y=edge[e].to;\n            int y=e.to;\n            if(v[y]) continue;\n            // if (edge[e].w&gt;0 &amp;&amp; d[y] == d[x] + edge[e].c)\n            if (e.w&gt;0 &amp;&amp; d[y] == d[x] + e.c)\n            {\n                // delta = __dinic(y, t, min(edge[e].w, rest), maxflow, cost);\n                delta = __dinic(y, t, min(e.w, rest), maxflow, cost);\n                if (!delta)\n                    d[y] = 0; //pruning\n                // edge[e].w -= delta;\n                e.w -= delta;\n                // if (e % 2)\n                //     edge[e + 1].w += delta;\n                // else\n                //     edge[e - 1].w += delta; //+= ?\n                head[y][e.dualedge_num].w +=delta;\n                // cost+= delta*edge[e].c; //\u66f4\u65b0\u8d39\u7528\n                cost += delta * e.c;\n                rest -= delta;\n            }\n        }\n        return flow - rest;\n    }\n\n    //\u53d6\u5f97\u6700\u5927\u6d41\u6700\u5c0f\u8d39\u7528\n    auto get_mcmf(int s=S,int t=T)\n    {\n        Ty maxflow=0, cost=0;\n        while (__spfa(s,t)) \n        {\n            // cost+=__update(maxflow,s,t);\n            __dinic(s,t,Inf,maxflow,cost);\n        }\n        return make_pair(maxflow, cost);\n    }\n}\n\nll nn,a,b,c;\n\nnamespace Fast_IO {\n\n    char __nc()\n    {\n        static char buf[1000000], *p = buf, *q = buf;\n        return p == q &amp;&amp; (q = (p = buf) + fread(buf, 1, 1000000, stdin), p == q)\n                ? EOF\n                : *p++;\n    }\n\n    template &lt;typename T&gt; inline void read(T &amp;x) {\n    char c;\n    int sgn = 1;\n    x = 0;\n    c = __nc();\n    while (c &gt; '9' || c &lt; '0') {\n        if (c == '-')\n        sgn = -1;\n        c = __nc();\n    }\n    while (c &lt;= '9' &amp;&amp; c &gt;= '0') {\n        x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c - '0');\n        c = __nc();\n    }\n    x *= sgn;\n    }\n\n    template &lt;typename T&gt; inline void print(T x) {\n    if (x &lt; 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x &gt; 9) {\n        print(x / 10);\n    }\n    putchar(x % 10 + '0');\n    }\n\n\n    void readstr(char *a)\n    {\n        char c;\n        c = __nc();\n        while(!(c &lt;= 'z' &amp;&amp; c &gt;= 'a')) c=__nc();\n\n        while (c &lt;= 'z' &amp;&amp; c &gt;= 'a') {\n            *a=c;\n            a++;\n            c=__nc();\n        }\n    }\n} // namespace Fast_IO\nusing namespace Fast_IO;\n\nint main()\n{\n    // ios::sync_with_stdio(false);\n    // cin.tie(0);\n    // cout.tie(0);\n    // cin&gt;&gt;nn&gt;&gt;a&gt;&gt;b&gt;&gt;c;\n    read(nn);\n    read(a);\n    read(b);\n    read(c);\n    MCMF_ZKW::S=nn+2;\n    MCMF_ZKW::T=nn+1;\n    n=nn+5;\n    for(int i=1;i&lt;=nn;i++)\n    {\n        ll ai,bi,ci;\n        // cin&gt;&gt;ai&gt;&gt;bi&gt;&gt;ci;\n        read(ai);\n        read(bi);\n        read(ci);\n\n        // adde2(nn+1,i,1,0);\n        adde2(i,nn+1,1,0);\n\n        adde2(nn+3,i,1,-ai);\n        adde2(nn+4,i,1,-bi);\n        adde2(nn+5,i,1,-ci);\n    }\n\n    adde2(nn+2,nn+3,a,0);\n    adde2(nn+2,nn+4,b,0);\n    adde2(nn+2,nn+5,c,0);\n\n    auto ans=MCMF_ZKW::get_mcmf();\n    // cout&lt;&lt;-ans.second&lt;&lt;endl;\n    print(-ans.second);\n\n\n    // cin&gt;&gt;n&gt;&gt;m&gt;&gt;MCMF_ZKW::S&gt;&gt;MCMF_ZKW::T;\n    // for(int i=1;i&lt;=m;i++)\n    // {\n    //     int x,y;\n    //     ll w,c;\n    //     cin&gt;&gt;x&gt;&gt;y&gt;&gt;w&gt;&gt;c;\n    //     adde(x,y,w,c); //!\n    //     adde(y,x,0,-c); //!\n    // }\n\n    // auto ans=MCMF_ZKW::get_mcmf();\n    // cout&lt;&lt;ans.first&lt;&lt;\" \"&lt;&lt;ans.second&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_42","title":"\u5e26\u82b1\u6811\u5339\u914d","text":"<p>\u7b80\u8981\u539f\u7406\uff1a\u4ece\u6bcf\u4e2a\u5c1a\u672a\u5339\u914d\u7684\u70b9\u51fa\u53d1\u53bb\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u53cd\u8f6c\u3002\u4ea4\u66ff\u5730\u628a\u5339\u914d\u8fb9\u7684\u4e24\u7aef\u7684\u70b9\u6807\u8bb0\u6210o\u3001i\uff0c\u4eceo\u6807\u8bb0\u51fa\u53d1\u7684\u5982\u679c\u9047\u5230\u4e86o\uff0c\u8868\u660e\u9047\u5230\u4e86\u5947\u73af\uff0c\u5219\u6267\u884c\u7f29\u82b1\u64cd\u4f5c\uff1alca\u627e\u6839\uff0c\u7136\u540e\u6807\u8bb0\u6240\u6709\u73af\u4e0a\u7684\u70b9\u5bf9\u5e94\u7684\u82b1\u6839\u3002</p> <pre><code>// luogu 6113\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\n#include &lt;cassert&gt;\n#include &lt;random&gt;\n#include &lt;chrono&gt;\n\nusing namespace std;\ntypedef long long ll;\n\n// graph\n\nnamespace Blossom_Algorithm\n{\n    template &lt;typename T&gt;\n    class graph\n    {\n    public:\n        struct edge\n        {\n            int from;\n            int to;\n            T cost;\n        };\n        vector&lt;edge&gt; edges;\n        vector&lt;vector&lt;int&gt;&gt; g;\n        int n;\n        graph(int _n) : n(_n) { g.resize(n); }\n        virtual int add(int from, int to, T cost) = 0;\n    };\n\n    // undirectedgraph\n    template &lt;typename T&gt;\n    class undirectedgraph : public graph&lt;T&gt;\n    {\n    public:\n        using graph&lt;T&gt;::edges; //edges\uff1a\u8fb9\u8868\n        using graph&lt;T&gt;::g;     //g\uff1a\u90bb\u63a5\u8868\uff0c\u4fdd\u5b58\u7684\u662f\u8fb9\u7684\u6807\u53f7\n        using graph&lt;T&gt;::n;\n\n        undirectedgraph(int _n) : graph&lt;T&gt;(_n) {}\n        int add(int from, int to, T cost = 1)\n        {\n            assert(0 &lt;= from &amp;&amp; from &lt; n &amp;&amp; 0 &lt;= to &amp;&amp; to &lt; n); //\u6807\u53f7\u8303\u56f4\uff1a0~n-1\n            int id = (int)edges.size();\n            g[from].push_back(id);\n            g[to].push_back(id);\n            edges.push_back({from, to, cost});\n            return id;\n        }\n    };\n\n    // blossom / find_max_unweighted_matching\n    template &lt;typename T&gt;\n    vector&lt;int&gt; find_max_unweighted_matching(const undirectedgraph&lt;T&gt; &amp;g)\n    {\n        std::mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n        vector&lt;int&gt; match(g.n, -1);  // match\uff1a\u5339\u914d\n        vector&lt;int&gt; aux(g.n, -1);    // aux\uff1a\u65f6\u95f4\u6233\u8bb0\n        vector&lt;int&gt; label(g.n);      // label\uff1a\"o\" or \"i\"\uff0c\u7528\u4e8e\u5728\u627e\u589e\u5e7f\u8def\u65f6\u786e\u8ba4\u5947\u73af\n        vector&lt;int&gt; orig(g.n);       // orig\uff1a\u82b1\u6839\n        vector&lt;int&gt; parent(g.n, -1); // parent\uff1a\u7236\u8282\u70b9\n        queue&lt;int&gt; q;\n        int aux_time = -1;\n\n        //\u5bfb\u627e\uff08\u5df2\u7ecf\u6709\u7f29\u82b1\uff09\u56fe\u7684\u4e24\u4e2a\u82b1\u6839\u7684LCA\n        auto lca = [&amp;](int v, int u)\n        {\n            aux_time++; //\u6bcf\u6b21\u8c03\u7528\u65f6\u90fd\u4ee3\u8868\u5b58\u5728\u4e00\u4e2a\u80fd\u7f29\u7684\u82b1\uff0c\u56e0\u6b64\u76f8\u5f53\u4e8e\u82b1\u7684\u7f16\u53f7\u4e86\n\n            //\u4e24\u4e2a\u70b9\u8f6e\u6d41\u4ea4\u66ff\u5411\u524d\u8df3\uff0c\u649e\u5230\u8bbf\u95ee\u8fc7\u7684\u70b9\u5c31\u8868\u660e\u662flca\u4e86\n            while (true)\n            {\n                if (v != -1)\n                {\n                    if (aux[v] == aux_time)\n                    { // \u627e\u5230\u62dc\u8bbf\u8fc7\u7684\u70b9 \u4e5f\u5c31\u662fLCA\n                        return v;\n                    }\n                    aux[v] = aux_time;\n                    if (match[v] == -1)\n                    {\n                        v = -1;\n                    }\n                    else\n                    {\n                        v = orig[parent[match[v]]]; // \u4ee5\u5339\u914d\u70b9\u7684\u7236\u8282\u70b9\u7ee7\u7eed\u5bfb\u627e\n                    }\n                }\n                swap(v, u);\n            }\n        }; // lca\n\n        //\u4ee5a\u4e3a\u6839\u7684\u82b1\u8fdb\u884c\u7f29\u82b1\uff08\u6ce8\u610f\u8fd9\u4e24\u4e2a\u70b9u\u3001v\u90fd\u662fo\u578b\u70b9\uff09\n        auto blossom = [&amp;](int v, int u, int a)\n        {\n            while (orig[v] != a)\n            {\n                parent[v] = u;\n                u = match[v];\n                if (label[u] == 1)\n                { // \u521d\u59cb\u70b9\u8bbe\u4e3a\"o\" \u627e\u589e\u5e7f\u8def\uff08\u76f8\u5f53\u4e8e\u7f29\u82b1\u540e\u5c31\u65e0\u89c6\u4e86\u4ed6\u672c\u6765\u7684oi\u6807\u8bb0\u4e86\uff0ci\u578b\u70b9\u4e5f\u5168\u90e8\u6539\u6210o\u578b\u70b9\uff09\n                    label[u] = 0;\n                    q.push(u);\n                }\n                orig[v] = orig[u] = a; // \u7f29\u82b1\n                v = parent[u];\n            }\n        }; // blossom\n\n        //\u5f97\u5230\u4e86\u589e\u5e7f\u8def\u5e76\u53cd\u8f6c\n        auto augment = [&amp;](int v)\n        {\n            while (v != -1)\n            {\n                int pv = parent[v];\n                int next_v = match[pv];\n                match[v] = pv;\n                match[pv] = v;\n                v = next_v;\n            }\n        }; // augment\n\n        //bfs\u6765\u5bfb\u627e\u589e\u5e7f\u8def\u5e76\u53cd\u8f6c\u4e4b\u4ee5\u5b9e\u73b0\u5339\u914d\n        auto bfs = [&amp;](int root)\n        {\n            fill(label.begin(), label.end(), -1);\n            iota(orig.begin(), orig.end(), 0);\n            while (!q.empty())\n            {\n                q.pop();\n            }\n            q.push(root);\n            // \u521d\u59cb\u70b9\u8bbe\u4e3a \"o\", \u8fd9\u91cc\u4ee5\"0\"\u4ee3\u66ff\"o\", \"1\"\u4ee3\u66ff\"i\"\n            label[root] = 0;\n            while (!q.empty())\n            {\n                int v = q.front();\n                q.pop();\n                for (int id : g.g[v])\n                {\n                    auto &amp;e = g.edges[id];\n                    int u = e.from ^ e.to ^ v; //e.from == v\uff0c\u6240\u4ee5\u5f02\u6216\u51fa\u6765\u5e94\u8be5\u4e00\u5b9a\u662fe.to\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5199\u2026\u2026\n                    if (label[u] == -1)\n                    {                  // \u627e\u5230\u672a\u62dc\u8bbf\u70b9\n                        label[u] = 1;  // \u6807\u8bb0 \"i\"\n                        parent[u] = v; //\u5bf9\u6807\u8bb0\u4e3ai\u7684\u70b9\u4fdd\u5b58parent\uff08\u76f8\u5f53\u4e8e\u672a\u5339\u914d\u8fb9\u7684\u53cd\u5411\u8fde\u63a5\uff09\n                        if (match[u] == -1)\n                        {               // \u627e\u5230\u672a\u5339\u914d\u70b9\n                            augment(u); // \u5bfb\u627e\u589e\u5e7f\u8def\u5f84\n                            return true;\n                        }\n                        // \u627e\u5230\u5df2\u5339\u914d\u70b9 \u5c06\u4e0e\u5979\u5339\u914d\u7684\u70b9\u4e22\u5165queue \u5ef6\u4f38\u4ea4\u9519\u6811\n                        label[match[u]] = 0;\n                        q.push(match[u]);\n                        continue;\n                    }\n                    else if (label[u] == 0 &amp;&amp; orig[v] != orig[u])\n                    {\n                        // \u627e\u5230\u5df2\u62dc\u8bbf\u70b9 \u4e14\u6807\u8bb0\u540c\u4e3a\"o\" \u4ee3\u8868\u627e\u5230\"\u82b1\"\n                        int a = lca(orig[v], orig[u]);\n                        // \u627eLCA \u7136\u540e\u7f29\u82b1\n                        blossom(u, v, a);\n                        blossom(v, u, a);\n                    }\n                }\n            }\n            return false;\n        }; // bfs\n\n        //\u968f\u673a\u6253\u4e71\u5e76\u5339\u914d\n        auto greedy = [&amp;]()\n        {\n            vector&lt;int&gt; order(g.n);\n            // \u968f\u673a\u6253\u4e71 order\n            iota(order.begin(), order.end(), 0);\n            shuffle(order.begin(), order.end(), rng);\n\n            // \u5c06\u53ef\u4ee5\u5339\u914d\u7684\u70b9\u5339\u914d\n            for (int i : order)\n            {\n                if (match[i] == -1)\n                {\n                    for (auto id : g.g[i])\n                    {\n                        auto &amp;e = g.edges[id];\n                        int to = e.from ^ e.to ^ i; //\uff1f\uff1f\uff1f\n                        if (match[to] == -1)\n                        {\n                            match[i] = to;\n                            match[to] = i;\n                            break;\n                        }\n                    }\n                }\n            }\n        }; // greedy\n\n        // \u4e00\u5f00\u59cb\u5148\u968f\u673a\u5339\u914d\n        greedy();\n        // \u5bf9\u672a\u5339\u914d\u70b9\u627e\u589e\u5e7f\u8def\n        for (int i = 0; i &lt; g.n; i++)\n        {\n            if (match[i] == -1)\n            {\n                bfs(i);\n            }\n        }\n        return match;\n    }\n}\nusing namespace Blossom_Algorithm;\n\nint n,m;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n\n    cin&gt;&gt;n&gt;&gt;m;\n\n    undirectedgraph&lt;int&gt; G(n);\n\n    for(int i=1;i&lt;=m;i++)\n    {\n        int x,y;\n        cin&gt;&gt;x&gt;&gt;y;\n        G.add(x-1,y-1); //\u65e0\u5411\u8fb9\uff0c\u4e0d\u9700\u8981\u52a0\u4e24\u6b21\n    }\n\n    auto res=find_max_unweighted_matching(G);\n    int ans=0;\n    for(int i=0;i&lt;n;i++)\n    {\n        if(res[i]!=-1)\n        {\n            ans++;\n        }\n    }   \n\n    cout&lt;&lt;ans/2&lt;&lt;'\\n';\n    for(int i=0;i&lt;n;i++)\n    {\n        cout&lt;&lt; ((res[i]==-1) ? 0 : (res[i]+1))&lt;&lt;' ';\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_43","title":"\u6742\u9879","text":""},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_44","title":"\u79bb\u6563\u5316","text":"Funs || Methods Reliance Time Complexity Inputs Outputs Description copy_to_b N a\uff1a\u6570\u7ec4 b \u590d\u5236a\u5230b sort_and_unique copy_to_b nlogn n\uff1a\u957f\u5ea6\uff1bb\uff1a\u79bb\u6563\u5316\u540e\u6570\u7ec4 dlen\uff1a\u53bb\u91cd\u540e\u7684\u6570\u7ec4\u957f\u5ea6 \u5bf9b\u6392\u5e8f\u3001\u53bb\u91cd\uff0c\u8fd4\u56de\u53bb\u91cd\u540e\u7684\u6570\u7ec4\u957f\u5ea6 get_id sort_and_unique logn x:\u67e5\u627e\u503c\uff1bb\uff1a\u79bb\u6563\u5316\u540e\u6570\u7ec4\uff1b \u8fd4\u56de\u79bb\u6563\u5316\u540e\u7684\u503c \u8fd4\u56de\u79bb\u6563\u5316\u540e\u7684\u503c\uff081\u5f00\u59cb\u8ba1\u6570\uff09 <pre><code>typedef long long ll;\n\nnamespace Discretization {\n\n    const int N=1e6+10;\n    typedef ll Ty;\n\n    //public\n    Ty a[N],b[N];\n    int dlen;\n\n    // \u590d\u5236a\u5230b\n    void copy_to_b()\n    {\n        memcpy(b, a, sizeof(a));\n    }\n\n    // \u5bf9b\u6392\u5e8f\u3001\u53bb\u91cd\uff0c\u8fd4\u56de\u53bb\u91cd\u540e\u7684\u6570\u7ec4\u957f\u5ea6\n    int sort_and_unique(int n)\n    {\n        sort(b+1,b+1+n);\n        return dlen=unique(b+1,b+1+n)-b-1;\n    }\n\n    // \u8fd4\u56de\u79bb\u6563\u5316\u540e\u7684\u503c\uff081\u5f00\u59cb\u8ba1\u6570\uff09\n    inline int get_id(Ty x)\n    {\n        return lower_bound(b+1,b+1+dlen,x)-b;\n    }\n}\nusing namespace Discretization;\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_45","title":"\u5feb\u8bfb","text":"<p>\u6ce8\u610f\uff1a\u7528\u5feb\u8bfb\u7684\u65f6\u5019\u52a1\u5fc5\u8981\u628a  ios::sync_with_stdio(false); \u6ce8\u91ca\u6389\uff01</p> Funs || Methods Reliance Time Complexity Inputs Outputs Description read 1 \u6574\u6570\u53d8\u91cfx \u8bfb\u5165x \u8bfb\u5165x print 1 \u6574\u6570\u53d8\u91cfx \u8f93\u51fax\uff08\u4e0d\u5305\u62ec\u6362\u884c\uff09 <pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nnamespace Fast_IO {\n\n    char __nc()\n    {\n        static char buf[1000000], *p = buf, *q = buf;\n        return p == q &amp;&amp; (q = (p = buf) + fread(buf, 1, 1000000, stdin), p == q)\n                ? EOF\n                : *p++;\n    }\n\n    template &lt;typename T&gt; inline void read(T &amp;x) {\n    char c;\n    int sgn = 1;\n    x = 0;\n    c = __nc();\n    while (c &gt; '9' || c &lt; '0') {\n        if (c == '-')\n        sgn = -1;\n        c = __nc();\n    }\n    while (c &lt;= '9' &amp;&amp; c &gt;= '0') {\n        x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c - '0');\n        c = __nc();\n    }\n    x *= sgn;\n    }\n\n    template &lt;typename T&gt; inline void print(T x) {\n    if (x &lt; 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x &gt; 9) {\n        print(x / 10);\n    }\n    putchar(x % 10 + '0');\n    }\n\n\n    void readstr(char *a)\n    {\n        char c;\n        c = __nc();\n        while(!(c &lt;= 'z' &amp;&amp; c &gt;= 'a')) c=__nc();\n\n        while (c &lt;= 'z' &amp;&amp; c &gt;= 'a') {\n            *a=c;\n            a++;\n            c=__nc();\n        }\n    }\n} // namespace Fast_IO\nusing namespace Fast_IO;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0), cout.tie(0);\n  long long x;\n  read(x);\n  print(x);\n  putchar('\\n');\n  print(-x);\n  putchar('\\n');\n  print(0);\n  putchar('\\n');\n  return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#nth_element","title":"nth_element","text":"<pre><code>nth_element(a+1,a+k,a+n+1);\n</code></pre> <p><code>#include &lt;algorithm&gt;</code>\u5185\u7f6e\u51fd\u6570\u3002\u7b2ck\u540d\u5c06\u5728a[k]\u5904\uff0c\u6bd4\u5b83\u5c0f\u7684\u6240\u6709\u5143\u7d20\u5728\u5de6\u4fa7\uff0c\u6bd4\u4ed6\u5927\u7684\u6240\u6709\u5143\u7d20\u5728\u53f3\u4fa7\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_46","title":"\u4e8c\u5206","text":"<p>\u53ea\u662f\u8bb0\u4e00\u4e0b\uff0c\u4e00\u822c\u4e0d\u4f1a\u771f\u7684\u624b\u5199\u3002\u5305\u62ec\u4e00\u822c\u7684lowerbound\u548c\u53cd\u8fc7\u6765\u7248\u672c\u7684lowerbound\u3002\u6539\u6210upperbound\uff0c\u5219\u53ea\u9700\u8981\u6539\u4e00\u4e0b\u5224\u65ad\u5408\u6cd5\u6027\u7684\u6761\u4ef6\u3002\u8bf7\u52a1\u5fc5\u4fdd\u8bc1\u7b54\u6848\u5728l\u3001r\u5185\u5b58\u5728\u3002</p> <p>\u53e3\u8bc0\uff1a\u4ee5o\u4e3a\u6b63\u65b9\u5411\uff0c\u53cd\u5411\u53d6\u6574\uff0c\u201c\u5426\u5219\u201d\u53cd\u5411+\u8d21\u732e\uff0c\u201c\u8d21\u732e\u201d\u6b63\u5411\u3002</p> Funs || Methods Reliance Time Complexity Inputs Outputs Description bs_lowerbound logn L\u3001R\uff1a\u641c\u7d22\u4e0b\u6807\u8303\u56f4\uff0ca\uff1a\u641c\u7d22\u5e8f\u5217\uff0cx\uff1a\u6bd4\u8f83\u503c \u540c\u63cf\u8ff0 \u627e\u5230\u5e8f\u5217a\u4e2d\u5728\u8303\u56f4\u5185\u7684&gt;=x\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5e76\u8fd4\u56de\u5176\u503c bs_lowerbound2 logn L\u3001R\uff1a\u641c\u7d22\u4e0b\u6807\u8303\u56f4\uff0ca\uff1a\u641c\u7d22\u5e8f\u5217\uff0cx\uff1a\u6bd4\u8f83\u503c \u540c\u63cf\u8ff0 \u627e\u5230\u5e8f\u5217a\u4e2d\u5728\u8303\u56f4\u5185\u7684&lt;= x\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u5e76\u8fd4\u56de\u5176\u503c <pre><code>namespace BS {\n    //\u627e\u5230&gt;=x\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\n    template &lt;typename T&gt;\n    T bs_lowerbound(T L,T R,T a[],T x)\n    {\n        T l=L,r=R;\n        //\u5de6x\u53f3o\uff1a\u5411\u4e0b\u53d6\u6574\uff0c\u201c\u5426\u5219\u201d\u4e3a\u5de6\uff0c+1\uff08\u5411\u53f3\uff09\n        while(l&lt;r)\n        {\n            T mid=(l+r)&gt;&gt;1; //\u6ce8\u610f\u8fd9\u6837\u5199\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u7528\u9664\u6cd5\u662f\u54110\u53d6\u6574\uff0cl\u548cr\u4e3a\u8d1f\u6570\u65f6\u53ef\u80fd\u6709\u5f71\u54cd\n            if(a[mid]&gt;=x) r=mid;\n            else l=mid+1;\n        }\n        return a[l];\n    }\n\n    //\u627e\u5230&lt;=x\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\n    template &lt;typename T&gt;\n    T bs_lowerbound2(T L,T R,T a[],T x)\n    {\n        T l=L,r=R;\n        while(l&lt;r)\n        {\n            T mid=(l+r+1)&gt;&gt;1; //\u6ce8\u610f\u8fd9\u6837\u5199\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u7528\u9664\u6cd5\u662f\u54110\u53d6\u6574\uff0cl\u548cr\u4e3a\u8d1f\u6570\u65f6\u53ef\u80fd\u6709\u5f71\u54cd\n            if(a[mid]&lt;=x) l=mid;\n            else r=mid-1;\n        }\n        return a[l];\n    }\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_47","title":"\u4e09\u5206","text":"<p>\u8fd9\u662f\u627e\u6700\u5c0f\u503c\u7684\u8fde\u7eed\u503c\u57df\u4e09\u5206\u3002\u5207\u8bb0\u4e0d\u80fd\u76f4\u63a5\u7528\u4e8e\u79bb\u6563\u503c\uff01\uff08\u9664\u975e\u9898\u76ee\u6709\u4efb\u4f55\u6027\u8d28\u4fdd\u8bc1\u4e86\uff09</p> <pre><code>namespace TS\n{\n    template &lt;typename T=double&gt;\n    T ts_findmin(T l,T r,T (*f)(T),T eps=1e-9)\n    {\n        //r&gt;l\n        T param=0.01;\n        while (r-l&gt;=eps) \n        {\n            T mid=(l+r)/2;\n            T lmid=mid-(r-l)*param, rmid=mid+(r-l)*param;\n            if(f(lmid)&gt;f(rmid))\n            {\n                l=lmid;\n            }\n            else r=rmid;\n        }\n        return f(r);\n    }\n}\n\ndouble f(double x)\n{\n    return x*x;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cout&lt;&lt;TS::ts_findmin(-2.0, 5.0, f)&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#int128","title":"int128","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nvoid scan(__int128_t &amp;x)//\u8f93\u5165\n{\n    x = 0;\n    int f = 1;\n    char ch;\n    if((ch = getchar()) == '-') f = -f;\n    else x = x*10 + ch-'0';\n    while((ch = getchar()) &gt;= '0' &amp;&amp; ch &lt;= '9')\n        x = x*10 + ch-'0';\n    x *= f;\n}\n\nvoid print(__int128_t x)\n{\n    if(x &lt; 0)\n    {\n        x = -x;\n        putchar('-');\n    }\n     if(x &gt; 9) print(x/10);\n    putchar(x%10 + '0');\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    __int128_t a,b;\n    scan(a);\n    scan(b);\n    print(a+b);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_48","title":"\u2b50\u5206\u6570\u7c7b","text":"<p>\u6ce8\u610f\u8fd9\u4e2a\u9b3c\u4e1c\u897f\u5728\u5bf90\u7684\u5224\u65ad\u4e0a\u53ef\u80fd\u6709\u70b9\u95ee\u9898</p> <pre><code>ll gcd(ll a, ll b)\n{\n    return b ? gcd(b, a % b) : a;\n}\n\nstruct Fr\n{\n    ll x, y;\n    Fr(ll xx, ll yy)\n    {\n        if (yy == 0)\n        {\n            x = xx;\n            y = yy;\n            return;\n        }\n        ll g = gcd(xx, yy);\n        x = xx / g;\n        y = yy / g;\n    }\n\n    Fr() : x(0), y(1) {}\n    Fr(ll x) : x(x), y(1) {}\n\n    bool operator&lt;(const Fr &amp;a) const\n    {\n        if (a == Fr(0, 0))\n        {\n            if (x == 0 &amp;&amp; y == 0)\n                return false;\n            return true;\n        }\n        if (x == 0 &amp;&amp; y == 0)\n        {\n            return false;\n        }\n\n        return x * a.y &lt; y * a.x;\n    }\n\n    bool operator&gt;(const Fr &amp;a) const\n    {\n        if (a == Fr(0, 0))\n        {\n            //if(x==0 &amp;&amp; y==0) return false;\n            return false;\n        }\n        if (x == 0 &amp;&amp; y == 0)\n        {\n            return true;\n        }\n\n        return x * a.y &gt; y * a.x;\n    }\n\n    bool operator==(const Fr &amp;a) const\n    {\n        if (a.x == 0 &amp;&amp; a.y == 0)\n        {\n            if (x == 0 &amp;&amp; y == 0)\n                return true;\n            return false;\n        }\n        if (x == 0 &amp;&amp; y == 0)\n        {\n            if (a.x == 0 &amp;&amp; a.y == 0)\n                return true;\n            return false;\n        }\n        return x * a.y == y * a.x;\n    }\n\n    Fr operator+(const Fr &amp;a) const\n    {\n        return Fr(x * a.y + y * a.x, y * a.y);\n    }\n\n    Fr operator-(const Fr &amp;a) const\n    {\n        return Fr(x * a.y - y * a.x, y * a.y);\n    }\n\n    Fr operator*(const Fr &amp;a) const\n    {\n        return Fr(x * a.x, y * a.y);\n    }\n\n    Fr operator/(const Fr &amp;a) const\n    {\n        return Fr(x * a.y, y * a.x);\n    }\n\n    bool is_frac() const\n    {\n        if (y == 0)\n            return false;\n        return x % y != 0;\n    }\n};\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_49","title":"\u6700\u5c0f\u4e8c\u4e58\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\nint T;\n\nint m;\nll a1[N],a2[N],b[N];\n\npair&lt;double,double&gt; get_kb(ll a[],ll b[],ll n)\n{\n    ll x=0,y=0,xy=0,x2=0;\n    for(int i=1;i&lt;=n;i++)\n    {\n        x+=a[i];\n        y+=b[i];\n        xy+=a[i]*b[i];\n        x2+=a[i]*a[i];\n    }\n    double k=(n*xy-x*y)/(n*x2-x*x);\n    double bb=(y*x2-x*xy)/(n*x2-x*x);\n\n    return {k,bb};\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        scanf(\"%d\",&amp;m);\n        for(int i=1;i&lt;=m;i++)\n        {\n            scanf(\"%lld\",&amp;a1[i]);\n        }\n\n        for(int i=1;i&lt;=m;i++)\n        {\n            scanf(\"%lld\",&amp;a2[i]);\n        }\n\n        for(int i=1;i&lt;=m;i++)\n        {\n            scanf(\"%lld\",&amp;b[i]);\n        }\n\n        double k1,b1,k2,b2;\n        tie(k1,b1)=get_kb(a1,b,m);\n        tie(k2,b2)=get_kb(a2,b,m);\n\n        double ans1=0,ans2=0;\n        for(int i=1;i&lt;=m;i++)\n        {\n            ans1+=fabs(b[i]-(k1*a1[i]+b1));\n            ans2+=fabs(b[i]-(k2*a2[i]+b2));\n        }\n\n        if(ans1&gt;ans2)\n        {\n            printf(\"2\\n\");\n        }\n        else printf(\"1\\n\");\n\n\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#gospers_hack","title":"\u5b50\u96c6\u679a\u4e3e\u4e0egospers_hack","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\n\n//\u904d\u5386n\u4e2d\u9009k\u4e2a\u7684\u6240\u6709\u96c6\u5408\n//GH(3,5): 00111,01011,...,11100\nauto GospersHack(int k, int n)\n{\n    int cur = (1 &lt;&lt; k) - 1;\n    int limit = (1 &lt;&lt; n);\n    vector&lt;int&gt; res;\n    while (cur &lt; limit)\n    {\n        res.push_back(cur);\n        // do something\n        int lb = cur &amp; -cur;\n        int r = cur + lb;\n        cur = ((r ^ cur) &gt;&gt; __builtin_ctz(lb) + 2) | r;\n        // \u6216\uff1acur = (((r ^ cur) &gt;&gt; 2) / lb) | r;\n    }\n    return res;\n}\n\n\n//\u679a\u4e3e\u5b50\u96c6\nvoid it_subset(int sta)\n{\n    for (int sub = sta; sub &gt; 0; sub = (sub - 1) &amp; sta)\n    {\n        //do something...\n    }\n\n    //bit:sta\u7684\u4e8c\u8fdb\u5236\u4e0b\u4f4d\u6570-1\uff0c\u76f8\u5f53\u4e8e\u5bf92\u53d6log\n    int bit = 31 - __builtin_clz(sta);\n\n    //\u53d6\u5f97\u5b50\u96c6\u548c\uff08\u4e0b\u6807\u4ece0\u5f00\u59cb\u8ba1\u6570\uff09\uff1a\u4f8b\u59821101\u8868\u793a\u4e0b\u6807\u4e3a0\u30012\u30013\u7684\u5143\u7d20\u7684\u548c\n    for (int sta = 1; sta &lt; (1 &lt;&lt; n); ++sta)\n    {\n        //__builtin_clz : \u4e8c\u8fdb\u5236\u524d\u5bfc\u96f6\u4e2a\u6570\n        //bit\uff1a\u5728\u8fd9\u91cc\u662f\u76f8\u5f53\u4e8e\u5bf92\u53d6log\u7684\u7ed3\u679c\n        int bit = 31 - __builtin_clz(sta);\n        f[sta] = add(f[sta ^ (1 &lt;&lt; bit)], a[bit]);\n    }\n}\n\n// \u2022int __builtin_ffs (unsigned int x)\n// \u8fd4\u56dex\u7684\u6700\u540e\u4e00\u4f4d1\u7684\u662f\u4ece\u540e\u5411\u524d\u7b2c\u51e0\u4f4d\uff0c\u6bd4\u59827368\uff081110011001000\uff09\u8fd4\u56de4\u3002\n// \u2022int __builtin_clz (unsigned int x)\n// \u8fd4\u56de\u524d\u5bfc\u76840\u7684\u4e2a\u6570\u3002\uff08int 1\u7684\u8fd4\u56de\u503c\u662f31\uff0c2\u30013\u662f30\uff0c4~7\u662f29\uff09\n// \u2022int __builtin_ctz (unsigned int x)\n// \u8fd4\u56de\u540e\u9762\u76840\u4e2a\u4e2a\u6570\uff0c\u548c__builtin_clz\u76f8\u5bf9\u3002\n// \u2022int __builtin_popcount (unsigned int x)\n// \u8fd4\u56de\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\n// \u2022int __builtin_parity (unsigned int x)\n// \u8fd4\u56dex\u7684\u5947\u5076\u6821\u9a8c\u4f4d\uff0c\u4e5f\u5c31\u662fx\u76841\u7684\u4e2a\u6570\u6a212\u7684\u7ed3\u679c\u3002\n\n// \u6b64\u5916\uff0c\u8fd9\u4e9b\u51fd\u6570\u90fd\u6709\u76f8\u5e94\u7684usigned long\u548cusigned long long\u7248\u672c\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u540d\u540e\u9762\u52a0\u4e0al\u6216ll\u5c31\u53ef\u4ee5\u4e86\uff0c\u6bd4\u5982int __builtin_clzll\u3002\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    auto res=GospersHack(3,5);\n    for(auto v:res) cout&lt;&lt;v&lt;&lt;\" \";\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_50","title":"\u5bf9\u62cd","text":"<pre><code>import os\nimport random as rd\nimport sys\nimport time\n\n\ndef generate_one_case():\n    n=rd.randint(1,30)\n    k=rd.randint(1,n)\n\n    print(n,k)\n    for i in range(n):\n        val=rd.randint(1,50)\n        print(val,end=' ')\n    print()\n\ndef generate_multi_case():\n    T=rd.randint(1,10)\n    print(T)\n    for i in range(T):\n        generate_one_case()\n    print(flush=True)\n\n\nnamae=\"k\"\n\nfor _ in range(10000):\n    sys.stdout=open(f\"{namae}_in.txt\",\"w\")\n\n    generate_multi_case()\n\n    t1=time.perf_counter()\n    os.system(f\"{namae}.exe &lt; {namae}_in.txt &gt;{namae}_out.txt\")\n    t2=time.perf_counter()\n    print((t2-t1)*1000,file=sys.stderr)\n\n    t1=time.perf_counter()\n    os.system(f\"{namae}_std.exe &lt; {namae}_in.txt &gt;{namae}2_out.txt\")\n    t2=time.perf_counter()\n    print((t2-t1)*1000,file=sys.stderr)\n\n\n    if os.system(f\"fc {namae}_out.txt {namae}2_out.txt\"):\n        print(\"WA\",file=sys.stderr)\n        exit(0)\n    print(\"AC\",file=sys.stderr)\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_51","title":"\u6a21\u62df\u9000\u706b","text":"<pre><code>//P1337 [JSOI2004]\u5e73\u8861\u70b9 / \u540a\u6253XXX\n// \u6c42n\u4e2a\u70b9\u7684\u5e26\u6743\u91cd\u5fc3\uff0c\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5316\u67d0\u4e2a\u51fd\u6570\u503c\n\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\n#include &lt;ctime&gt;\n#include &lt;random&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\nusing ll=long long;\nusing ld=long double;\n\nint n;\nstruct Point\n{\n    ld x,y,w;\n}a[N];\n\nnamespace Anneal\n{\n    //do something...\n\n    //public\n    ld ansx,ansy,ansval;\n    ld nowx,nowy,nowval;\n    //ansx,ansy,ansval:\u5f53\u524d\u7ef4\u62a4\u7684\u6700\u597d\u7b54\u6848\uff0c\u56e0\u9898\u800c\u5f02\n    //nowx,nowy,nowval\uff1a\u5f53\u524d\u7684\u7b54\u6848\uff0c\u540c\u4e0a\uff0c\u56e0\u9898\u800c\u5f02\n\n    //do something end.\n\n\n    //local\n    ld t,tt; \n    ld D;\n    ld eps;\n    mt19937 rnd(time(0));\n    //t\uff1a\u6e29\u5ea6\n    //d\uff1a\u5355\u6b21\u964d\u6e29\u6bd4\u4f8b\n    //eps\uff1a\u6700\u5927\u7cbe\u5ea6\u8bef\u5dee\n    //rnd\uff1a\u968f\u673a\u6570\u751f\u6210\u5668\n\n    //\u751f\u6210\u968f\u673a\u6d6e\u70b9\u6570\n    inline ld __Rand()\n    {\n        return (ld)rand()/RAND_MAX;\n    }\n\n    //\u751f\u6210\u968f\u673a\u6574\u6570\n    inline int __randint(int r)\n    {\n        return rnd()%r+1;\n    }\n\n    //\u8ba1\u7b97\u8861\u91cf\u7528\u51fd\u6570\u503c\n    ld calval(ld x,ld y)\n    {   \n        //do something...\n        ld ans=0;\n        for(int i=1;i&lt;=n;i++)\n        {\n            ld dx=a[i].x-x, dy=a[i].y-y;\n            ans+=a[i].w*sqrt(dx*dx+dy*dy);\n        }\n        return ans;\n        //do something end.\n    }\n\n    //\u968f\u673a\u6539\u53d8\u503c\n    void rand_change()\n    {\n        //do something...\n        ld nextx=nowx+t*(__Rand()*2-1);\n        ld nexty=nowy+t*(__Rand()*2-1);\n        ld delta=calval(nextx,nexty)-nowval; //\u80fd\u91cf\u5dee\u503c\n\n        //\u91cd\u8981\u516c\u5f0f\uff1a\u53d1\u751f\u8f6c\u79fb\u7684\u51e0\u7387P(delta E)=e^(-delta E/T) \uff08\u65b0\u72b6\u6001\u66f4\u52a3\u65f6\uff09\n        if(delta&lt;0 || exp(-delta/t) &gt; __Rand())\n        // if( exp(-delta/t) &gt; __Rand())\n        {\n            ld tmp=nowval+delta;\n            tie(nowx,nowy,nowval)=tie(nextx,nexty,tmp);\n        }\n\n        if(nowval&lt;ansval)\n        {\n            tie(ansx,ansy,ansval)=tie(nowx,nowy,nowval);\n        }\n        //do something end.\n    }\n\n    int __cnt=0;\n    auto anneal()\n    {\n        //init\n        tt=t=100000;\n        D=0.97;\n        eps=0.001;\n        srand(time(0));\n\n        //do something...\n        //init2\n        ansx=nowx=ansy=nowy=0;\n        for(int i=1;i&lt;=n;i++)\n        {\n            ansx+=a[i].x;\n            ansy+=a[i].y;\n        }\n        ansx/=n;\n        ansy/=n;\n        // ansx=0.577;\n        // ansy=1.000;\n        ansval=calval(ansx,ansy);\n        nowx=ansx;\n        nowy=ansy;\n        nowval=ansval;\n\n        // cerr&lt;&lt;\"init_ansx:\"&lt;&lt;ansx&lt;&lt;endl;\n        // cerr&lt;&lt;\"init_ansy:\"&lt;&lt;ansy&lt;&lt;endl;\n        // cerr&lt;&lt;\"init_ansval:\"&lt;&lt;ansval&lt;&lt;endl;\n\n        while(t&gt;=eps)\n        {\n            rand_change();\n            t*=D;\n            __cnt++;\n        }\n        //do something end.\n\n        // cerr&lt;&lt;\"__cnt:\"&lt;&lt;__cnt&lt;&lt;endl;\n        // cerr&lt;&lt;\"nowval:\"&lt;&lt;nowval&lt;&lt;endl;\n        // cerr&lt;&lt;\"ansval:\"&lt;&lt;ansval&lt;&lt;endl;\n\n        //\u7ec6\u5316\u7cbe\u5ea6\uff0c\u5bf9\u4e8e\u8fd9\u9898\u6765\u8bf4\u662f\u5fc5\u8981\u7684\n        for(int i=1;i&lt;=3000;i++)\n        {\n            ld nextx=ansx+t*(__Rand()*2-1);\n            ld nexty=ansy+t*(__Rand()*2-1);\n            ld delta=calval(nextx,nexty)-ansval; //\u80fd\u91cf\u5dee\u503c\n\n            if(delta&lt;0)\n            {\n                ld tmp=ansval+delta;\n                tie(ansx,ansy,ansval)=tie(nextx,nexty,tmp);\n            }\n        }\n\n        return make_pair(ansx,ansy);\n    }\n\n}\nusing namespace Anneal;\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;a[i].x&gt;&gt;a[i].y&gt;&gt;a[i].w;\n    }\n    anneal();\n    cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;ansx&lt;&lt;\" \"&lt;&lt;ansy&lt;&lt;endl;\n    // cout&lt;&lt;ansx&lt;&lt;\" \"&lt;&lt;ansy&lt;&lt;endl;\n\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#in-c","title":"\u2b50\u5206\u9694\u5b57\u7b26\u4e32 in C++","text":"<p>\u81e8\u6642\u5f9e Algorithm_Design_and_other/pattern_recognition/classify.cpp\u88e1\u9762\u6284\u7684</p> <pre><code>    //\u5b9e\u7528\u7c7b\u51fd\u6570\n    namespace __Utility\n    {\n        //\u975e\u6570\u636e\u7279\u5f81\u540d\n        unordered_set&lt;string&gt; No_data_strings_name{\n            \"Id\",\"Species\"\n        };\n\n        //\u975e\u6570\u636e\u7279\u5f81\u4f4d\u7f6e\u5bf9\u5e94\u7684\u540d\u5b57\n        unordered_map&lt;int,string&gt; No_data_strings{\n            {0,\"Id\"},\n            {5,\"Species\"}\n        };\n\n        //\u5206\u5272\u5b57\u7b26\u4e32\n        auto split_str(const string &amp;s, char split_char = ',')\n        {\n            vector&lt;string&gt; res;\n            //lambda\n            auto string_find_first_not = [](const string &amp;s, size_t pos = 0, char split_char = ',') {\n                for (size_t i = pos; i &lt; s.size(); i++)\n                {\n                    if (s[i] != split_char &amp;&amp; s[i]!=' ' &amp;&amp; s[i]!='\\t')\n                        return i;\n                }\n                return string::npos;\n            };\n\n            size_t begin_pos = string_find_first_not(s, 0, split_char);\n            size_t end_pos = s.find(split_char, begin_pos);\n\n            while (begin_pos != string::npos)\n            {\n                size_t end_pos2=end_pos-1;\n                while(begin_pos&lt;end_pos2 &amp;&amp; (s[end_pos2]=='\\t' || s[end_pos2]==' '))\n                {\n                    end_pos2--;\n                }\n                res.emplace_back(s.substr(begin_pos, end_pos2 +1 - begin_pos));\n                begin_pos = string_find_first_not(s, end_pos, split_char);\n                end_pos = s.find(split_char, begin_pos);\n            }\n            return res;\n        }\n\n        //\u5b57\u7b26\u4e32\u8f6cdouble\n        double str_to_double(const string&amp; s)\n        {\n            return atof(s.c_str());\n        }\n\n        //\u5b57\u7b26\u4e32\u8f6cint\n        int str_to_int(const string&amp; s)\n        {\n            return atoi(s.c_str());\n        }\n    } // namespace __Utility\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#_52","title":"\u53ef\u53cd\u6094\u8d2a\u5fc3","text":"<p>Luogu 1484 \u79cd\u6811</p> <p>\u9898\u610f\uff1a\u6709N\u4e2a\u5751\uff0c\u6bcf\u4e2a\u5751\u53ef\u4ee5\u79cd\u6811\uff0c\u4e14\u83b7\u5229a[i]\uff08\u53ef\u4ee5\u4e3a\u8d1f\uff09\u3002\u4efb\u4f55\u76f8\u90bb\u4e24\u4e2a\u5751\u91cc\u4e0d\u80fd\u90fd\u79cd\u6811\uff0c\u95ee\u5728\u6700\u591a\u79cdK\u68f5\u6811\u7684\u524d\u63d0\u4e0b\u7684\u6700\u5927\u83b7\u5229</p> <p>\u505a\u6cd5\uff1a\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e2a\u94fe\u8868\uff0c\u79cd\u6811\u4ee5\u540e\u5408\u5e76\u94fe\u8868\u4e24\u7aef\u8282\u70b9\uff0c\u7136\u540e\u63d2\u5165\u4f18\u5148\u961f\u5217\u4e2d\u7ef4\u62a4\u3002\u6bcf\u6b21\u8981\u79cd\u54ea\u68f5\u6811\u7531\u4f18\u5148\u961f\u5217\u4e2d\u7684\u961f\u5934\u8282\u70b9\u786e\u5b9a\u3002</p> <p>\u8fd9\u4e48\u505a\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u90fd\u53ea\u591a\u79cd\u4e00\u68f5\u6811\uff08\u76f8\u5f53\u4e8e\u53ea\u82b1\u8d391\u7684\u4ee3\u4ef7\uff09\uff0c\u5e76\u4e14\u5f97\u5230\u7684\u8d21\u732e\u5c31\u662f\u4e2d\u5bf9\u5e94\u8fd9\u4e48\u591a\u6570\u7684\u6700\u5927\u503c\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N=2e6+10;\nint T;\n\nll n,k;\n\nstruct Node\n{\n    ll val;\n    ll lc,rc,ct; //ct: center\n\n    bool operator&lt;(const Node &amp;b) const\n    {   \n        return val&lt;b.val;\n    }\n}nd[N];\nbool vis[N];\n\n\nvoid dpdp()\n{\n    priority_queue&lt;Node&gt; q;\n\n    for(int i=1;i&lt;=n;i++)\n    {\n        q.push(nd[i]);\n    }\n\n    ll ans=0;\n    bool flag=true;\n    while(k--)\n    {\n        while(vis[q.top().ct])\n        {\n            q.pop();\n        }\n        auto u=q.top();\n        auto index=u.ct;\n        if(u.val&lt;=0) {flag=false;break;} //\u5982\u679c\u662f\u4e00\u5b9a\u8981\u79cd\u90a3\u4e48\u591a\u6570\u5c31\u8bf7\u53bb\u6389\u8fd9\u4e2a\n\n        ans+=u.val;\n        q.pop();\n\n        // merge node\n        nd[index].val=nd[nd[index].lc].val + nd[nd[index].rc].val - nd[index].val;\n\n        //list merge\n        vis[nd[index].lc] = vis[nd[index].rc] =1;\n        nd[index].lc = nd[nd[index].lc].lc;\n        nd[nd[index].lc].rc=index;\n\n        nd[index].rc = nd[nd[index].rc].rc;\n        nd[nd[index].rc].lc=index;\n\n        q.push(nd[index]);\n    }\n\n    if(true)\n    {\n        cout&lt;&lt;ans&lt;&lt;endl;\n    }\n    else\n    {\n        cout&lt;&lt;\"Error!\"&lt;&lt;endl;\n    }\n\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n\n    cin&gt;&gt;n&gt;&gt;k;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;nd[i].val;\n        nd[i].lc=i-1;\n        nd[i].rc=i+1;\n        nd[i].ct=i;\n        vis[i]=0;\n    }\n    // nd[1].lc=n; \u6709\u73af\u7684\u60c5\u51b5\uff08\u5bf9\u5e94luogu 1792\uff09\n    // nd[n].rc=1;\n\n    dpdp();\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#2021icpc","title":"\u7ecf\u5178\u4e8c\u9009\u4e00\u95ee\u9898\uff082021icpc\u4e0a\u6d77\u7684\u67d0\u9898\uff09","text":"<p>\u95ee\u9898\uff1an\u4e2a\u6709\u5e8f\u5bf9ai,bi\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6709\u5e8f\u5bf9\uff0c\u9009\u62e9\u5c06ai\u52a0\u5165set A\u6216\u8005\u5c06bi\u52a0\u5165set B\uff0c\u6700\u5c0f\u5316max(A)+max(B)\uff0c\uff08\u7a7a\u96c6\u65f6\u4e3a0\uff09</p> <p>\u89e3\u6cd5\uff1a</p> <p>\u5148\u5c06\u6709\u5e8f\u5bf9\u6309ai\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\u3002\u7531\u4e8eai&lt;=aj &amp;&amp; bi&lt;=bj\u65f6\uff0c \u53ef\u4ee5\u820d\u5f03ai,bi\uff08\u8fd9\u662f\u56e0\u4e3a\u8f83\u5927\u7684\u90a3\u4e2a\u5728\u6700\u4f18\u89e3\u4e2d\u4e00\u5b9a\u4f1a\u5728aj,bj\u4e2d\u9009\u4e00\u4e2a\uff0c\u800c\u6b64\u65f6ai,bi\u7684\u9009\u6cd5\u53ea\u8981\u8ddfaj,bj\u7684\u9009\u6cd5\u5c31\u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u5f97\u7b54\u6848\u589e\u5927\uff09\uff0c\u56e0\u6b64\u9700\u8981\u4fdd\u8bc1\u5904\u7406\u540e\u7684\u5e8f\u5217\u4e2d\uff0cbi\u968fi\u5355\u8c03\u9012\u51cf\uff0c\u56e0\u6b64\u5012\u7740\u626b\u4e00\u904d\u5220\u9664\u7834\u574fbi\u5355\u8c03\u6027\u7684\u5143\u7d20\u5373\u53ef\u3002\u5177\u4f53\u5b9e\u73b0\u65f6\u4e0d\u662f\u771f\u7684\u5220\u9664\u800c\u662f\u65b0\u5f00\u4e00\u4e2a\u5217\u8868\u505a\u8fd9\u4e2a\u64cd\u4f5c\u3002</p> <p>\u4e4b\u540e\uff0c\u5bf9\u4e8e\u67d0\u4e2aaj\uff0c\u53ea\u8981\u786e\u5b9a\u9009\u4e86j\uff0c\u90a3\u4e48\u6240\u6709\u6bd4j\u5927\u7684i\u90fd\u53ef\u4ee5\u5728\u4e0d\u589e\u52a0\u7b54\u6848\u7684\u524d\u63d0\u4e0b\u9009\u62e9ai\uff0cbj\u540c\u7406\u53ef\u4ee5\u5728\u4e0d\u589e\u52a0\u7b54\u6848\u7684\u524d\u63d0\u4e0b\u9009\u62e9\u6bd4j\u5c0f\u7684i\uff0c\u56e0\u6b64\u6700\u7ec8\u7b54\u6848\u51fa\u73b0\u5728 a1, a2+b1, a3+b2, ... , an+b_{n-1}, bn\u4e2d\u3002\u626b\u63cf\u4e00\u904d\u5373\u53ef\u5f97\u7b54\u6848\u3002</p>"},{"location":"%E6%97%A7md%28%E8%87%AA%E7%94%A8%29/%E8%87%AA%E5%88%B6Template/#cf1408-d-searchlights","title":"cf1408 D Searchlights","text":"<p>\u9898\u610f\uff1a\u6709\u82e5\u5e72\u4e2a\u5f3a\u76d7\u548c\u63a2\u7167\u706f\uff0c\u7ed9\u51fa\u4ed6\u4eec\u7684\u5750\u6807\uff080\u52301e6\u8303\u56f4\u5185\uff09\uff0c\u706f\u80fd\u770b\u5230\u5f3a\u76d7\u5f53\u4e14\u4ec5\u5f53\u706f\u4e0d\u4e25\u683c\u5728\u5f3a\u76d7\u7684\u53f3\u4e0a\u65b9\u3002\u73b0\u5728\u80fd\u4e00\u6b21\u6027\u79fb\u52a8\u6240\u6709\u7684\u5f3a\u76d7\u5411\u4e0a\u6216\u5411\u53f3\u4e00\u6b65\uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b65\u6570\u624d\u80fd\u628a\u5f3a\u76d7\u5168\u90e8\u79fb\u51fa\u53bb\u3002</p> <p>\u89e3\u6cd5\uff1a\u7b97\u51fa\u6bcf\u4e2a\u5f3a\u76d7\u5411\u4e0a\u548c\u5411\u53f3\u8d70\u6240\u9700\u7684\u6b65\u6570\u3002\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u6700\u5c0f\u5316\u6700\u5927\u503c\u3002\u5957\u7528\u5373\u53ef\u3002</p> <p>\uff08\u4e0a\u6d77\u7684H\u9898\u7684\u505a\u6cd5\u53c2\u8003oi\u505a\u9898\u8bb0\u5f55\uff09</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;memory.h&gt;\n\nusing namespace std;\nint T;\nint n,k;\nconst int N=2e5+10;\nint a[N],b[N];\npair&lt;int,int&gt; li[N],li2[N];\nint li_p,li_p2;\n\nlong long upd(int n)\n{\n    li_p2=0;\n    sort(li+1,li+1+n);\n    pair&lt;int,int&gt; last=li[n];\n    li2[++li_p2]=last;\n    for(int i=n-1;i&gt;=1;i--)\n    {\n        if(li[i].second&gt;last.second)\n        {\n            li2[++li_p2]=li[i];\n            last=li[i];\n        }\n    }\n    long long ans=min(li2[1].first,li2[li_p2].second);\n    for(int i=2;i&lt;=li_p2;i++)\n    {\n        ans=min(ans,(long long)li2[i].first+li2[i-1].second);\n    }\n    return ans;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin&gt;&gt;T;\n\n    while(T--)\n    {\n        cin&gt;&gt;n&gt;&gt;k;\n        for(int i=1;i&lt;=k;i++)\n        {\n            cin&gt;&gt;a[i];\n        }\n        for(int i=1;i&lt;=k;i++)\n        {\n            cin&gt;&gt;b[i];\n        }\n        sort(a+1,a+1+k);\n        sort(b+1,b+1+k);\n        long long ans=1e18;\n        for(int i=1;i&lt;=k;i++) //enumerate first match who;\n        {\n            li_p=0;\n            for(int j=1;j&lt;=k;j++)//match\n            {\n                int L,R;\n                //L\n                L=((b[(j+i-2)%k+1]-a[j])%n+n)%n;//\u6ce8\u610f\u4e0b\u6807\u8d8a\u754c\n\n                R=((a[j]-b[(j+i-2)%k+1])%n+n)%n;\n                li[++li_p]={2*L,R};\n            }\n            ans=min(ans,upd(li_p));\n\n            li_p=0;\n            for(int j=1;j&lt;=k;j++)//match\n            {\n                int L,R;\n                //L\n                L=((b[(j+i-2)%k+1]-a[j])%n+n)%n;\n\n                R=((a[j]-b[(j+i-2)%k+1])%n+n)%n;\n                li[++li_p]={L,R*2};\n            }\n            ans=min(ans,upd(li_p));\n        }\n        cout&lt;&lt;ans&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%BE%AE%E8%BD%AF%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95/","title":"\u5fae\u8f6f\u6691\u671f\u5b9e\u4e60\u7b14\u8bd5","text":"<p>(2022.1.23)</p>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%BE%AE%E8%BD%AF%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95/#t1-t2","title":"T1 &amp; T2","text":"<p>\u5e94\u8be5\u90fd\u662feasy\u9898\uff0c\u5c31\u4e0d\u8bf4\u4e86</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\n\nint solution(vector&lt;int&gt; &amp;A) {\n    // write your code in C++14 (g++ 6.2.0)\n\n    unordered_map&lt;int,int&gt; mp;\n    for(auto &amp;v:A)\n    {\n        mp[v]++;\n    }\n\n    int ans=0;\n    for(auto &amp;v:mp)\n    {\n        ans+=min(abs(v.second - v.first),v.second);\n    }\n\n    return ans;\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n\n    // vector&lt;int&gt; A{1,2,5,8,0};\n    // vector&lt;int&gt; A{-1,-3};\n    vector&lt;int&gt; A{1,1,3,4,4,4};\n    int ans = solution(A);\n    cout&lt;&lt;ans&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\n\n\nint solution(vector&lt;int&gt; &amp;V, vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {\n    // write your code in C++14 (g++ 6.2.0)\n\n    unordered_map&lt;int,int&gt; mp;\n    int n=V.size();\n    int m=A.size();\n    vector&lt;int&gt; g[N];\n    for(int i=0;i&lt;m;i++)\n    {\n        g[A[i]].emplace_back(B[i]);\n        mp[B[i]]++;\n    }\n\n    int ans=0;\n    vector&lt;int&gt; single;\n    for(int i=0;i&lt;n;i++)\n    {\n        if(mp[i]==0)\n        {\n            ans = max(ans, V[i]);\n            single.emplace_back(i);\n        }\n    }\n\n\n    if(n&gt;=2)\n    {\n        sort(single.begin(),single.end(),[&amp;](int a,int b){\n            return V[a]&gt;V[b];\n        });\n        ans = max(ans, V[single[0]] + V[single[1]]);\n\n        for(auto &amp;x:single)\n        {\n            for(auto &amp;y:g[x])\n            {\n                if(mp[y]==1)\n                {\n                    ans = max(ans,V[x] + V[y]);\n                }\n            }\n        }\n    }\n\n    return ans;\n\n}\n\n\n// int main()\n// {\n//     ios::sync_with_stdio(false);\n//     cin.tie(0),cout.tie(0);\n\n\n//     vector&lt;int&gt; A{1,1,3,4,4,4};\n//     int ans = solution(A);\n//     cout&lt;&lt;ans&lt;&lt;endl;\n//     return 0;\n// }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%BE%AE%E8%BD%AF%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95/#t3","title":"T3","text":"<p>\u9898\u610f\uff1a \u7ed9\u4e24\u4e2a\u5305\uff08\u5927\u5c0f\u662fX\u3001Y\uff0c\u8303\u56f4500\uff09\uff0c\u7ed9\u82e5\u5e72\u7269\u54c1\uff08\u4e2a\u6570n\u8303\u56f41e5\uff0c\u5927\u5c0f\u8303\u56f41~1000\uff09\uff0c\u95ee\u6700\u591a\u80fd\u88c5\u591a\u5c11\u4e2a\u7269\u54c1\u3002</p> <p>\u89e3\u6cd5\uff1a</p> <p>\u76f4\u63a5\\(n*x*y\\)\u7684dp\u80af\u5b9a\u662f\u4e0d\u884c\u7684\u3002\u4f46\u8fd9\u9898\u7684\u7269\u54c1\u9009\u62e9\u53ef\u4ee5\u8d2a\u5fc3\u5730\u9009\u6700\u5c0f\u7684\u90a3\u51e0\u4e2a\u3002</p> <p>\u56e0\u6b64\u505a\u6cd5\u5c31\u662f\uff0c\u5c06\u6240\u6709\u7269\u54c1\u6392\u5e8f\uff0c\u5e76\u4ece\u5c0f\u5230\u5927\u8003\u8651\u6bcf\u4e2a\u7269\u54c1\u662f\u5426\u80fd\u653e\u8fdb\u53bb\u3002\u5bf9\u6392\u5e8f\u4e4b\u540e\u7684\u7269\u54c1\u505a\u524d\u7f00\u548c\u3002dp\u6570\u7ec4\u7684\u72b6\u6001\u662f\uff1a\u5927\u5c0f\u4e3ax\u7684\u5305\u4e2d\u7528\u4e86\u591a\u5c11\u5927\u5c0f\uff0c\u503c\u4fdd\u5b58\u7684\u662f\u662f\u5426\u53ef\u884c\u3002\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001\u662f\u5426\u53ef\u8f6c\u79fb\u8fc7\u6765\u5c31\u53ef\u4ee5\u7528\uff08\u524d\u7f00\u548c-\u5f53\u524dX\u5305\u4e2d\u5927\u5c0f&lt;=Y\u7684\u5305\u5927\u5c0f\uff09\u6765\u505a\u3002</p> <p>\uff08\u6ce8\u610f\u8fd9\u4e2a\u8f6c\u79fb\u6bcf\u4e2a\u9636\u6bb5\u8981\u5012\u7740\u505a\uff09</p> \\[ dp_j = \\text{OR} \\begin{cases} (dp_{j-h_i} == 1) &amp; (pre_i - j &lt;= Y) \\\\ (dp_{j} == 1) &amp; (pre_i - j &lt;= Y) \\end{cases} \\] <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=4010;\n\n\n// you can use includes, for example:\n// #include &lt;algorithm&gt;\n\n// you can write to stdout for debugging purposes, e.g.\n// cout &lt;&lt; \"this is a debug message\" &lt;&lt; endl;\nint solution(vector&lt;int&gt; &amp;H, int X, int Y) {\n    // write your code in C++14 (g++ 6.2.0)\n\n    sort(H.begin(),H.end());\n\n    vector&lt;int&gt; pre;\n    pre.emplace_back(H[0]);\n\n    int n=H.size();\n\n    for(int i=1;i&lt;n;i++)\n    {\n        pre.emplace_back(pre.back()+H[i]);\n    }\n\n    // map&lt;int,int&gt; mp;\n    // mp[0]=0;\n\n    int dp[N];\n    memset(dp,-1,sizeof(dp));\n\n    dp[0]=1;\n\n    int ans=0;\n\n    for(int i=0;i&lt;n;i++)\n    {\n        int h = H[i];\n        // for(auto &amp;x:mp)\n        // {\n        //     int y = \n        // }\n\n        for(int j=X;j&gt;=0;j--)\n        {\n            if(j-h&gt;=0 &amp;&amp; dp[j-h] == 1 &amp;&amp; pre[i]-j&lt;=Y)\n            {\n                dp[j] = 1;\n            }\n            else if(dp[j]==1 &amp;&amp; pre[i]-j&lt;=Y)\n            {\n                dp[j] = 1;\n            }\n            else\n            {\n                dp[j] = -1;\n            }\n        }\n\n        int flag=0;\n        for(int j=0;j&lt;=X;j++)\n        {\n            if(dp[j]==1)\n            {\n                flag=1;\n            }\n        }\n        if(flag)\n        {\n            ans+=1;\n        }\n        else break;\n    }\n\n    return ans;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n\n    // vector&lt;int&gt; H{1,1,3};\n    // int ans = solution(H,1,1);\n\n    //     vector&lt;int&gt; H{6,5,5,4,3};\n    // int ans = solution(H,8,9);\n\n    //     vector&lt;int&gt; H{5,5,4,6};\n    // int ans = solution(H,8,8);\n\n    // vector&lt;int&gt; H{6,5,2,1,8};\n    // int ans = solution(H,17,5);\n\n    // vector&lt;int&gt; H{17,22};\n    // int ans = solution(H,22,16);\n\n    int n;\n    cin&gt;&gt;n;\n\n\n    int x,y;\n    cin&gt;&gt;x&gt;&gt;y;\n    vector&lt;int&gt; H;\n    for(int i=1;i&lt;=n;i++)\n    {\n        int x;\n        cin&gt;&gt;x;\n        H.emplace_back(x);\n    }\n\n    int ans = solution(H,x,y);\n    cout&lt;&lt;ans&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CF766/","title":"CF766","text":""},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CF766/#d-not-adding","title":"D Not Adding","text":"<p>\u9898\u610f\uff1a \u7ed9\u6570\u7ec4a\uff08\u6570\u57281e6\u4ee5\u5185\uff09\uff0c\u4ecea\u4e2d\u9009\u4e24\u4e2a\u6570\u53d6gcd\uff0c\u585e\u56de\u539f\u6570\u7ec4\u3002\u95ee\u6700\u591a\u80fd\u505a\u591a\u5c11\u6b21\u3002</p> <p>\u89e3\u6cd5\uff1a \u5f00\u4e00\u4e2a\u6876\u3002\u7136\u540e\u57281~1e6\u8303\u56f4\u5185\u679a\u4e3e\u56e0\u6570i\u3002\u5bf9\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u8fd9\u4e2a\u56e0\u6570\u7684\u500d\u6570\\(i*j\\)\uff0c\u53d6gcd\uff0c\u68c0\u67e5\u4e00\u4e0b\u6700\u7ec8\u8fd9\u4e2agcd\u662f\u4e0d\u662f\u51fa\u73b0\u8fc7\u5373\u53ef\uff0c\u5982\u679c\u6ca1\u51fa\u73b0\u8fc7\u8bf4\u660e\u8fd9\u4e2a\u6570\u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u53ef\u4ee5\u4ea7\u751f\u7684\u6570\uff0c\u8d21\u732e++\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e6+10;\n\nint a[N],n;\n\nint gcd(int x,int y)\n{\n    return y?gcd(y,x%y):x;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        int x;\n        cin&gt;&gt;x;\n        a[x]=1;\n    }\n\n    int ans=0;\n    for(int i=1;i&lt;=1e6;i++)\n    {\n        if(a[i]) continue;\n        int tmp=0;\n        for(int j=1;i*j&lt;=1e6;j++)\n        {\n            if(a[i*j])\n            {\n                tmp=gcd(tmp,i*j);\n            }\n        }\n        if(tmp==i)\n        {\n            ans++;\n        }\n    }\n\n    cout&lt;&lt;ans&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CF766/#e-not-escaping","title":"E Not Escaping","text":"<p>\u9898\u610f\uff1a \u4ece\\(n*m\\)\u7684\u697c\u7684\u5de6\u4e0b\u89d2\u9003\u5230\u53f3\u4e0a\u89d2\u3002\u7ed9k\u4e2a\u68af\u5b50\uff0c\u722c\u68af\u5b50\u53ef\u4ee5\u6062\u590dhi\u70b9\u8840\uff0c\u5728\u7b2ci\u5c42\u5de6\u53f3\u79fb\u52a8s\u7684\u8ddd\u79bb\u4f1a\u6389\\(xi*s\\)\u70b9\u8840\u3002\u6c42\u6700\u5c0f\u6389\u8840\u91cf(\u53ef\u4ee5\u662f\u8d1f\u6570)\u3002</p> <p>\u89e3\u6cd5\uff1a</p> <p>\u5bf9\u6bcf\u4e2a\u68af\u5b50\u7684\u4e24\u7aef\u7684\u6709\u6548\u70b9\u5f00\u4e00\u4e2a\u96c6\u5408\u6765\u5b58\u3002\u8d77\u70b9\u548c\u7ec8\u70b9\u518d\u8bbe\u7f6e\u989d\u5916\u7684\u70b9\u3002\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u628a\u697c\u7684\u623f\u95f4\u6570\u91cf\u538b\u7f29\u5230\u4e86\\(2k+2\\)\u8fd9\u4e2a\u7ea7\u522b\u3002\u5728\u6b64\u57fa\u7840\u4e0a\u6309\u5c42dp\u5373\u53ef\u3002</p> <p>\u5177\u4f53dp\u505a\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u5c42\u4ece\u5de6\u5230\u53f3\u8003\u8651\u8fd9\u5c42\u7684\u6bcf\u4e2a\u6709\u6548\u70b9\uff0c\u5148\u8ba9\u8fd9\u4e9b\u70b9\u4ece\u66f4\u4f4e\u7684\u697c\u5c42\u7684\u70b9\u8f6c\u79fb\u8fc7\u6765\uff08\u7528\u8fc7\u5728\u6bcf\u4e2a\u70b9\u4e0a\u5f00\u4e00\u4e2aladder vector\u5b9e\u73b0\uff09\u3002\u7136\u540e\u662f\u540c\u5c42\u7684\u8f6c\u79fb\uff0c\u591a\u5f00\u4e00\u4e2a\u6570\u7ec4\u4ece\u5de6\u5230\u53f3\u626b\u4e00\u904d\uff0c\u4ece\u53f3\u5230\u5de6\u626b\u4e00\u904d\uff0c\u4e2d\u95f4\u5f00\u4e2a\u53d8\u91cf\u7ef4\u62a4\u6700\u5c0f\u503c\u5e76\u4ee5\u6b64\u6700\u5c0f\u503c\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u6700\u540e\u628a\u65b0\u5f00\u7684\u8fd9\u4e2a\u6570\u7ec4\u590d\u5236\u56de\u53bb\u5373\u53ef\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+20;\nint T;\n\nint n,m,k;\nll X[N];\n\nmap&lt;pair&lt;int,int&gt;,int&gt; nodemap;\npair&lt;int,int&gt; node[N];\nint nodecnt;\n\n\nvector&lt;int&gt; floor_list[N];// ... -&gt; node id\nvector&lt;pair&lt;int,ll&gt;&gt; ladder[N]; // node id -&gt; {node id, h}\nll dp[N]; //node id -&gt; val\n\nint addnode(int x,int y)\n{\n    if(nodemap.find({x,y}) == nodemap.end())\n    {\n        nodemap[{x,y}] = ++nodecnt;\n        node[nodecnt] = {x,y};\n        floor_list[x].emplace_back(nodecnt);\n        ladder[nodecnt].clear();\n    }\n    return nodemap[{x,y}];\n}\n\nvoid addladder(int x,int y,int x2,int y2,ll h)\n{\n    int from = addnode(x,y);\n    int to = addnode(x2,y2);\n    ladder[to].emplace_back(from,h);\n}\n\nvoid init()\n{\n    nodecnt=0;\n    nodemap.clear();\n    for(int i=0;i&lt;=n+1;i++)\n        floor_list[i].clear();\n\n\n\n    // addnode(0,1);\n    // addnode(n+1,m);\n    addladder(0,1,1,1,0);\n    addladder(n,m,n+1,m,0);\n}\n\nvoid upd_from_same_floor(int floor_id) //2\n{\n    unordered_map&lt;int,ll&gt; dp2;\n    for(auto &amp;id:floor_list[floor_id])\n    {\n        dp2[id] = dp[id];\n    }\n\n    //L to R\n    ll minval = 1e17, last_pos = 0;\n    for(auto &amp;id:floor_list[floor_id])\n    {\n        //upd minval\n        minval += X[floor_id] * (node[id].second-last_pos);\n        minval = min(minval, dp[id]);\n        last_pos = node[id].second;\n\n        //upd dp\n        dp2[id] = min(\n            dp2[id],\n            minval\n        );\n    }\n\n    //R to L\n    minval = 1e17, last_pos = m+1;\n    reverse(floor_list[floor_id].begin(),floor_list[floor_id].end());\n    for(auto &amp;id:floor_list[floor_id])\n    {\n        //upd minval\n        minval += X[floor_id] * -(node[id].second-last_pos);\n        minval = min(minval, dp[id]);\n        last_pos = node[id].second;\n\n        //upd dp\n        dp2[id] = min(\n            dp2[id],\n            minval\n        );\n    }\n\n    for(auto &amp;[id,val]:dp2)\n    {\n        dp[id] = val;\n    }\n}\n\nvoid upd_from_forward_floor(int floor_id) //1\n{\n    for(auto &amp;id:floor_list[floor_id])\n    {\n        for(auto &amp;v:ladder[id])\n        {\n            dp[id] = min(\n                dp[id],\n                dp[v.first] - v.second\n            );\n        }\n    }\n}\n\nll dpdp()\n{\n\n    for(int i=0;i&lt;=10+nodecnt;i++)\n    {\n        dp[i]=1e17;\n    }\n    dp[1]=0;\n\n    for(int i=0;i&lt;=n+1;i++)\n    {\n        sort(floor_list[i].begin(),floor_list[i].end(),[&amp;](int ida,int idb){\n            return node[ida].second&lt;node[idb].second;\n        });\n        upd_from_forward_floor(i);\n        upd_from_same_floor(i);\n    }\n\n    return dp[addnode(n+1,m)];\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;\n        init();\n        for(int i=1;i&lt;=n;i++)\n        {\n            cin&gt;&gt;X[i];\n        }\n        for(int i=1;i&lt;=k;i++)\n        {\n            ll a,b,c,d,h;\n            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;h;\n            addladder(a,b,c,d,h);\n        }   \n        ll ans = dpdp();\n        // cout&lt;&lt;((ans&gt;1e16)?(\"NO ESCAPE\"):(ans))&lt;&lt;'\\n';\n        if(ans&gt;1e16)\n        {\n            cout&lt;&lt;\"NO ESCAPE\\n\";\n        }\n        else\n        {\n            cout&lt;&lt;ans&lt;&lt;\"\\n\";\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CF767/","title":"CF767","text":""},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CF767/#c-meximum-array","title":"C Meximum Array","text":"<p>\u9898\u610f\uff1a \u7ed9\u5e8f\u5217a\u3002\u6bcf\u6b21\u4ecea\u91cc\u9762\u9009\u4e00\u4e2a\u524d\u7f00\uff0c\u6c42mex\uff0c\u7136\u540e\u653e\u5230b\u540e\u9762\uff0c\u7136\u540e\u4ecea\u5220\u6389\u8fd9\u4e2a\u524d\u7f00\uff0c\u5982\u6b64\u53cd\u590d\u6784\u9020\u51fab\u3002\u95eeb\u7684\u6700\u5927\u5b57\u5178\u5e8f\u662f\u4ec0\u4e48</p> <p>\u89e3\u6cd5\uff1a </p> <p>\u6700\u5927\u5b57\u5178\u5e8f\u3002\u56e0\u6b64\u6bcf\u4e00\u6b21\u8981\u6dfb\u52a0\u7684\u503c\u80af\u5b9a\u90fd\u662f\u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u53f3\u4fa7\u5f97\u5230\u7684mex\u7684\u7ed3\u679c\uff0c\u73b0\u5728\u8981\u53d6\u4f7f\u5f97mex\u7684\u503c\u4ecd\u7136\u662f\u5b83\u7684\u6700\u5de6\u4fa7\u7684\u90a3\u4e2a\u4f4d\u7f6e\u3002</p> <p>\u4ece\u53f3\u5230\u5de6\u6c42\u4e00\u4e0b\u540e\u7f00mex\u5373\u53efO1\u5f97\u5230\u8fd9\u6b65\u7684\u7b54\u6848x\u3002\u4e4b\u540e\u8981\u60f3\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u76f4\u63a5\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5411\u53f3\u66b4\u529b\u626b\uff0c\u626b\u5230\u7b2c\u4e00\u4e2a\u4f7f\u5f97mex\u503c\u4e3ax\u5c31\u505c\u4e0b\u6765\u5373\u53ef\u3002\u8fd9\u4e48\u505a\u53ef\u4fdd\u8bc1\u590d\u6742\u5ea6\uff08\u56e0\u4e3amex\u503c\u7684\u548c\u80af\u5b9a\u662fOn\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u626b\u5230\u90a3\u4e2a\u503c\u4e4b\u540e\u7acb\u5373\u505c\u4e0b\u5c31\u4e00\u5b9a\u53ef\u4ee5\u4fdd\u8bc1\u66b4\u529b\u626b\u7684\u6b21\u6570\u4e4b\u548c\u4e3aOn\uff09\u3002</p> <p>\u5b9e\u73b0\u65f6\u6ce8\u610f\u7528bitset\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\n#include &lt;bitset&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\nint T;\n\nint n;\nint a[N];\nint b[N]; //suffix mex\n\nvoid predo()\n{\n    int ans=0;\n    // set&lt;int&gt; s;\n    bitset&lt;N&gt; s;\n    for(int i=n;i&gt;=1;i--)\n    {\n        // s.insert(a[i]);\n        s.set(a[i]);\n        while(s.test(ans))\n        {\n            ans++;\n        }\n        b[i]=ans; //suffix mex\n    }\n}\n\npair&lt;int,int&gt; find_left(int l)\n{\n    // set&lt;int&gt; s;\n    bitset&lt;N&gt; s;\n    int ans=0,pos=l;\n    for(int i=l;i&lt;=n;i++)\n    {   \n        // s.insert(a[i]);\n        s.set(a[i]);\n        // while (s.find(ans)!=s.end())\n        while(s.test(ans))\n        {\n            ans++;\n            pos=i;\n        }\n\n        if(ans==b[l]) //break instantly if mex(l,pos) == mex(l,n) as ans is impossible to be updated any more\n        {\n            break;\n        }\n    }\n\n    return {pos,ans};\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        cin&gt;&gt;n;\n        for(int i=1;i&lt;=n;i++)\n        {\n            cin&gt;&gt;a[i];\n        }\n\n        predo(); \n\n        int p=1;\n        vector&lt;int&gt; vec;\n        while(p&lt;=n)\n        {\n            auto v=find_left(p);\n\n            p=v.first+1;\n            // cout&lt;&lt;v.second&lt;&lt;\" \";\n            vec.emplace_back(v.second);\n        }\n\n        cout&lt;&lt;vec.size()&lt;&lt;'\\n';\n        for(auto v:vec)\n        {\n            cout&lt;&lt;v&lt;&lt;\" \";\n        }\n        cout&lt;&lt;'\\n';\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CFED121/","title":"CFED121","text":""},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CFED121/#d-martial-arts-tournament","title":"D Martial Arts Tournament","text":"<p>\u9898\u610f\uff1a \u7ed9\u4e00\u5806\u4eba\u7684\u91cd\u91cf\uff0c\u8fd9\u5806\u4eba\u8981\u88ab\u6309\u7167\u9608\u503cx\u548cy\u5206\u6210\u4e09\u6279\u4eba\u3002\u4f46\u6bcf\u6279\u4eba\u8981\u6ee1\u8db3\u4eba\u6570\u662f2\u7684\u5e42\u6b21\u3002\u4e0d\u8db3\u65f6\u8981\u627e\u4eba\u66ff\u8865\u3002\u95ee\u600e\u4e48\u5212\u5206\u4f7f\u5f97\u66ff\u8865\u4eba\u6570\u6700\u5c11\uff0c\u95ee\u8fd9\u4e2a\u6700\u5c11\u4eba\u6570\u3002</p> <p>\u89e3\u6cd5\uff1a \u53bb\u91cd\uff0c\u6392\u5e8f\uff0c\u679a\u4e3e\u7b2c\u4e00\u6bb5\u5230\u54ea\u91cc\u3002\u7b2c\u4e8c\u6bb5\u548c\u7b2c\u4e09\u6bb5\u7528\u4e8c\u5206\u68c0\u67e5\u548c\u7684\u5927\u5c0f\u6765\u66f4\u65b0\u7b54\u6848\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\nint T;\n\nll n,nb;\nll a[N];\nll b[N];\nll sum[N];\n\nll cal(ll x)\n{\n    ll tmpans=1;\n    while(tmpans&lt;x) tmpans&lt;&lt;=1;\n    tmpans-=x;\n\n    return tmpans;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;T;\n    for(int _=1;_&lt;=T;_++)\n    {\n        cin&gt;&gt;n;\n        for(int i=1;i&lt;=n;i++)        {\n            cin&gt;&gt;a[i];\n        }\n\n        sort(a+1,a+1+n);\n        for(int i=1;i&lt;=n+5;i++)\n        {\n            b[i]=a[i];\n        }\n        nb = unique(b+1,b+1+n) - (b+1);\n        sum[0]=sum[1]=0;\n        for(int i=1,j=1;i&lt;=n;i++)\n        {\n            if(a[i]==b[j])\n            {\n                sum[j] ++;\n            }\n            else\n            {\n                j++;\n                sum[j]=sum[j-1]+1;\n            }\n        }\n\n        ll ans=1e18;\n        for(int i=0;i&lt;=nb;i++)\n        {\n            // ll tmpans = 1&lt;&lt;(ll)ceil(log2());\n            // ll tmpans=1;\n            // while(tmpans&lt;sum[i]) tmpans&lt;&lt;=1;\n            // tmpans-=sum[i];\n            ll tmpans = cal(sum[i]);\n\n            for(int z=0;z&lt;=18;z++)\n            {\n                ll zz  = 1ll&lt;&lt;z; //2^z;\n\n                ll L=i;\n                ll R=nb;\n\n                while(L&lt;R)\n                {\n                    ll mid=(L+R+1)&gt;&gt;1;\n                    if(sum[mid]-sum[i]&lt;=(zz))\n                    {\n                        L=mid;\n                    }\n                    else R=mid-1;\n                }\n\n                ll tmpans2 = tmpans;\n                tmpans2 += zz - (sum[L]-sum[i]);\n                tmpans2 += cal(n - sum[L]);\n                ans = min(ans,tmpans2);\n            }\n        }\n\n        cout&lt;&lt;ans&lt;&lt;endl;\n\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/Codeforces/CFED121/#e-black-and-white-tree","title":"E Black and White Tree","text":"<p>\u9898\u610f\uff1a \u7ed9\u6811\uff0c\u6811\u4e0a\u6709\u9ed1\u767d\u70b9\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8981\u56de\u7b54\u4ee5\u4e0b\u8be2\u95ee\uff1a\u5982\u679c\u82af\u7247\u653e\u5728\u8fd9\u4e2a\u70b9\u4e0a\u80fd\u4e0d\u80fd\u79fb\u52a8\u5230\u4efb\u4f55\u4e00\u4e2a\u9ed1\u70b9\u3002\u79fb\u52a8\u7684\u89c4\u5219\u662f\u6bcf\u6b21\u9009\u4e00\u4e2a\u9ed1\u70b9\uff08\u4f46\u4e24\u6b21\u4e0d\u80fd\u8fde\u7eed\u9009\u540c\u4e00\u4e2a\uff09\u7136\u540e\u671d\u5b83\u52a8\u4e00\u6b65\u3002</p> <p>\u89e3\u6cd5\uff1a</p> <p>\u76f8\u90bb\u7684\u70b9x\u80fd\u5230y\u4e14\u4e0b\u4e00\u6b65\u4e0d\u4f1a\u5f3a\u5236\u56de\u6765\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1a</p> <ul> <li>y\u5c31\u662f\u9ed1\u70b9</li> <li>\u5220\u53bbx\u548cy\u7684\u8fde\u8fb9\u540e\uff0cy\u6240\u5728\u8054\u901a\u5206\u91cf\u4e2d\u6709\u4e24\u4e2a\u9ed1\u70b9\u3002</li> </ul> <p>\u6839\u636e\u8fd9\u4e2a\u89c4\u5219\u5efa\u7acb\u4e00\u4e2a\u65b0\u56fe\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0abfs\u5373\u53ef\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;unordered_set&gt;\n#include &lt;queue&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=4e5+10;\n\nint n;\nvector&lt;int&gt; g[N], g2[N];\nint cnt[N];\nint c[N],sum;\n\nvoid dfs(int x,int fa)\n{\n    cnt[x] += c[x];\n    for(auto &amp;y:g[x])\n    {\n        if(y==fa) continue;\n        dfs(y,x);\n        cnt[x] += cnt[y];\n    }\n}\n\nvoid dfs2(int x,int fa)\n{\n    for(auto &amp;y:g[x])\n    {\n        if(y==fa) continue;\n        dfs2(y,x);\n\n        // y -&gt; x\n        // x -&gt; y (inverse edge)\n        if(c[x] || (sum - cnt[y]) &gt;=2)\n        {\n            g2[x].emplace_back(y);\n        }\n\n        // x -&gt; y\n        // y -&gt; x (inverse edge)\n        if(c[y] || (cnt[y]) &gt;=2)\n        {\n            g2[y].emplace_back(x);\n        }\n\n    }\n\n    if(fa!=-1)\n    {\n        // x -&gt; fa\n        // fa -&gt; x (inverse edge)\n        if(c[fa] || (sum - cnt[x]) &gt;= 2)\n        {\n            g2[fa].emplace_back(x);\n        }\n\n        // fa -&gt; x\n        // x -&gt; fa (inverse edge)\n        if(c[x] || (cnt[x]) &gt;= 2)\n        {\n            g2[x].emplace_back(fa);\n        }\n    }\n}\n\nint vis[N];\nvoid bfs()\n{\n    queue&lt;int&gt; q;\n\n    for(int i=1;i&lt;=n;i++)\n    {\n        if(c[i])\n        {\n            q.push(i);\n        }\n    }\n\n    while(q.size())\n    {\n        auto x = q.front();\n        q.pop();\n        if(vis[x]) continue;\n        vis[x]=true;\n        for(auto &amp;y:g2[x])\n        {\n            q.push(y);\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        cin&gt;&gt;c[i];\n        sum+=c[i];\n    }\n\n    for(int i=1;i&lt;=n-1;i++)\n    {\n        int x,y;\n        cin&gt;&gt;x&gt;&gt;y;\n        g[x].emplace_back(y);\n        g[y].emplace_back(x);\n    }\n\n    dfs(1,-1);\n    dfs2(1,-1);\n    bfs();\n\n    for(int i=1;i&lt;=n;i++)\n    {\n        cout&lt;&lt; vis[i]&lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"}]}